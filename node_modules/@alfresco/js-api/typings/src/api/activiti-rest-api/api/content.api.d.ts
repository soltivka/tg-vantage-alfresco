/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { RelatedContentRepresentation } from '../model/relatedContentRepresentation';
import { ResultListDataRepresentationRelatedContentRepresentation } from '../model/resultListDataRepresentationRelatedContentRepresentation';
import { BaseApi } from './base.api';
/**
 * Content service.
 * @module ContentApi
 */
export declare class ContentApi extends BaseApi {
    /**
     * Attach existing content to a process instance
     *
     *
     *
     * @param processInstanceId processInstanceId
     * @param relatedContent relatedContent
     * @param opts Optional parameters
     * @param opts.isRelatedContent isRelatedContent
     * @return Promise<RelatedContentRepresentation>
     */
    createRelatedContentOnProcessInstance(processInstanceId: string, relatedContent: RelatedContentRepresentation | any, opts?: any): Promise<RelatedContentRepresentation>;
    /**
     * Attach existing content to a task
     *
     *
     *
     * @param taskId taskId
     * @param relatedContent relatedContent
     * @param opts Optional parameters
     * @param opts.isRelatedContent isRelatedContent
     * @return Promise<RelatedContentRepresentation>
     */
    createRelatedContentOnTask(taskId: string, relatedContent: RelatedContentRepresentation | any, opts?: any): Promise<RelatedContentRepresentation>;
    /**
     * Upload content and create a local representation
     *
     *
     *
     * @param file file
     * @return Promise<RelatedContentRepresentation>
     */
    createTemporaryRawRelatedContent(file: any): Promise<RelatedContentRepresentation>;
    /**
     * Create a local representation of content from a remote repository
     *
     *
     *
     * @param relatedContent relatedContent
     * @return Promise<RelatedContentRepresentation>
     */
    createTemporaryRelatedContent(relatedContent: RelatedContentRepresentation): Promise<RelatedContentRepresentation>;
    /**
     * Remove a local content representation
     *
     *
     *
     * @param contentId contentId
     * @return Promise<{}>
     */
    deleteContent(contentId: number): Promise<any>;
    /**
     * Get a local content representation
     *
     *
     *
     * @param contentId contentId
     * @return Promise<RelatedContentRepresentation>
     */
    getContent(contentId: number): Promise<RelatedContentRepresentation>;
    /**
     * Get content Raw URL for the given contentId
     * @param contentId contentId
     */
    getRawContentUrl(contentId: number): string;
    /**
     * Stream content rendition
     *
     *
     *
     * @param contentId contentId
     * @param renditionType renditionType
     * @return Promise<{}>
     */
    getRawContent(contentId: number, renditionType?: string): Promise<any>;
    /**
     * List content attached to a process instance
     *
     *
     *
     * @param processInstanceId processInstanceId
     * @param opts Optional parameters
     * @param opts.isRelatedContent isRelatedContent
     * @return Promise<ResultListDataRepresentationRelatedContentRepresentation>
     */
    getRelatedContentForProcessInstance(processInstanceId: string, opts?: any): Promise<ResultListDataRepresentationRelatedContentRepresentation>;
    /**
     * List content attached to a task
     *
     *
     *
     * @param taskId taskId
     * @param opts Optional parameters
     * @param opts.isRelatedContent isRelatedContent
     * @return Promise<ResultListDataRepresentationRelatedContentRepresentation>
     */
    getRelatedContentForTask(taskId: string, opts?: any): Promise<ResultListDataRepresentationRelatedContentRepresentation>;
}
