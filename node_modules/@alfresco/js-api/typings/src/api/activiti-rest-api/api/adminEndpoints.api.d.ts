/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { CreateEndpointBasicAuthRepresentation } from '../model/createEndpointBasicAuthRepresentation';
import { EndpointBasicAuthRepresentation } from '../model/endpointBasicAuthRepresentation';
import { EndpointConfigurationRepresentation } from '../model/endpointConfigurationRepresentation';
import { BaseApi } from './base.api';
/**
* Adminendpoints service.
* @module AdminendpointsApi
*/
export declare class AdminEndpointsApi extends BaseApi {
    /**
    * Add an endpoint authorization
    *
    *
    *
    * @param createRepresentation createRepresentation
    * @return Promise<EndpointBasicAuthRepresentation>
    */
    createBasicAuthConfiguration(createRepresentation: CreateEndpointBasicAuthRepresentation): Promise<EndpointBasicAuthRepresentation>;
    /**
        * Create an endpoint
        *
        *
        *
        * @param representation representation
        * @return Promise<EndpointConfigurationRepresentation>
        */
    createEndpointConfiguration(representation: EndpointConfigurationRepresentation): Promise<EndpointConfigurationRepresentation>;
    /**
        * Get an endpoint authorization
        *
        *
        *
        * @param basicAuthId basicAuthId
        * @param tenantId tenantId
        * @return Promise<EndpointBasicAuthRepresentation>
        */
    getBasicAuthConfiguration(basicAuthId: number, tenantId: number): Promise<EndpointBasicAuthRepresentation>;
    /**
        * List endpoint authorizations
        *
        *
        *
        * @param tenantId tenantId
        * @return Promise<EndpointBasicAuthRepresentation>
        */
    getBasicAuthConfigurations(tenantId: number): Promise<EndpointBasicAuthRepresentation>;
    /**
        * Get an endpoint
        *
        *
        *
        * @param endpointConfigurationId endpointConfigurationId
        * @param tenantId tenantId
        * @return Promise<EndpointConfigurationRepresentation>
        */
    getEndpointConfiguration(endpointConfigurationId: number, tenantId: number): Promise<EndpointConfigurationRepresentation>;
    /**
        * List endpoints
        *
        *
        *
        * @param tenantId tenantId
        * @return Promise<EndpointConfigurationRepresentation>
        */
    getEndpointConfigurations(tenantId: number): Promise<EndpointConfigurationRepresentation>;
    /**
        * Delete an endpoint authorization
        *
        *
        *
        * @param basicAuthId basicAuthId
        * @param tenantId tenantId
        * @return Promise<{}>
        */
    removeBasicAuthConfiguration(basicAuthId: number, tenantId: number): Promise<any>;
    /**
        * Delete an endpoint
        *
        *
        *
        * @param endpointConfigurationId endpointConfigurationId
        * @param tenantId tenantId
        * @return Promise<{}>
        */
    removeEndpointConfiguration(endpointConfigurationId: number, tenantId: number): Promise<any>;
    /**
        * Update an endpoint authorization
        *
        *
        *
        * @param basicAuthId basicAuthId
        * @param createRepresentation createRepresentation
        * @return Promise<EndpointBasicAuthRepresentation>
        */
    updateBasicAuthConfiguration(basicAuthId: number, createRepresentation: CreateEndpointBasicAuthRepresentation): Promise<EndpointBasicAuthRepresentation>;
    /**
        * Update an endpoint
        *
        *
        *
        * @param endpointConfigurationId endpointConfigurationId
        * @param representation representation
        * @return Promise<EndpointConfigurationRepresentation>
        */
    updateEndpointConfiguration(endpointConfigurationId: number, representation: EndpointConfigurationRepresentation): Promise<EndpointConfigurationRepresentation>;
}
