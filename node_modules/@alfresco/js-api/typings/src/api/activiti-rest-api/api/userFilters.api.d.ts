/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { ResultListDataRepresentationUserProcessInstanceFilterRepresentation } from '../model/resultListDataRepresentationUserProcessInstanceFilterRepresentation';
import { ResultListDataRepresentationUserTaskFilterRepresentation } from '../model/resultListDataRepresentationUserTaskFilterRepresentation';
import { UserFilterOrderRepresentation } from '../model/userFilterOrderRepresentation';
import { UserProcessInstanceFilterRepresentation } from '../model/userProcessInstanceFilterRepresentation';
import { UserTaskFilterRepresentation } from '../model/userTaskFilterRepresentation';
import { BaseApi } from './base.api';
/**
* Userfilters service.
* @module UserfiltersApi
*/
export declare class UserFiltersApi extends BaseApi {
    /**
    * Create a process instance filter
    *
    *
    *
    * @param userProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation
    * @return Promise<UserProcessInstanceFilterRepresentation>
    */
    createUserProcessInstanceFilter(userProcessInstanceFilterRepresentation: UserProcessInstanceFilterRepresentation): Promise<UserProcessInstanceFilterRepresentation>;
    /**
        * Create a task filter
        *
        *
        *
        * @param userTaskFilterRepresentation userTaskFilterRepresentation
        * @return Promise<UserTaskFilterRepresentation>
        */
    createUserTaskFilter(userTaskFilterRepresentation: UserTaskFilterRepresentation): Promise<UserTaskFilterRepresentation>;
    /**
        * Delete a process instance filter
        *
        *
        *
        * @param userFilterId userFilterId
        * @return Promise<{}>
        */
    deleteUserProcessInstanceFilter(userFilterId: number): Promise<any>;
    /**
        * Delete a task filter
        *
        *
        *
        * @param userFilterId userFilterId
        * @return Promise<{}>
        */
    deleteUserTaskFilter(userFilterId: number): Promise<any>;
    /**
        * Get a process instance filter
        *
        *
        *
        * @param userFilterId userFilterId
        * @return Promise<UserProcessInstanceFilterRepresentation>
        */
    getUserProcessInstanceFilter(userFilterId: number): Promise<UserProcessInstanceFilterRepresentation>;
    /**
        * List process instance filters
        *
        * Returns filters for the current user, optionally filtered by *appId*.
        *
        * @param opts Optional parameters
        * @param opts.appId appId
        * @return Promise<ResultListDataRepresentationUserProcessInstanceFilterRepresentation>
        */
    getUserProcessInstanceFilters(opts?: any): Promise<ResultListDataRepresentationUserProcessInstanceFilterRepresentation>;
    /**
        * Get a task filter
        *
        *
        *
        * @param userFilterId userFilterId
        * @return Promise<UserTaskFilterRepresentation>
        */
    getUserTaskFilter(userFilterId: number): Promise<UserTaskFilterRepresentation>;
    /**
        * List task filters
        *
        * Returns filters for the current user, optionally filtered by *appId*.
        *
        * @param opts Optional parameters
        * @param opts.appId appId
        * @return Promise<ResultListDataRepresentationUserTaskFilterRepresentation>
        */
    getUserTaskFilters(opts?: any): Promise<ResultListDataRepresentationUserTaskFilterRepresentation>;
    /**
        * Re-order the list of user process instance filters
        *
        *
        *
        * @param filterOrderRepresentation filterOrderRepresentation
        * @return Promise<{}>
        */
    orderUserProcessInstanceFilters(filterOrderRepresentation: UserFilterOrderRepresentation): Promise<any>;
    /**
        * Re-order the list of user task filters
        *
        *
        *
        * @param filterOrderRepresentation filterOrderRepresentation
        * @return Promise<{}>
        */
    orderUserTaskFilters(filterOrderRepresentation: UserFilterOrderRepresentation): Promise<any>;
    /**
        * Update a process instance filter
        *
        *
        *
        * @param userFilterId userFilterId
        * @param userProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation
        * @return Promise<UserProcessInstanceFilterRepresentation>
        */
    updateUserProcessInstanceFilter(userFilterId: number, userProcessInstanceFilterRepresentation: UserProcessInstanceFilterRepresentation): Promise<UserProcessInstanceFilterRepresentation>;
    /**
        * Update a task filter
        *
        *
        *
        * @param userFilterId userFilterId
        * @param userTaskFilterRepresentation userTaskFilterRepresentation
        * @return Promise<UserTaskFilterRepresentation>
        */
    updateUserTaskFilter(userFilterId: number, userTaskFilterRepresentation: UserTaskFilterRepresentation): Promise<UserTaskFilterRepresentation>;
}
