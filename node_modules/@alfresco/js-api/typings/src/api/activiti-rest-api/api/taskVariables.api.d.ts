/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { RestVariable } from '../model/restVariable';
import { BaseApi } from './base.api';
/**
* Taskvariables service.
* @module TaskvariablesApi
*/
export declare class TaskVariablesApi extends BaseApi {
    /**
    * Create variables
    *
    *
    *
    * @param taskId taskId
    * @param restVariables restVariables
    * @return Promise<RestVariable>
    */
    createTaskVariable(taskId: string, restVariables: RestVariable): Promise<RestVariable>;
    /**
        * Create or update variables
        *
        *
        *
        * @param taskId taskId
        * @return Promise<{}>
        */
    deleteAllLocalTaskVariables(taskId: string): Promise<any>;
    /**
        * Delete a variable
        *
        *
        *
        * @param taskId taskId
        * @param variableName variableName
        * @param opts Optional parameters
        * @param opts.scope scope
        * @return Promise<{}>
        */
    deleteVariable(taskId: string, variableName: string, opts?: any): Promise<any>;
    /**
        * Get a variable
        *
        *
        *
        * @param taskId taskId
        * @param variableName variableName
        * @param opts Optional parameters
        * @param opts.scope scope
        * @return Promise<RestVariable>
        */
    getVariable(taskId: string, variableName: string, opts?: any): Promise<RestVariable>;
    /**
        * List variables
        *
        *
        *
        * @param taskId taskId
        * @param opts Optional parameters
        * @param opts.scope scope
        * @return Promise<RestVariable>
        */
    getVariables(taskId: string, opts?: any): Promise<RestVariable>;
    /**
        * Update a variable
        *
        *
        *
        * @param taskId taskId
        * @param variableName variableName
        * @param restVariable restVariable
        * @return Promise<RestVariable>
        */
    updateVariable(taskId: string, variableName: string, restVariable: RestVariable): Promise<RestVariable>;
}
