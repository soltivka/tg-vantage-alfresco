/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { AbstractGroupRepresentation } from '../model/abstractGroupRepresentation';
import { AddGroupCapabilitiesRepresentation } from '../model/addGroupCapabilitiesRepresentation';
import { GroupRepresentation } from '../model/groupRepresentation';
import { LightGroupRepresentation } from '../model/lightGroupRepresentation';
import { ResultListDataRepresentationLightUserRepresentation } from '../model/resultListDataRepresentationLightUserRepresentation';
import { BaseApi } from './base.api';
/**
* Admingroups service.
* @module AdmingroupsApi
*/
export declare class AdminGroupsApi extends BaseApi {
    /**
    * Activate a group
    *
    *
    *
    * @param groupId groupId
    * @return Promise<{}>
    */
    activate(groupId: number): Promise<any>;
    /**
        * Add users to a group
        *
        *
        *
        * @param groupId groupId
        * @return Promise<{}>
        */
    addAllUsersToGroup(groupId: number): Promise<any>;
    /**
        * Add capabilities to a group
        *
        *
        *
        * @param groupId groupId
        * @param addGroupCapabilitiesRepresentation addGroupCapabilitiesRepresentation
        * @return Promise<{}>
        */
    addGroupCapabilities(groupId: number, addGroupCapabilitiesRepresentation: AddGroupCapabilitiesRepresentation): Promise<any>;
    /**
        * Add a user to a group
        *
        *
        *
        * @param groupId groupId
        * @param userId userId
        * @return Promise<{}>
        */
    addGroupMember(groupId: number, userId: number): Promise<any>;
    /**
        * Get a related group
        *
        *
        *
        * @param groupId groupId
        * @param relatedGroupId relatedGroupId
        * @param type type
        * @return Promise<{}>
        */
    addRelatedGroup(groupId: number, relatedGroupId: number, type: string): Promise<any>;
    /**
        * Create a group
        *
        *
        *
        * @param groupRepresentation groupRepresentation
        * @return Promise<GroupRepresentation>
        */
    createNewGroup(groupRepresentation: GroupRepresentation): Promise<GroupRepresentation>;
    /**
        * Remove a capability from a group
        *
        *
        *
        * @param groupId groupId
        * @param groupCapabilityId groupCapabilityId
        * @return Promise<{}>
        */
    deleteGroupCapability(groupId: number, groupCapabilityId: number): Promise<any>;
    /**
        * Delete a member from a group
        *
        *
        *
        * @param groupId groupId
        * @param userId userId
        * @return Promise<{}>
        */
    deleteGroupMember(groupId: number, userId: number): Promise<any>;
    /**
        * Delete a group
        *
        *
        *
        * @param groupId groupId
        * @return Promise<{}>
        */
    deleteGroup(groupId: number): Promise<any>;
    /**
        * Delete a related group
        *
        *
        *
        * @param groupId groupId
        * @param relatedGroupId relatedGroupId
        * @return Promise<{}>
        */
    deleteRelatedGroup(groupId: number, relatedGroupId: number): Promise<any>;
    /**
        * List group capabilities
        *
        *
        *
        * @param groupId groupId
        * @return Promise<string>
        */
    getCapabilities(groupId: number): Promise<string>;
    /**
        * Get group members
        *
        *
        *
        * @param groupId groupId
        * @param opts Optional parameters
        * @param opts.filter filter
        * @param opts.page page
        * @param opts.pageSize pageSize
        * @return Promise<ResultListDataRepresentationLightUserRepresentation>
        */
    getGroupUsers(groupId: number, opts?: any): Promise<ResultListDataRepresentationLightUserRepresentation>;
    /**
        * Get a group
        *
        *
        *
        * @param groupId groupId
        * @param opts Optional parameters
        * @param opts.includeAllUsers includeAllUsers
        * @param opts.summary summary
        * @return Promise<AbstractGroupRepresentation>
        */
    getGroup(groupId: number, opts?: any): Promise<AbstractGroupRepresentation>;
    /**
        * Query groups
        *
        *
        *
        * @param opts Optional parameters
        * @param opts.tenantId tenantId
        * @param opts.functional functional
        * @param opts.summary summary
        * @return Promise<LightGroupRepresentation>
        */
    getGroups(opts?: any): Promise<LightGroupRepresentation>;
    /**
        * Get related groups
        *
        *
        *
        * @param groupId groupId
        * @return Promise<LightGroupRepresentation>
        */
    getRelatedGroups(groupId: number): Promise<LightGroupRepresentation>;
    /**
        * Update a group
        *
        *
        *
        * @param groupId groupId
        * @param groupRepresentation groupRepresentation
        * @return Promise<GroupRepresentation>
        */
    updateGroup(groupId: number, groupRepresentation: GroupRepresentation): Promise<GroupRepresentation>;
}
