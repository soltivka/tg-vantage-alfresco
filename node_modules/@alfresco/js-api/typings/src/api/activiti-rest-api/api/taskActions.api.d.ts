/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { AssigneeIdentifierRepresentation } from '../model/assigneeIdentifierRepresentation';
import { FormIdentifierRepresentation } from '../model/formIdentifierRepresentation';
import { TaskRepresentation } from '../model/taskRepresentation';
import { UserIdentifierRepresentation } from '../model/userIdentifierRepresentation';
import { BaseApi } from './base.api';
/**
 * Taskactions service.
 * @module TaskactionsApi
 */
export declare class TaskActionsApi extends BaseApi {
    /**
     * Assign a task to a user
     *
     *
     *
     * @param taskId taskId
     * @param userIdentifier userIdentifier
     * @return Promise<TaskRepresentation>
     */
    assignTask(taskId: string, userIdentifier: AssigneeIdentifierRepresentation): Promise<TaskRepresentation>;
    /**
     * Attach a form to a task
     *
     *
     *
     * @param taskId taskId
     * @param formIdentifier formIdentifier
     * @return Promise<{}>
     */
    attachForm(taskId: string, formIdentifier: FormIdentifierRepresentation): Promise<any>;
    /**
     * Claim a task
     *
     * To claim a task (in case the task is assigned to a group)
     *
     * @param taskId taskId
     * @return Promise<{}>
     */
    claimTask(taskId: string): Promise<any>;
    /**
     * Complete a task
     *
     * Use this endpoint to complete a standalone task or task without a form
     *
     * @param taskId taskId
     * @return Promise<{}>
     */
    completeTask(taskId: string): Promise<any>;
    /**
     * Delegate a task
     *
     *
     *
     * @param taskId taskId
     * @param userIdentifier userIdentifier
     * @return Promise<{}>
     */
    delegateTask(taskId: string, userIdentifier: UserIdentifierRepresentation): Promise<any>;
    /**
     * Involve a group with a task
     *
     *
     *
     * @param taskId taskId
     * @param groupId groupId
     * @return Promise<{}>
     */
    involveGroup(taskId: string, groupId: string): Promise<any>;
    /**
     * Involve a user with a task
     *
     *
     *
     * @param taskId taskId
     * @param userIdentifier userIdentifier
     * @return Promise<{}>
     */
    involveUser(taskId: string, userIdentifier: UserIdentifierRepresentation): Promise<any>;
    /**
     * Remove a form from a task
     *
     *
     *
     * @param taskId taskId
     * @return Promise<{}>
     */
    removeForm(taskId: string): Promise<any>;
    /**
     * Remove an involved group from a task
     *
     *
     *
     * @param taskId taskId
     * @param groupId groupId
     * @return Promise<{}>
     */
    removeInvolvedUser(taskId: string, identifier: string | UserIdentifierRepresentation): Promise<any>;
    /**
     * Resolve a task
     *
     *
     *
     * @param taskId taskId
     * @return Promise<{}>
     */
    resolveTask(taskId: string): Promise<any>;
    /**
     * Unclaim a task
     *
     * To unclaim a task (in case the task was assigned to a group)
     *
     * @param taskId taskId
     * @return Promise<{}>
     */
    unclaimTask(taskId: string): Promise<any>;
}
