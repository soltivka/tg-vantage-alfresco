/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { FormDefinitionRepresentation } from '../model/formDefinitionRepresentation';
import { FormRepresentation } from '../model/formRepresentation';
import { FormSaveRepresentation } from '../model/formSaveRepresentation';
import { ResultListDataRepresentationFormRepresentation } from '../model/resultListDataRepresentationFormRepresentation';
import { ResultListDataRepresentationRuntimeFormRepresentation } from '../model/resultListDataRepresentationRuntimeFormRepresentation';
import { ValidationErrorRepresentation } from '../model/validationErrorRepresentation';
import { BaseApi } from './base.api';
/**
 * Formmodels service.
 * @module FormmodelsApi
 */
export declare class FormModelsApi extends BaseApi {
    /**
     * Get form content
     *
     *
     *
     * @param formId formId
     * @return Promise<FormDefinitionRepresentation>
     */
    getFormEditorJson(formId: number): Promise<FormDefinitionRepresentation>;
    /**
     * Get form history
     *
     *
     *
     * @param formId formId
     * @param formHistoryId formHistoryId
     * @return Promise<FormRepresentation>
     */
    getFormHistory(formId: number, formHistoryId: number): Promise<FormRepresentation>;
    /**
     * Get a form model
     *
     *
     *
     * @param formId formId
     * @return Promise<FormRepresentation>
     */
    getForm(formId: number): Promise<FormRepresentation>;
    /**
     * Get forms
     *
     *
     *
     * @param formId formId
     * @return Promise<FormRepresentation>
     */
    getForms(input: string[] | {
        [key: string]: any;
    }): Promise<FormRepresentation | ResultListDataRepresentationFormRepresentation | ResultListDataRepresentationRuntimeFormRepresentation>;
    /**
     * Update form model content
     *
     *
     *
     * @param formId ID of the form to update
     * @param saveRepresentation saveRepresentation
     * @return Promise<FormRepresentation>
     */
    saveForm(formId: number, saveRepresentation: FormSaveRepresentation): Promise<FormRepresentation>;
    /**
     * Validate form model content
     *
     * The model content to be validated must be specified in the POST body
     *
     * @param formId formId
     * @param saveRepresentation saveRepresentation
     * @return Promise<ValidationErrorRepresentation>
     */
    validateModel(formId: number, saveRepresentation: FormSaveRepresentation): Promise<ValidationErrorRepresentation>;
}
