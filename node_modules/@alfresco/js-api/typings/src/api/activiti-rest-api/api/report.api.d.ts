/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
import { BaseApi } from './base.api';
export declare class ReportApi extends BaseApi {
    /**
     * Create the default reports
     */
    createDefaultReports(): Promise<any>;
    getTasksByProcessDefinitionId(reportId: string, processDefinitionId: string): Promise<any>;
    getReportsByParams(reportId: string, paramsQuery: any): Promise<any>;
    getProcessDefinitions(): Promise<any>;
    getReportParams(reportId: string): Promise<any>;
    getReportList(): Promise<any>;
    updateReport(reportId: string, name: string): Promise<any>;
    /**
     * Function to export a report
     */
    /**
     * Export a report
     * @param {string} reportId
     * @param {module:model/ReportExportQueryRepresentation} queryParams
     */
    exportToCsv(reportId: string, queryParams: {
        reportName?: string;
    }): Promise<any>;
    /**
     * Function to save a report
     */
    /**
     * Save a report
     * @param {string} reportId
     * @param {module:model/ReportSaveQueryRepresentation} queryParams
     */
    saveReport(reportId: string, queryParams: {
        reportName?: string;
        __reportName?: string;
    }): Promise<any>;
    /**
     * Function to delete a report
     */
    /**
     * Save a report
     * @param {string} reportId
     */
    deleteReport(reportId: string): Promise<any>;
}
