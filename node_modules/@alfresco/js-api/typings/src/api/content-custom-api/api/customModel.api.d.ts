/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { PaginatedList, PaginatedEntries } from '../model/pagination';
import { BaseApi } from './base.api';
export interface CustomModel {
    name: string;
    namespacePrefix: string;
    description: string;
    author: string;
    namespaceUri: string;
    status: 'ACTIVE' | 'DRAFT';
}
export interface CustomType {
    name?: string;
    parentName?: string;
    prefixedName?: string;
    description?: string;
    properties?: CustomModelProperty[];
    title?: string;
}
export interface CustomAspect {
    description?: string;
    name?: string;
    parentName?: string;
    prefixedName?: string;
    properties?: CustomModelProperty[];
    title?: string;
}
export interface CustomModelProperty {
    name?: string;
    prefixedName?: string;
    title?: string;
    dataType?: string;
    facetable?: 'FALSE' | 'TRUE';
    indexTokenisationMode?: 'FALSE' | 'TRUE';
    constraints?: CustomModelPropertyConstraint[];
    multiValued?: boolean;
    mandatoryEnforced?: boolean;
    mandatory?: boolean;
    indexed?: boolean;
}
export interface CustomModelPropertyConstraint {
    name: string;
    prefixedName: string;
    type: string;
    parameters: any[];
}
/**
 * Comments service.
 * @module api/CustomModelApi
 * @version 0.1.0
 */
/**
 * Constructs a new CustomModelApi.
 * @alias module:api/CustomModelApi
 * @class
 * @param {module:ApiClient} apiClient Optional API client implementation to use, default to {@link module:ApiClient#instance}
 * if unspecified.
 */
export declare class CustomModelApi extends BaseApi {
    private: boolean;
    /**
     * create Custom Model
     */
    createCustomModel(status: string, description: string, name: string, namespaceUri: string, namespacePrefix: string, author?: string): Promise<{
        entry: CustomModel;
    }>;
    /**
     * Create a custom type
     */
    createCustomType(modelName: string, name: string, parentName?: string, title?: string, description?: string): Promise<{
        entry: CustomType;
    }>;
    /**
     * Create a custom aspect
     */
    createCustomAspect(modelName: string, name: string, parentName?: string, title?: string, description?: string): Promise<any>;
    /**
     * Create a custom constraint
     */
    createCustomConstraint(modelName: string, name: string, type: string, parameters?: any): Promise<any>;
    /**
     * Activate the custom model
     */
    activateCustomModel(modelName: string): Promise<{
        entry: CustomModel;
    }>;
    /**
     * Deactivate the custom model
     */
    deactivateCustomModel(modelName: string): Promise<{
        entry: CustomModel;
    }>;
    /**
     * Add property into an existing aspect
     */
    addPropertyToAspect(modelName: string, aspectName: string, properties?: CustomModelProperty[]): Promise<CustomAspect>;
    /**
     * Add Property into an existing type
     */
    addPropertyToType(modelName: string, typeName: string, properties?: CustomModelProperty[]): Promise<CustomType>;
    /**
     * Edit an existing custom model
     */
    updateCustomModel(modelName: string, description?: string, namespaceUri?: string, namespacePrefix?: string, author?: string): Promise<any>;
    /**
     * Edit an existing custom model type
     */
    updateCustomType(modelName: string, typeName: string, description?: string, parentName?: string, title?: string): Promise<any>;
    /**
     * Edit an existing custom model aspect
     */
    updateCustomAspect(modelName: string, aspectName: string, description?: string, parentName?: string, title?: string): Promise<any>;
    /**
     * Get all custom models
     */
    getAllCustomModel(): Promise<PaginatedEntries<CustomModel>>;
    /**
     * Get custom model
     */
    getCustomModel(modelName: string, queryParams?: any): Promise<{
        entry: CustomModel;
    }>;
    /**
     * Get all custom model types
     */
    getAllCustomType(modelName: string): Promise<PaginatedList<CustomType>>;
    /**
     * Get custom model type
     */
    getCustomType(modelName: string, typeName?: string, queryParams?: any): Promise<{
        entry: CustomType;
    }>;
    /**
     * Get all custom model aspect
     */
    getAllCustomAspect(modelName: string, queryParams?: any): Promise<PaginatedList<CustomAspect>>;
    /**
     * Get custom model aspect
     */
    getCustomAspect(modelName: string, aspectName: string, queryParams?: any): Promise<{
        entry: CustomAspect;
    }>;
    /**
     * Get all custom model defined constraints
     */
    getAllCustomConstraints(modelName: string, queryParams?: any): Promise<any>;
    /**
     * Get custom model defined constraints
     */
    getCustomConstraints(modelName: string, constraintName: string, queryParams?: any): Promise<any>;
    /**
     * Delete the given custom model
     */
    deleteCustomModel(modelName: string): Promise<any>;
    /**
     * Delete the given custom type
     */
    deleteCustomType(modelName: string, typeName: string): Promise<any>;
    deleteCustomAspect(modelName: string, aspectName: string): Promise<any>;
    deleteCustomAspectProperty(modelName: string, aspectName: string, propertyName: string): Promise<{
        entry: CustomAspect;
    }>;
    deleteCustomTypeProperty(modelName: string, typeName: string, propertyName: string): Promise<{
        entry: CustomType;
    }>;
}
