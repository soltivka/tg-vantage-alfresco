/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { AlfrescoApi } from '../../../../alfrescoApi';
import { TaskRepresentation } from '../../../../api/activiti-rest-api/model/taskRepresentation';
import { AssigneeIdentifierRepresentation } from '../../../../api/activiti-rest-api/model/assigneeIdentifierRepresentation';
import { FormIdentifierRepresentation } from '../../../../api/activiti-rest-api/model/formIdentifierRepresentation';
import { CommentRepresentation } from '../../../../api/activiti-rest-api/model/commentRepresentation';
import { CompleteFormRepresentation } from '../../../../api/activiti-rest-api/model/completeFormRepresentation';
import { RelatedContentRepresentation } from '../../../../api/activiti-rest-api/model/relatedContentRepresentation';
import { TaskFilterRequestRepresentation } from '../../../../api/activiti-rest-api/model/taskFilterRequestRepresentation';
import { ResultListDataRepresentationTaskRepresentation } from '../../../../api/activiti-rest-api/model/resultListDataRepresentationTaskRepresentation';
import { TaskAuditInfoRepresentation } from '../../../../api/activiti-rest-api/model/taskAuditInfoRepresentation';
import { ResultListDataRepresentationRelatedContentRepresentation } from '../../../../api/activiti-rest-api/model/resultListDataRepresentationRelatedContentRepresentation';
import { ResultListDataRepresentationCommentRepresentation } from '../../../../api/activiti-rest-api/model/resultListDataRepresentationCommentRepresentation';
import { FormDefinitionRepresentation } from '../../../../api/activiti-rest-api/model/formDefinitionRepresentation';
import { UserIdentifierRepresentation } from '../../../../api/activiti-rest-api/model/userIdentifierRepresentation';
import { TaskQueryRepresentation } from '../../../../api/activiti-rest-api/model/taskQueryRepresentation';
import { ChecklistOrderRepresentation } from '../../../../api/activiti-rest-api/model/checklistOrderRepresentation';
import { SaveFormRepresentation } from '../../../../api/activiti-rest-api/model/saveFormRepresentation';
import { TaskUpdateRepresentation } from '../../../../api/activiti-rest-api/model/taskUpdateRepresentation';
import { FormValueRepresentation } from '../../../../api/activiti-rest-api/model/formValueRepresentation';
/**
 * @deprecated 3.0.0
 */
export declare class TaskApi {
    private taskactionsApi;
    private activitiCommentsApi;
    private checklistsApi;
    private taskFormsApi;
    private tasksApi;
    private contentApi;
    init(alfrescoApi?: AlfrescoApi): void;
    addSubtask(taskId: string, taskRepresentation: TaskRepresentation): Promise<TaskRepresentation>;
    addTaskComment(commentRequest: CommentRepresentation, taskId: string): Promise<CommentRepresentation>;
    assignTask(taskId: string, userIdentifier: AssigneeIdentifierRepresentation): Promise<TaskRepresentation>;
    attachForm(taskId: string, formIdentifier: FormIdentifierRepresentation): Promise<any>;
    claimTask(taskId: string): Promise<any>;
    completeTaskForm(taskId: string, completeTaskFormRepresentation: CompleteFormRepresentation): Promise<any>;
    completeTask(taskId: string): Promise<any>;
    createNewTask(taskRepresentation: TaskRepresentation): Promise<TaskRepresentation>;
    createRelatedContentOnTask(taskId: string, relatedContent: RelatedContentRepresentation, opts?: any): Promise<RelatedContentRepresentation>;
    deleteTask(taskId: string): Promise<any>;
    filterTasks(tasksFilter: TaskFilterRequestRepresentation): Promise<ResultListDataRepresentationTaskRepresentation>;
    getChecklist(taskId: string): Promise<ResultListDataRepresentationTaskRepresentation>;
    getTaskAuditLog(taskId: string): Promise<TaskAuditInfoRepresentation>;
    getTaskAuditJson(taskId: string): Promise<TaskAuditInfoRepresentation>;
    getTaskAuditPdf(taskId: string): Promise<Blob>;
    getRelatedContentForTask(taskId: string, opts?: any): Promise<ResultListDataRepresentationRelatedContentRepresentation>;
    getRestFieldValuesColumn(taskId: string, field: string, column: string): Promise<any>;
    getRestFieldValues(taskId: string, field: string): Promise<FormValueRepresentation[]>;
    getTaskComments(taskId: string, opts?: any): Promise<ResultListDataRepresentationCommentRepresentation>;
    getTaskForm(taskId: string): Promise<FormDefinitionRepresentation>;
    getTask(taskId: string): Promise<TaskRepresentation>;
    involveUser(taskId: string, userIdentifier: UserIdentifierRepresentation): Promise<any>;
    listTasks(tasksQuery: TaskQueryRepresentation): Promise<ResultListDataRepresentationTaskRepresentation>;
    orderChecklist(taskId: string, orderRepresentation: ChecklistOrderRepresentation): Promise<any>;
    removeForm(taskId: string): Promise<any>;
    removeInvolvedUser(taskId: string, groupId: string): Promise<any>;
    saveTaskForm(taskId: string, saveTaskFormRepresentation: SaveFormRepresentation): Promise<any>;
    unclaimTask(taskId: string): Promise<any>;
    updateTask(taskId: string, updated: TaskUpdateRepresentation): Promise<TaskRepresentation>;
}
