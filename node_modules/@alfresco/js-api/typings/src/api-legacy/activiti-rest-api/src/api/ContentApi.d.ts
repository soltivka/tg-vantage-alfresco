/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { AlfrescoApi } from '../../../../alfrescoApi';
import { RelatedContentRepresentation } from '../../../../api/activiti-rest-api/model/relatedContentRepresentation';
import { ResultListDataRepresentationProcessContentRepresentation } from '../../../../api/activiti-rest-api/model/resultListDataRepresentationProcessContentRepresentation';
/**
 * @deprecated 3.0.0
 */
export declare class ContentApi {
    private contentApi;
    private processInstancesApi;
    init(alfrescoApi?: AlfrescoApi): void;
    createRelatedContentOnProcessInstancePostBody(processInstanceId: string, relatedContent: RelatedContentRepresentation, opts?: any): Promise<RelatedContentRepresentation>;
    createRelatedContentOnProcessInstance(processInstanceId: string, file: any, opts?: any): Promise<RelatedContentRepresentation>;
    createRelatedContentOnTaskPostBody(taskId: string, relatedContent: any, opts?: any): Promise<RelatedContentRepresentation>;
    createRelatedContentOnTask(taskId: string, file: any, opts?: any): Promise<RelatedContentRepresentation>;
    createTemporaryRawRelatedContent(file: any): Promise<RelatedContentRepresentation>;
    createTemporaryRelatedContent(relatedContent: RelatedContentRepresentation): Promise<RelatedContentRepresentation>;
    deleteContent(contentId: number): Promise<any>;
    getContent(contentId: number): Promise<RelatedContentRepresentation>;
    getProcessInstanceContent(processInstanceId: string): Promise<ResultListDataRepresentationProcessContentRepresentation>;
    getRawContent(contentId: number): Promise<any>;
    getContentPreview(contentId: number): Promise<any>;
    /**
     * Get content Raw URL for the given contentId
     * @param {Number} contentId contentId
     */
    getRawContentUrl(contentId: number): string;
    getContentThumbnail(contentId: number): Promise<any>;
    getRelatedContentForProcessInstance(processInstanceId: string, isRelatedContent: boolean): Promise<import("../../../../..").ResultListDataRepresentationRelatedContentRepresentation>;
    getRelatedContentForTask(taskId: string, isRelatedContent: boolean): Promise<import("../../../../..").ResultListDataRepresentationRelatedContentRepresentation>;
}
