/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { EmitterMethod, Emitter } from 'event-emitter';
import { ContentAuth } from './authentication/contentAuth';
import { ProcessAuth } from './authentication/processAuth';
import { Oauth2Auth } from './authentication/oauth2Auth';
import { ContentClient } from './contentClient';
import { ProcessClient } from './processClient';
import { Storage } from './storage';
import { AlfrescoApiConfig } from './alfrescoApiConfig';
import { Authentication } from './authentication/authentication';
export declare class AlfrescoApi implements Emitter {
    storage: Storage;
    config: AlfrescoApiConfig;
    contentClient: ContentClient;
    contentPrivateClient: ContentClient;
    processClient: ProcessClient;
    searchClient: ContentClient;
    discoveryClient: ContentClient;
    gsClient: ContentClient;
    authClient: ContentClient;
    oauth2Auth: Oauth2Auth;
    processAuth: ProcessAuth;
    contentAuth: ContentAuth;
    on: EmitterMethod;
    off: EmitterMethod;
    once: EmitterMethod;
    bufferEvents: string[];
    emit: (type: string, ...args: any[]) => void;
    username: string;
    constructor(config?: AlfrescoApiConfig);
    setConfig(config: AlfrescoApiConfig): AlfrescoApiConfig;
    private initAuth;
    private clientsFactory;
    errorListeners(): void;
    errorHandler(error: {
        status?: number;
    }): void;
    changeWithCredentialsConfig(withCredentials: boolean): void;
    changeCsrfConfig(disableCsrf: boolean): void;
    changeEcmHost(hostEcm: string): void;
    changeBpmHost(hostBpm: string): void;
    /**
     * login Alfresco API
     * @param  username:   // Username to login
     * @param  password:   // Password to login
     *
     * @returns {Promise} A promise that returns {new authentication ticket} if resolved and {error} if rejected.
     * */
    login(username: string, password: string): Promise<any>;
    isCredentialValid(credential: string): boolean;
    implicitLogin(): Promise<any>;
    setAuthenticationClientECMBPM(authECM: Authentication, authBPM: Authentication): void;
    /**
     * login Tickets
     *
     * @param   ticketEcm // alfresco ticket
     * @param   ticketBpm // alfresco ticket
     * */
    loginTicket(ticketEcm: string, ticketBpm: string): Promise<any>;
    _loginBPMECM(username: string, password: string): Promise<any>;
    /**
     * logout Alfresco API
     * */
    logout(): Promise<any>;
    _logoutBPMECM(): Promise<any>;
    /**
     * If the client is logged in return true
     */
    isLoggedIn(): boolean;
    isBpmLoggedIn(): boolean;
    isEcmLoggedIn(): boolean;
    getBpmUsername(): string;
    getEcmUsername(): string;
    /**
     * refresh token
     * */
    refreshToken(): Promise<string>;
    getTicketAuth(): string;
    /**
     * Set the current Ticket
     *
     * @param ticketEcm
     * @param TicketBpm
     * */
    setTicket(ticketEcm: string, TicketBpm: string): void;
    /**
     * invalidate the current session
     * */
    invalidateSession(): void;
    /**
     * Get the current Ticket for the Bpm
     * */
    getTicketBpm(): string;
    /**
     * Get the current Ticket for the Ecm
     * */
    getTicketEcm(): string;
    /**
     * Get the current Ticket for the Ecm and BPM
     * */
    getTicket(): string[];
    isBpmConfiguration(): boolean;
    isEcmConfiguration(): boolean;
    isOauthConfiguration(): boolean;
    isPublicUrl(): boolean;
    isEcmBpmConfiguration(): boolean;
    private emitBuffer;
    reply(event: string, callback?: any): void;
}
