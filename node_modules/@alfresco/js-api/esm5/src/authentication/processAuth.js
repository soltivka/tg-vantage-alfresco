/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { __extends } from "tslib";
import ee from 'event-emitter';
import { AlfrescoApiClient } from '../alfrescoApiClient';
import { Storage } from '../storage';
var ProcessAuth = (function (_super) {
    __extends(ProcessAuth, _super);
    function ProcessAuth(config) {
        var _this = _super.call(this) || this;
        _this.authentications = {
            'basicAuth': { ticket: '' }, type: 'activiti'
        };
        _this.storage = new Storage();
        _this.storage.setDomainPrefix(config.domainPrefix);
        _this.className = 'ProcessAuth';
        if (!_this.isBrowser()) {
            _this.defaultHeaders = {
                'user-agent': 'alfresco-js-api'
            };
        }
        _this.setConfig(config);
        return _this;
    }
    ProcessAuth.prototype.setConfig = function (config) {
        this.config = config;
        this.ticket = undefined;
        this.basePath = config.hostBpm + '/' + this.config.contextRootBpm;
        if (this.config.ticketBpm) {
            this.setTicket(config.ticketBpm);
        }
        else if (this.storage.getItem('ticket-BPM')) {
            this.setTicket(this.storage.getItem('ticket-BPM'));
        }
    };
    ProcessAuth.prototype.changeHost = function () {
        this.basePath = this.config.hostBpm + '/' + this.config.contextRootBpm;
        this.ticket = undefined;
    };
    ProcessAuth.prototype.changeCsrfConfig = function (disableCsrf) {
        this.config.disableCsrf = disableCsrf;
    };
    ProcessAuth.prototype.saveUsername = function (username) {
        if (this.storage.supportsStorage()) {
            this.storage.setItem('APS_USERNAME', username);
        }
    };
    ProcessAuth.prototype.login = function (username, password) {
        var _this = this;
        this.authentications.basicAuth.username = username;
        this.authentications.basicAuth.password = password;
        var postBody = {}, pathParams = {}, queryParams = {};
        var headerParams = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Cache-Control': 'no-cache'
        };
        var formParams = {
            j_username: this.authentications.basicAuth.username,
            j_password: this.authentications.basicAuth.password,
            _spring_security_remember_me: true,
            submit: 'Login'
        };
        var contentTypes = ['application/x-www-form-urlencoded'];
        var accepts = ['application/json'];
        var promise = new Promise(function (resolve, reject) {
            _this.callApi('/app/authentication', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts).then(function () {
                _this.saveUsername(username);
                var ticket = _this.basicAuth(_this.authentications.basicAuth.username, _this.authentications.basicAuth.password);
                _this.setTicket(ticket);
                promise.emit('success');
                _this.emit('logged-in');
                resolve(ticket);
            }, function (error) {
                _this.saveUsername('');
                if (error.status === 401) {
                    promise.emit('unauthorized');
                }
                else if (error.status === 403) {
                    promise.emit('forbidden');
                }
                else {
                    promise.emit('error');
                }
                reject(error);
            });
        });
        ee(promise);
        return promise;
    };
    ProcessAuth.prototype.logout = function () {
        var _this = this;
        this.saveUsername('');
        var postBody = {}, pathParams = {}, queryParams = {}, headerParams = {}, formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        var promise = new Promise(function (resolve, reject) {
            _this.callApi('/app/logout', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts).then(function () {
                _this.invalidateSession();
                promise.emit('logout');
                resolve('logout');
            }, function (error) {
                if (error.status === 401) {
                    promise.emit('unauthorized');
                }
                promise.emit('error');
                reject(error);
            });
        });
        ee(promise);
        return promise;
    };
    ProcessAuth.prototype.setTicket = function (ticket) {
        this.authentications.basicAuth.ticket = ticket;
        this.authentications.basicAuth.password = null;
        this.config.ticketBpm = ticket;
        this.storage.setItem('ticket-BPM', ticket);
        this.ticket = ticket;
    };
    ProcessAuth.prototype.invalidateSession = function () {
        this.storage.removeItem('ticket-BPM');
        this.authentications.basicAuth.ticket = null;
        this.authentications.basicAuth.password = null;
        this.authentications.basicAuth.username = null;
        this.config.ticketBpm = null;
        this.ticket = null;
    };
    ProcessAuth.prototype.getTicket = function () {
        return this.ticket;
    };
    ProcessAuth.prototype.isLoggedIn = function () {
        return !!this.ticket;
    };
    ProcessAuth.prototype.getAuthentication = function () {
        return this.authentications;
    };
    return ProcessAuth;
}(AlfrescoApiClient));
export { ProcessAuth };
//# sourceMappingURL=../../../../src/authentication/processAuth.js.map