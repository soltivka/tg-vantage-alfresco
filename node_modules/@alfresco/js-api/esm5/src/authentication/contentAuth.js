/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { __extends } from "tslib";
import ee from 'event-emitter';
import { AuthenticationApi } from '../api/auth-rest-api/api/authentication.api';
import { AlfrescoApiClient } from '../alfrescoApiClient';
import { Storage } from '../storage';
var ContentAuth = (function (_super) {
    __extends(ContentAuth, _super);
    function ContentAuth(config, alfrescoApi) {
        var _this = _super.call(this) || this;
        _this.className = 'ContentAuth';
        _this.storage = new Storage();
        _this.storage.setDomainPrefix(config.domainPrefix);
        _this.setConfig(config);
        _this.authApi = new AuthenticationApi(alfrescoApi);
        return _this;
    }
    ContentAuth.prototype.setConfig = function (config) {
        this.config = config;
        this.basePath = this.config.hostEcm + '/' + this.config.contextRoot + '/api/-default-/public/authentication/versions/1';
        this.ticketStorageLabel = 'ticket-ECM';
        if (this.config.ticketEcm) {
            this.setTicket(config.ticketEcm);
        }
        else if (this.storage.getItem(this.ticketStorageLabel)) {
            this.setTicket(this.storage.getItem(this.ticketStorageLabel));
        }
    };
    ContentAuth.prototype.changeHost = function () {
        this.basePath = this.config.hostEcm + '/' + this.config.contextRoot + '/api/-default-/public/authentication/versions/1';
        this.ticket = undefined;
    };
    ContentAuth.prototype.saveUsername = function (username) {
        if (this.storage.supportsStorage()) {
            this.storage.setItem('ACS_USERNAME', username);
        }
    };
    ContentAuth.prototype.login = function (username, password) {
        var _this = this;
        this.authentications.basicAuth.username = username;
        this.authentications.basicAuth.password = password;
        var loginRequest = {};
        loginRequest.userId = this.authentications.basicAuth.username;
        loginRequest.password = this.authentications.basicAuth.password;
        var promise = new Promise(function (resolve, reject) {
            _this.authApi.createTicket(loginRequest)
                .then(function (data) {
                _this.saveUsername(username);
                _this.setTicket(data.entry.id);
                promise.emit('success');
                _this.emit('logged-in');
                resolve(data.entry.id);
            })
                .catch(function (error) {
                _this.saveUsername('');
                if (error.status === 401) {
                    promise.emit('unauthorized');
                }
                else if (error.status === 403) {
                    promise.emit('forbidden');
                }
                else {
                    promise.emit('error');
                }
                reject(error);
            });
        });
        ee(promise);
        return promise;
    };
    ContentAuth.prototype.validateTicket = function () {
        var _this = this;
        this.setTicket(this.config.ticketEcm);
        var promise = new Promise(function (resolve, reject) {
            _this.authApi.validateTicket().then(function (data) {
                _this.setTicket(data.entry.id);
                promise.emit('success');
                _this.emit('logged-in');
                resolve(data.entry.id);
            }, function (error) {
                if (error.status === 401) {
                    promise.emit('unauthorized');
                }
                promise.emit('error');
                reject(error);
            });
        });
        ee(promise);
        return promise;
    };
    ContentAuth.prototype.logout = function () {
        var _this = this;
        this.saveUsername('');
        var promise = new Promise(function (resolve, reject) {
            _this.authApi.deleteTicket().then(function () {
                promise.emit('logout');
                _this.invalidateSession();
                resolve('logout');
            }, function (error) {
                if (error.status === 401) {
                    promise.emit('unauthorized');
                }
                promise.emit('error');
                reject(error);
            });
        });
        ee(promise);
        return promise;
    };
    ContentAuth.prototype.setTicket = function (ticket) {
        this.authentications.basicAuth.username = 'ROLE_TICKET';
        this.authentications.basicAuth.password = ticket;
        this.config.ticketEcm = ticket;
        this.storage.setItem(this.ticketStorageLabel, ticket);
        this.ticket = ticket;
    };
    ContentAuth.prototype.getTicket = function () {
        return this.ticket;
    };
    ContentAuth.prototype.invalidateSession = function () {
        this.storage.removeItem(this.ticketStorageLabel);
        this.authentications.basicAuth.username = null;
        this.authentications.basicAuth.password = null;
        this.config.ticketEcm = null;
        this.ticket = null;
    };
    ContentAuth.prototype.isLoggedIn = function () {
        return !!this.ticket;
    };
    ContentAuth.prototype.getAuthentication = function () {
        return this.authentications;
    };
    return ContentAuth;
}(AlfrescoApiClient));
export { ContentAuth };
//# sourceMappingURL=../../../../src/authentication/contentAuth.js.map