/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { __awaiter, __extends, __generator } from "tslib";
import ee from 'event-emitter';
import { AlfrescoApiClient } from '../alfrescoApiClient';
import { AuthenticationApi } from '../api/auth-rest-api/api/authentication.api';
import { Storage } from '../storage';
var minimatch = require('minimatch');
var Oauth2Auth = (function (_super) {
    __extends(Oauth2Auth, _super);
    function Oauth2Auth(config, alfrescoApi) {
        var _this = _super.call(this) || this;
        _this.checkAccessToken = true;
        _this.discovery = {};
        _this.authentications = {
            'oauth2': { accessToken: '' }, type: 'oauth2', 'basicAuth': {}
        };
        _this.storage = new Storage();
        _this.storage.setDomainPrefix(config.domainPrefix);
        _this.className = 'Oauth2Auth';
        if (config) {
            _this.setConfig(config, alfrescoApi);
        }
        return _this;
    }
    Oauth2Auth.prototype.setConfig = function (config, alfrescoApi) {
        this.config = config;
        if (this.config.oauth2) {
            if (this.config.oauth2.host === undefined || this.config.oauth2.host === null) {
                throw 'Missing the required oauth2 host parameter';
            }
            if (this.config.oauth2.clientId === undefined || this.config.oauth2.clientId === null) {
                throw 'Missing the required oauth2 clientId parameter';
            }
            if (this.config.oauth2.scope === undefined || this.config.oauth2.scope === null) {
                throw 'Missing the required oauth2 scope parameter';
            }
            if (this.config.oauth2.secret === undefined || this.config.oauth2.secret === null) {
                this.config.oauth2.secret = '';
            }
            if ((this.config.oauth2.redirectUri === undefined || this.config.oauth2.redirectUri === null) && this.config.oauth2.implicitFlow) {
                throw 'Missing redirectUri required parameter';
            }
            if (!this.config.oauth2.refreshTokenTimeout) {
                this.config.oauth2.refreshTokenTimeout = 300000;
            }
            if (!this.config.oauth2.redirectSilentIframeUri) {
                var context_1 = '';
                if (typeof window !== 'undefined') {
                    context_1 = window.location.origin;
                }
                this.config.oauth2.redirectSilentIframeUri = context_1 + '/assets/silent-refresh.html';
            }
            this.basePath = this.config.oauth2.host;
            this.host = this.config.oauth2.host;
            this.discoveryUrls();
            if (this.hasContentProvider()) {
                this.exchangeTicketListener(alfrescoApi);
            }
            this.initOauth();
        }
    };
    Oauth2Auth.prototype.initOauth = function () {
        if (!this.config.oauth2.implicitFlow && this.isValidAccessToken()) {
            var accessToken = this.storage.getItem('access_token');
            this.setToken(accessToken, null);
        }
        if (this.config.oauth2.implicitFlow) {
            this.checkFragment('nonce');
        }
    };
    Oauth2Auth.prototype.discoveryUrls = function () {
        this.discovery.loginUrl = this.host + (this.config.oauth2.authorizationUrl || Oauth2Auth.DEFAULT_AUTHORIZATION_URL);
        this.discovery.logoutUrl = this.host + (this.config.oauth2.logoutUrl || Oauth2Auth.DEFAULT_LOGOUT_URL);
        this.discovery.tokenEndpoint = this.host + (this.config.oauth2.tokenUrl || Oauth2Auth.DEFAULT_TOKEN_URL);
    };
    Oauth2Auth.prototype.hasContentProvider = function () {
        return this.config.provider === 'ECM' || this.config.provider === 'ALL';
    };
    Oauth2Auth.prototype.checkFragment = function (nonceKey, externalHash) {
        this.hashFragmentParams = this.getHashFragmentParams(externalHash);
        if (this.hashFragmentParams && this.hashFragmentParams.error === undefined) {
            this.useFragmentTimeLogin(nonceKey);
        }
        else {
            this.refreshBrowserLogin();
        }
    };
    Oauth2Auth.prototype.refreshBrowserLogin = function () {
        if (this.config.oauth2.silentLogin && !this.isPublicUrl()) {
            this.implicitLogin();
        }
        if (this.isValidToken() && this.isValidAccessToken()) {
            var accessToken = this.storage.getItem('access_token');
            this.setToken(accessToken, null);
            this.silentRefresh();
        }
    };
    Oauth2Auth.prototype.useFragmentTimeLogin = function (nonceKey) {
        var accessToken = this.hashFragmentParams.access_token;
        var idToken = this.hashFragmentParams.id_token;
        var sessionState = this.hashFragmentParams.session_state;
        var expiresIn = this.hashFragmentParams.expires_in;
        if (!sessionState) {
            throw ('session state not present');
        }
        try {
            var jwt = this.processJWTToken(idToken, nonceKey);
            if (jwt) {
                this.storeIdToken(idToken, jwt.payload.exp);
                this.storeAccessToken(accessToken, expiresIn);
                this.authentications.basicAuth.username = jwt.payload.preferred_username;
                this.saveUsername(jwt.payload.preferred_username);
                this.silentRefresh();
                return accessToken;
            }
        }
        catch (error) {
            throw ('Validation JWT error' + error);
        }
    };
    Oauth2Auth.prototype.isPublicUrl = function () {
        var publicUrls = this.config.oauth2.publicUrls || [];
        if (Array.isArray(publicUrls)) {
            return publicUrls.length > 0 &&
                publicUrls.some(function (urlPattern) { return minimatch(window.location.href, urlPattern); });
        }
        return false;
    };
    Oauth2Auth.prototype.padBase64 = function (base64data) {
        while (base64data.length % 4 !== 0) {
            base64data += '=';
        }
        return base64data;
    };
    Oauth2Auth.prototype.processJWTToken = function (jwt, nonceKey) {
        if (jwt) {
            var jwtArray = jwt.split('.');
            var headerBase64 = this.padBase64(jwtArray[0]);
            var headerJson = this.b64DecodeUnicode(headerBase64);
            var header = JSON.parse(headerJson);
            var payloadBase64 = this.padBase64(jwtArray[1]);
            var payloadJson = this.b64DecodeUnicode(payloadBase64);
            var payload = JSON.parse(payloadJson);
            var savedNonce = this.storage.getItem(nonceKey);
            if (!payload.sub) {
                throw ('Missing sub in JWT');
            }
            if (payload.nonce !== savedNonce) {
                console.log('Failing nonce JWT is not corresponding' + payload.nonce);
                return;
            }
            return {
                idToken: jwt,
                payload: payload,
                header: header
            };
        }
    };
    Oauth2Auth.prototype.b64DecodeUnicode = function (b64string) {
        var base64 = b64string.replace(/\-/g, '+').replace(/\_/g, '/');
        return decodeURIComponent(atob(base64)
            .split('')
            .map(function (c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        })
            .join(''));
    };
    Oauth2Auth.prototype.storeIdToken = function (idToken, exp) {
        this.storage.setItem('id_token', idToken);
        this.storage.setItem('id_token_expires_at', Number(exp * 1000).toString());
        this.storage.setItem('id_token_stored_at', Date.now().toString());
    };
    Oauth2Auth.prototype.storeAccessToken = function (accessToken, expiresIn, refreshToken) {
        this.storage.setItem('access_token', accessToken);
        var expiresInMilliSeconds = expiresIn * 1000;
        var now = new Date();
        var expiresAt = now.getTime() + expiresInMilliSeconds;
        this.storage.setItem('access_token_expires_in', expiresAt);
        this.storage.setItem('access_token_stored_at', Date.now().toString());
        this.setToken(accessToken, refreshToken);
    };
    Oauth2Auth.prototype.saveUsername = function (username) {
        if (this.storage.supportsStorage()) {
            this.storage.setItem('USERNAME', username);
        }
    };
    Oauth2Auth.prototype.implicitLogin = function () {
        if (!this.isValidToken() || !this.isValidAccessToken()) {
            this.redirectLogin();
        }
    };
    Oauth2Auth.prototype.isValidToken = function () {
        var validToken = false;
        if (this.getIdToken()) {
            var expiresAt = this.storage.getItem('id_token_expires_at'), now = new Date();
            if (expiresAt && parseInt(expiresAt, 10) >= now.getTime()) {
                validToken = true;
            }
        }
        return validToken;
    };
    Oauth2Auth.prototype.isValidAccessToken = function () {
        var validAccessToken = false;
        if (this.getAccessToken()) {
            var expiresAt = this.storage.getItem('access_token_expires_in');
            var now = new Date();
            if (expiresAt && parseInt(expiresAt, 10) >= now.getTime()) {
                validAccessToken = true;
            }
        }
        return validAccessToken;
    };
    Oauth2Auth.prototype.getIdToken = function () {
        return this.storage.getItem('id_token');
    };
    Oauth2Auth.prototype.getAccessToken = function () {
        return this.storage.getItem('access_token');
    };
    Oauth2Auth.prototype.redirectLogin = function () {
        if (this.config.oauth2.implicitFlow && typeof window !== 'undefined') {
            var href = this.composeImplicitLoginUrl();
            window.location.href = href;
            this.emit('implicit_redirect', href);
        }
    };
    Oauth2Auth.prototype.isRedirectionUrl = function () {
        return window.location.hash && window.location.hash.split('&')[0].indexOf('session_state') === -1;
    };
    Oauth2Auth.prototype.genNonce = function () {
        var text = '';
        var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        for (var i = 0; i < 40; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    };
    Oauth2Auth.prototype.composeImplicitLoginUrl = function () {
        var nonce = this.genNonce();
        this.storage.setItem('nonce', nonce);
        var afterLoginUriSegment = this.isRedirectionUrl() ? window.location.hash : '';
        if (afterLoginUriSegment && afterLoginUriSegment !== '/') {
            this.storage.setItem('loginFragment', afterLoginUriSegment.replace('#', '').trim());
        }
        var separation = this.discovery.loginUrl.indexOf('?') > -1 ? '&' : '?';
        return this.discovery.loginUrl +
            separation +
            'client_id=' +
            encodeURIComponent(this.config.oauth2.clientId) +
            '&redirect_uri=' +
            encodeURIComponent(this.config.oauth2.redirectUri) +
            '&scope=' +
            encodeURIComponent(this.config.oauth2.scope) +
            '&response_type=' +
            encodeURIComponent('id_token token') +
            '&nonce=' +
            encodeURIComponent(nonce);
    };
    Oauth2Auth.prototype.composeIframeLoginUrl = function () {
        var nonce = this.genNonce();
        this.storage.setItem('refresh_nonce', nonce);
        var separation = this.discovery.loginUrl.indexOf('?') > -1 ? '&' : '?';
        return this.discovery.loginUrl +
            separation +
            'client_id=' +
            encodeURIComponent(this.config.oauth2.clientId) +
            '&redirect_uri=' +
            encodeURIComponent(this.config.oauth2.redirectSilentIframeUri) +
            '&scope=' +
            encodeURIComponent(this.config.oauth2.scope) +
            '&response_type=' +
            encodeURIComponent('id_token token') +
            '&nonce=' +
            encodeURIComponent(nonce) +
            '&prompt=none';
    };
    Oauth2Auth.prototype.hasHashCharacter = function (hash) {
        return hash.indexOf('#') === 0;
    };
    Oauth2Auth.prototype.startWithHashRoute = function (hash) {
        return hash.startsWith('#/');
    };
    Oauth2Auth.prototype.getHashFragmentParams = function (externalHash) {
        var hashFragmentParams = null;
        if (typeof window !== 'undefined') {
            var hash = void 0;
            if (!externalHash) {
                hash = decodeURIComponent(window.location.hash);
                if (!this.startWithHashRoute(hash)) {
                    window.location.hash = '';
                }
            }
            else {
                hash = decodeURIComponent(externalHash);
                this.removeHashFromSilentIframe();
                this.destroyIframe();
            }
            if (this.hasHashCharacter(hash) && !this.startWithHashRoute(hash)) {
                var questionMarkPosition = hash.indexOf('?');
                if (questionMarkPosition > -1) {
                    hash = hash.substr(questionMarkPosition + 1);
                }
                else {
                    hash = hash.substr(1);
                }
                hashFragmentParams = this.parseQueryString(hash);
            }
        }
        return hashFragmentParams;
    };
    Oauth2Auth.prototype.parseQueryString = function (queryString) {
        var data = {};
        var pairs, pair, separatorIndex, escapedKey, escapedValue, key, value;
        if (queryString !== null) {
            pairs = queryString.split('&');
            for (var i = 0; i < pairs.length; i++) {
                pair = pairs[i];
                separatorIndex = pair.indexOf('=');
                if (separatorIndex === -1) {
                    escapedKey = pair;
                    escapedValue = null;
                }
                else {
                    escapedKey = pair.substr(0, separatorIndex);
                    escapedValue = pair.substr(separatorIndex + 1);
                }
                key = decodeURIComponent(escapedKey);
                value = decodeURIComponent(escapedValue);
                if (key.substr(0, 1) === '/') {
                    key = key.substr(1);
                }
                data[key] = value;
            }
        }
        return data;
    };
    Oauth2Auth.prototype.silentRefresh = function () {
        var _this = this;
        if (typeof document === 'undefined') {
            this.pollingRefreshToken();
            return;
        }
        if (this.checkAccessToken) {
            this.destroyIframe();
            this.createIframe();
            this.checkAccessToken = false;
            return;
        }
        this.refreshTokenTimeoutIframe = setTimeout(function () {
            _this.destroyIframe();
            _this.createIframe();
        }, this.config.oauth2.refreshTokenTimeout);
    };
    Oauth2Auth.prototype.removeHashFromSilentIframe = function () {
        var iframe = document.getElementById('silent_refresh_token_iframe');
        if (iframe && iframe.contentWindow.location.hash) {
            iframe.contentWindow.location.hash = '';
        }
    };
    Oauth2Auth.prototype.createIframe = function () {
        var _this = this;
        var iframe = document.createElement('iframe');
        iframe.id = 'silent_refresh_token_iframe';
        var loginUrl = this.composeIframeLoginUrl();
        iframe.setAttribute('src', loginUrl);
        iframe.style.display = 'none';
        document.body.appendChild(iframe);
        this.iFrameHashListener = function () {
            var silentRefreshTokenIframe = document.getElementById('silent_refresh_token_iframe');
            var hash = silentRefreshTokenIframe.contentWindow.location.hash;
            try {
                _this.checkFragment('refresh_nonce', hash);
            }
            catch (e) {
                _this.logOut();
            }
        };
        iframe.addEventListener('load', this.iFrameHashListener);
    };
    Oauth2Auth.prototype.destroyIframe = function () {
        var iframe = document.getElementById('silent_refresh_token_iframe');
        if (iframe) {
            iframe.removeEventListener('load', this.iFrameHashListener);
            document.body.removeChild(iframe);
        }
    };
    Oauth2Auth.prototype.login = function (username, password) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.grantPasswordLogin(username, password, resolve, reject);
        });
    };
    Oauth2Auth.prototype.grantPasswordLogin = function (username, password, resolve, reject) {
        var _this = this;
        this.invalidateSession();
        var postBody = {}, pathParams = {}, queryParams = {};
        var headerParams = {
            'Content-Type': 'application/x-www-form-urlencoded'
        };
        var formParams = {
            username: username,
            password: password,
            grant_type: 'password',
            client_id: this.config.oauth2.clientId
        };
        var contentTypes = ['application/x-www-form-urlencoded'];
        var accepts = ['application/json'];
        var promise = this.callCustomApi(this.discovery.tokenEndpoint, 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts).then(function (data) {
            _this.saveUsername(username);
            _this.silentRefresh();
            _this.storeAccessToken(data.access_token, data.expires_in, data.refresh_token);
            resolve(data);
        }, function (error) {
            if (error.error && error.error.status === 401 || error.status === 401) {
                _this.emit('unauthorized');
            }
            _this.emit('error');
            reject(error.error);
        });
        ee(promise);
    };
    Oauth2Auth.prototype.pollingRefreshToken = function () {
        var _this = this;
        this.refreshTokenIntervalPolling = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this.refreshToken()];
                    case 1:
                        _a.sent();
                        return [3, 3];
                    case 2:
                        e_1 = _a.sent();
                        return [3, 3];
                    case 3: return [2];
                }
            });
        }); }, this.config.oauth2.refreshTokenTimeout);
        this.refreshTokenIntervalPolling.unref();
    };
    Oauth2Auth.prototype.refreshToken = function () {
        var _this = this;
        var postBody = {}, pathParams = {}, queryParams = {}, formParams = {};
        var auth = 'Basic ' + this.universalBtoa(this.config.oauth2.clientId + ':' + this.config.oauth2.secret);
        var headerParams = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Cache-Control': 'no-cache',
            'Authorization': auth
        };
        formParams = {
            grant_type: 'refresh_token',
            refresh_token: this.authentications.oauth2.refreshToken
        };
        var contentTypes = ['application/x-www-form-urlencoded'];
        var accepts = ['application/json'];
        var promise = new Promise(function (resolve, reject) {
            _this.callCustomApi(_this.discovery.tokenEndpoint, 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts).then(function (data) {
                _this.setToken(data.access_token, data.refresh_token);
                resolve(data);
            }, function (error) {
                if (error.error && error.error.status === 401) {
                    _this.emit('unauthorized');
                }
                _this.emit('error');
                reject(error.error);
            });
        });
        ee(promise);
        return promise;
    };
    Oauth2Auth.prototype.universalBtoa = function (stringToConvert) {
        try {
            return btoa(stringToConvert);
        }
        catch (err) {
            return Buffer.from(stringToConvert).toString('base64');
        }
    };
    Oauth2Auth.prototype.setToken = function (token, refreshToken) {
        this.authentications.oauth2.accessToken = token;
        this.authentications.oauth2.refreshToken = refreshToken;
        this.authentications.basicAuth.password = null;
        this.token = token;
        if (token) {
            this.emit('token_issued');
            this.emit('logged-in');
        }
    };
    Oauth2Auth.prototype.getToken = function () {
        return this.token;
    };
    Oauth2Auth.prototype.getAuthentication = function () {
        return this.authentications;
    };
    Oauth2Auth.prototype.changeHost = function (host) {
        this.config.hostOauth2 = host;
    };
    Oauth2Auth.prototype.isLoggedIn = function () {
        return !!this.authentications.oauth2.accessToken;
    };
    Oauth2Auth.prototype.logOut = function () {
        return __awaiter(this, void 0, void 0, function () {
            var id_token, separation, redirectLogout, logoutUrl;
            return __generator(this, function (_a) {
                this.checkAccessToken = true;
                id_token = this.getIdToken();
                this.invalidateSession();
                this.setToken(null, null);
                separation = this.discovery.logoutUrl.indexOf('?') > -1 ? '&' : '?';
                redirectLogout = this.config.oauth2.redirectUriLogout || this.config.oauth2.redirectUri;
                logoutUrl = this.discovery.logoutUrl +
                    separation +
                    'post_logout_redirect_uri=' +
                    encodeURIComponent(redirectLogout) +
                    '&id_token_hint=' +
                    encodeURIComponent(id_token);
                if (id_token != null && this.config.oauth2.implicitFlow && typeof window !== 'undefined') {
                    window.location.href = logoutUrl;
                }
                return [2];
            });
        });
    };
    Oauth2Auth.prototype.invalidateSession = function () {
        clearTimeout(this.refreshTokenTimeoutIframe);
        clearInterval(this.refreshTokenIntervalPolling);
        this.storage.removeItem('access_token');
        this.storage.removeItem('access_token_expires_in');
        this.storage.removeItem('access_token_stored_at');
        this.storage.removeItem('id_token');
        this.storage.removeItem('id_token');
        this.storage.removeItem('id_token_claims_obj');
        this.storage.removeItem('id_token_expires_at');
        this.storage.removeItem('id_token_stored_at');
        this.storage.removeItem('nonce');
    };
    Oauth2Auth.prototype.exchangeTicketListener = function (alfrescoApi) {
        var _this = this;
        this.on('token_issued', function () { return __awaiter(_this, void 0, void 0, function () {
            var authContentApi, ticketEntry, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authContentApi = new AuthenticationApi(alfrescoApi);
                        authContentApi.apiClient.authentications = this.authentications;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, authContentApi.getTicket()];
                    case 2:
                        ticketEntry = _a.sent();
                        this.config.ticketEcm = ticketEntry.entry.id;
                        this.emit('ticket_exchanged');
                        return [3, 4];
                    case 3:
                        e_2 = _a.sent();
                        return [3, 4];
                    case 4: return [2];
                }
            });
        }); });
    };
    Oauth2Auth.DEFAULT_AUTHORIZATION_URL = '/protocol/openid-connect/auth';
    Oauth2Auth.DEFAULT_TOKEN_URL = '/protocol/openid-connect/token';
    Oauth2Auth.DEFAULT_LOGOUT_URL = '/protocol/openid-connect/logout';
    return Oauth2Auth;
}(AlfrescoApiClient));
export { Oauth2Auth };
//# sourceMappingURL=../../../../src/authentication/oauth2Auth.js.map