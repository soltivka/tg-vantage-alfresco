{"version":3,"file":"property.js","sourceRoot":"","sources":["property.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;AAEF,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C;IAuCI,kBAAY,KAAW;QACnB,IAAI,KAAK,EAAE;YACP,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC3B,IAAI,KAAK,CAAC,WAAW,EAAE;gBACnB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,UAAC,IAAS;oBAC/C,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;gBAChC,CAAC,CAAC,CAAC;aACN;SACJ;IACL,CAAC;IAEL,eAAC;AAAD,CAAC,AAlDD,IAkDC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Constraint } from './constraint';\n\nexport class Property {\n    id: string;\n    /**\n     * the human-readable title\n     */\n    title?: string;\n    /**\n     * the human-readable description\n     */\n    description?: string;\n    /**\n     * the default value\n     */\n    defaultValue?: string;\n    /**\n     * the name of the property type (i.g. d:text)\n     */\n    dataType?: string;\n    /**\n     * define if the property is multi-valued\n     */\n    isMultiValued?: boolean;\n    /**\n     * define if the property is mandatory\n     */\n    isMandatory?: boolean;\n    /**\n     * define if the presence of mandatory properties is enforced\n     */\n    isMandatoryEnforced?: boolean;\n    /**\n     * define if the property is system maintained\n     */\n    isProtected?: boolean;\n    /**\n     * list of constraints defined for the property\n     */\n    constraints?: Constraint[];\n\n    constructor(input?: any) {\n        if (input) {\n            Object.assign(this, input);\n            if (input.constraints) {\n                this.constraints = input.constraints.map((item: any) => {\n                    return new Constraint(item);\n                });\n            }\n        }\n    }\n\n}\n"]}