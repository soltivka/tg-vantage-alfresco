{"version":3,"file":"renditions.api.js","sourceRoot":"","sources":["renditions.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { DirectAccessUrlEntry } from '../model/directAccessUrlEntry';\nimport { RenditionBodyCreate } from '../model/renditionBodyCreate';\nimport { RenditionEntry } from '../model/renditionEntry';\nimport { RenditionPaging } from '../model/renditionPaging';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Renditions service.\n* @module RenditionsApi\n*/\nexport class RenditionsApi extends BaseApi {\n    /**\n    * Create rendition\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nAn asynchronous request to create a rendition for file **nodeId**.\n\nThe rendition is specified by name **id** in the request body:\nJSON\n{\n  \\\"id\\\":\\\"doclib\\\"\n}\n\n Multiple names may be specified as a comma separated list or using a list format:\nJSON\n[\n  {\n     \\\"id\\\": \\\"doclib\\\"\n  },\n  {\n     \\\"id\\\": \\\"avatar\\\"\n  }\n]\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param renditionBodyCreate The rendition \\\"id\\\".\n    * @return Promise<{}>\n    */\n    createRendition(nodeId: string, renditionBodyCreate: RenditionBodyCreate): Promise<any> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(renditionBodyCreate, 'renditionBodyCreate');\n\n        const postBody = renditionBodyCreate;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/renditions', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Get rendition information\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the rendition information for **renditionId** of file **nodeId**.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*.\n    * @return Promise<RenditionEntry>\n    */\n    getRendition(nodeId: string, renditionId: string): Promise<RenditionEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(renditionId, 'renditionId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId,            'renditionId': renditionId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/renditions/{renditionId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , RenditionEntry);\n    }\n/**\n    * Get rendition content\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the rendition content for **renditionId** of file **nodeId**.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*.\n    * @param opts Optional parameters\n    * @param opts.attachment **true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n (default to true)\n    * @param opts.ifModifiedSince Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, Wed, 09 Mar 2016 16:56:34 GMT.\n\n    * @param opts.range The Range header indicates the part of a document that the server should return.\nSingle part request supported, for example: bytes=1-10.\n\n    * @param opts.placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**,\nthen the placeholder image for the mime type of this rendition is returned, rather\nthan a 404 response.\n (default to false)\n    * @return Promise<Blob>\n    */\n    getRenditionContent(nodeId: string, renditionId: string, opts?: any): Promise<Blob> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(renditionId, 'renditionId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId,            'renditionId': renditionId\n        };\n\n        const queryParams = {\n            'attachment': opts['attachment'],\n            'placeholder': opts['placeholder']\n        };\n\n        const headerParams = {\n            'If-Modified-Since': opts['ifModifiedSince'],            'Range': opts['range']\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/octet-stream'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/renditions/{renditionId}/content', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , 'blob');\n    }\n/**\n    * List renditions\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of the rendition information for each rendition of the the file **nodeId**, including the rendition id.\n\nEach rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.\n\nYou can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**\nclause will return just the CREATED renditions:\n\n(status='CREATED')\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param opts Optional parameters\n    * @param opts.where A string to restrict the returned objects by using a predicate.\n    * @return Promise<RenditionPaging>\n    */\n    listRenditions(nodeId: string, opts?: any): Promise<RenditionPaging> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'where': opts['where']\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/renditions', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , RenditionPaging);\n    }\n\n    /**\n     * Generate a direct access content url for a given rendition of a node\n     *\n     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions.\n     *\n     * @param nodeId The identifier of a node.\n     * @param renditionId The identifier of a version\n     * @return Promise<DirectAccessUrlEntry>\n     */\n    requestDirectAccessUrl(nodeId: string, renditionId: string): Promise<DirectAccessUrlEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(renditionId, 'renditionId');\n\n        const pathParams = {\n            'nodeId': nodeId,\n            'renditionId': renditionId\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/renditions/{renditionId}/request-direct-access-url', 'POST',\n            pathParams, {}, {}, {}, null,\n            contentTypes, accepts , DirectAccessUrlEntry);\n    }\n\n}\n"]}