{"version":3,"file":"people.api.js","sourceRoot":"","sources":["people.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ClientBody } from '../model/clientBody';\nimport { PasswordResetBody } from '../model/passwordResetBody';\nimport { PersonBodyCreate } from '../model/personBodyCreate';\nimport { PersonBodyUpdate } from '../model/personBodyUpdate';\nimport { PersonEntry } from '../model/personEntry';\nimport { PersonPaging } from '../model/personPaging';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\n\n/**\n* People service.\n* @module PeopleApi\n*/\nexport class PeopleApi extends BaseApi {\n    /**\n    * Create person\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nCreate a person.\n\nIf applicable, the given person's login access can also be optionally disabled.\n\nYou must have admin rights to create a person.\n\nYou can set custom properties when you create a person:\nJSON\n{\n  \\\"id\\\": \\\"abeecher\\\",\n  \\\"firstName\\\": \\\"Alice\\\",\n  \\\"lastName\\\": \\\"Beecher\\\",\n  \\\"displayName\\\": \\\"Alice Beecher\\\",\n  \\\"email\\\": \\\"abeecher@example.com\\\",\n  \\\"password\\\": \\\"secret\\\",\n  \\\"properties\\\":\n  {\n    \\\"my:property\\\": \\\"The value\\\"\n  }\n}\n\n**Note:** setting properties of type d:content and d:category are not supported.\n\n    *\n    * @param personBodyCreate The person details.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<PersonEntry>\n    */\n    createPerson(personBodyCreate: PersonBodyCreate, opts?: any): Promise<PersonEntry> {\n\n        throwIfNotDefined(personBodyCreate, 'personBodyCreate');\n\n        opts = opts || {};\n        const postBody = personBodyCreate;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , PersonEntry);\n    }\n/**\n    * Delete avatar image\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nDeletes the avatar image related to person **personId**.\n\nYou must be the person or have admin rights to update a person's avatar.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param personId The identifier of a person.\n    * @return Promise<{}>\n    */\n    deleteAvatarImage(personId: string): Promise<any> {\n\n        throwIfNotDefined(personId, 'personId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/avatar', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Get avatar image\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nGets the avatar image related to the person **personId**. If the person has no related avatar then\nthe **placeholder** query parameter can be optionally used to request a placeholder image to be returned.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param personId The identifier of a person.\n    * @param opts Optional parameters\n    * @param opts.attachment **true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n (default to true)\n    * @param opts.ifModifiedSince Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, Wed, 09 Mar 2016 16:56:34 GMT.\n\n    * @param opts.placeholder If **true** and there is no avatar for this **personId**\nthen the placeholder image is returned, rather than a 404 response.\n (default to true)\n    * @return Promise<Blob>\n    */\n    getAvatarImage(personId: string, opts?: any): Promise<Blob> {\n\n        throwIfNotDefined(personId, 'personId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId\n        };\n\n        const queryParams = {\n            'attachment': opts['attachment'],\n            'placeholder': opts['placeholder']\n        };\n\n        const headerParams = {\n            'If-Modified-Since': opts['ifModifiedSince']\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/octet-stream'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/avatar', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , 'blob');\n    }\n/**\n    * Get a person\n    *\n    * Gets information for the person **personId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param personId The identifier of a person.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<PersonEntry>\n    */\n    getPerson(personId: string, opts?: any): Promise<PersonEntry> {\n\n        throwIfNotDefined(personId, 'personId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , PersonEntry);\n    }\n/**\n    * List people\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nList people.\n\nYou can use the **include** parameter to return any additional information.\n\nThe default sort order for the returned list is for people to be sorted by ascending id.\nYou can override the default by using the **orderBy** parameter.\n\nYou can use any of the following fields to order the results:\n* id\n* firstName\n* lastName\n\n    *\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n    * @param opts.include Returns additional information about the person. The following optional fields can be requested:\n* properties\n* aspectNames\n* capabilities\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<PersonPaging>\n    */\n    listPeople(opts?: any): Promise<PersonPaging> {\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , PersonPaging);\n    }\n/**\n    * Request password reset\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nInitiates the reset password workflow to send an email with reset password instruction to the user's registered email.\n\nThe client is mandatory in the request body. For example:\nJSON\n{\n  \\\"client\\\": \\\"myClient\\\"\n}\n\n**Note:** The client must be registered before this API can send an email. See [server documentation]. However, out-of-the-box\nshare is registered as a default client, so you could pass **share** as the client name:\nJSON\n{\n  \\\"client\\\": \\\"share\\\"\n}\n\n**Note:** No authentication is required to call this endpoint.\n\n    *\n    * @param personId The identifier of a person.\n    * @param clientBody The client name to send email with app-specific url.\n    * @return Promise<{}>\n    */\n    requestPasswordReset(personId: string, clientBody: ClientBody): Promise<any> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(clientBody, 'clientBody');\n\n        const postBody = clientBody;\n\n        const pathParams = {\n            'personId': personId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/request-password-reset', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Reset password\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nResets user's password\n\nThe password, id and key properties are mandatory in the request body. For example:\nJSON\n{\n  \\\"password\\\":\\\"newPassword\\\",\n  \\\"id\\\":\\\"activiti$10\\\",\n  \\\"key\\\":\\\"4dad6d00-0daf-413a-b200-f64af4e12345\\\"\n}\n\n**Note:** No authentication is required to call this endpoint.\n\n    *\n    * @param personId The identifier of a person.\n    * @param passwordResetBody The reset password details\n    * @return Promise<{}>\n    */\n    resetPassword(personId: string, passwordResetBody: PasswordResetBody): Promise<any> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(passwordResetBody, 'passwordResetBody');\n\n        const postBody = passwordResetBody;\n\n        const pathParams = {\n            'personId': personId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/reset-password', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Update avatar image\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nUpdates the avatar image related to the person **personId**.\n\nThe request body should be the binary stream for the avatar image. The content type of the file\nshould be an image file. This will be used to generate an \\\"avatar\\\" thumbnail rendition.\n\nYou must be the person or have admin rights to update a person's avatar.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param personId The identifier of a person.\n    * @param contentBodyUpdate The binary content\n    * @return Promise<{}>\n    */\n    updateAvatarImage(personId: string, contentBodyUpdate: string): Promise<any> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(contentBodyUpdate, 'contentBodyUpdate');\n\n        const postBody = contentBodyUpdate;\n\n        const pathParams = {\n            'personId': personId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/octet-stream'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/avatar', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Update person\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nUpdate the given person's details.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\nIf applicable, the given person's login access can also be optionally disabled or re-enabled.\n\nYou must have admin rights to update a person — unless updating your own details.\n\nIf you are changing your password, as a non-admin user, then the existing password must also\nbe supplied (using the oldPassword field in addition to the new password value).\n\nAdmin users cannot be disabled by setting enabled to false.\n\nNon-admin users may not disable themselves.\n\nYou can set custom properties when you update a person:\nJSON\n{\n  \\\"firstName\\\": \\\"Alice\\\",\n  \\\"properties\\\":\n  {\n    \\\"my:property\\\": \\\"The value\\\"\n  }\n}\n\n**Note:** setting properties of type d:content and d:category are not supported.\n\n    *\n    * @param personId The identifier of a person.\n    * @param personBodyUpdate The person details.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<PersonEntry>\n    */\n    updatePerson(personId: string, personBodyUpdate: PersonBodyUpdate, opts?: any): Promise<PersonEntry> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(personBodyUpdate, 'personBodyUpdate');\n\n        opts = opts || {};\n        const postBody = personBodyUpdate;\n\n        const pathParams = {\n            'personId': personId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , PersonEntry);\n    }\n\n}\n"]}