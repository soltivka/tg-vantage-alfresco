{"version":3,"file":"versions.api.js","sourceRoot":"","sources":["versions.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { DirectAccessUrlEntry } from '../model/directAccessUrlEntry';\nimport { RenditionBodyCreate } from '../model/renditionBodyCreate';\nimport { RenditionEntry } from '../model/renditionEntry';\nimport { RenditionPaging } from '../model/renditionPaging';\nimport { RevertBody } from '../model/revertBody';\nimport { VersionEntry } from '../model/versionEntry';\nimport { VersionPaging } from '../model/versionPaging';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\n\n/**\n* Versions service.\n* @module VersionsApi\n*/\nexport class VersionsApi extends BaseApi {\n    /**\n    * Create rendition for a file version\n    *\n    * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\nAn asynchronous request to create a rendition for version of file **nodeId** and **versionId**.\n\nThe version rendition is specified by name **id** in the request body:\nJSON\n{\n  \\\"id\\\":\\\"doclib\\\"\n}\n\n  Multiple names may be specified as a comma separated list or using a list format:\nJSON\n[\n  {\n      \\\"id\\\": \\\"doclib\\\"\n  },\n  {\n      \\\"id\\\": \\\"avatar\\\"\n  }\n]\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param versionId The identifier of a version, ie. version label, within the version history of a node.\n    * @param renditionBodyCreate The rendition \\\"id\\\".\n    * @return Promise<{}>\n    */\n    createVersionRendition(nodeId: string, versionId: string, renditionBodyCreate: RenditionBodyCreate): Promise<any> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(versionId, 'versionId');\n        throwIfNotDefined(renditionBodyCreate, 'renditionBodyCreate');\n\n        const postBody = renditionBodyCreate;\n\n        const pathParams = {\n            'nodeId': nodeId,            'versionId': versionId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/versions/{versionId}/renditions', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Delete a version\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nDelete the version identified by **versionId** and **nodeId*.\n\nIf the version is successfully deleted then the content and metadata for that versioned node\nwill be deleted and will no longer appear in the version history. This operation cannot be undone.\n\nIf the most recent version is deleted the live node will revert to the next most recent version.\n\nWe currently do not allow the last version to be deleted. If you wish to clear the history then you\ncan remove the \\\"cm:versionable\\\" aspect (via update node) which will also disable versioning. In this\ncase, you can re-enable versioning by adding back the \\\"cm:versionable\\\" aspect or using the version\nparams (majorVersion and comment) on a subsequent file content update.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param versionId The identifier of a version, ie. version label, within the version history of a node.\n    * @return Promise<{}>\n    */\n    deleteVersion(nodeId: string, versionId: string): Promise<any> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(versionId, 'versionId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId,            'versionId': versionId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/versions/{versionId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Get version information\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the version information for **versionId** of file node **nodeId**.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param versionId The identifier of a version, ie. version label, within the version history of a node.\n    * @return Promise<VersionEntry>\n    */\n    getVersion(nodeId: string, versionId: string): Promise<VersionEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(versionId, 'versionId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId,            'versionId': versionId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/versions/{versionId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , VersionEntry);\n    }\n/**\n    * Get version content\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the version content for **versionId** of file node **nodeId**.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param versionId The identifier of a version, ie. version label, within the version history of a node.\n    * @param opts Optional parameters\n    * @param opts.attachment **true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n (default to true)\n    * @param opts.ifModifiedSince Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, Wed, 09 Mar 2016 16:56:34 GMT.\n\n    * @param opts.range The Range header indicates the part of a document that the server should return.\nSingle part request supported, for example: bytes=1-10.\n\n    * @return Promise<Blob>\n    */\n    getVersionContent(nodeId: string, versionId: string, opts?: any): Promise<Blob> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(versionId, 'versionId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId,            'versionId': versionId\n        };\n\n        const queryParams = {\n            'attachment': opts['attachment']\n        };\n\n        const headerParams = {\n            'If-Modified-Since': opts['ifModifiedSince'],            'Range': opts['range']\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/octet-stream'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/versions/{versionId}/content', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , 'blob');\n    }\n/**\n    * Get rendition information for a file version\n    *\n    * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\nGets the rendition information for **renditionId** of version of file **nodeId** and **versionId**.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param versionId The identifier of a version, ie. version label, within the version history of a node.\n    * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*.\n    * @return Promise<RenditionEntry>\n    */\n    getVersionRendition(nodeId: string, versionId: string, renditionId: string): Promise<RenditionEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(versionId, 'versionId');\n        throwIfNotDefined(renditionId, 'renditionId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId,            'versionId': versionId,            'renditionId': renditionId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , RenditionEntry);\n    }\n/**\n    * Get rendition content for a file version\n    *\n    * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\nGets the rendition content for **renditionId** of version of file **nodeId** and **versionId**.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param versionId The identifier of a version, ie. version label, within the version history of a node.\n    * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*.\n    * @param opts Optional parameters\n    * @param opts.attachment **true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n (default to true)\n    * @param opts.ifModifiedSince Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, Wed, 09 Mar 2016 16:56:34 GMT.\n\n    * @param opts.range The Range header indicates the part of a document that the server should return.\nSingle part request supported, for example: bytes=1-10.\n\n    * @param opts.placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**,\nthen the placeholder image for the mime type of this rendition is returned, rather\nthan a 404 response.\n (default to false)\n    * @return Promise<Blob>\n    */\n    getVersionRenditionContent(nodeId: string, versionId: string, renditionId: string, opts?: any): Promise<Blob> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(versionId, 'versionId');\n        throwIfNotDefined(renditionId, 'renditionId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId,            'versionId': versionId,            'renditionId': renditionId\n        };\n\n        const queryParams = {\n            'attachment': opts['attachment'],\n            'placeholder': opts['placeholder']\n        };\n\n        const headerParams = {\n            'If-Modified-Since': opts['ifModifiedSince'],            'Range': opts['range']\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/octet-stream'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}/content', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , 'blob');\n    }\n/**\n    * List version history\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the version history as an ordered list of versions for the specified **nodeId**.\n\nThe list is ordered in descending modified order. So the most recent version is first and\nthe original version is last in the list.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about the version node. The following optional fields can be requested:\n* properties\n* aspectNames\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @return Promise<VersionPaging>\n    */\n    listVersionHistory(nodeId: string, opts?: any): Promise<VersionPaging> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv'),\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems']\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/versions', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , VersionPaging);\n    }\n/**\n    * List renditions for a file version\n    *\n    * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\nGets a list of the rendition information for each rendition of the version of file **nodeId** and **versionId**, including the rendition id.\n\nEach rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.\n\nYou can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**\nclause will return just the CREATED renditions:\n\n(status='CREATED')\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param versionId The identifier of a version, ie. version label, within the version history of a node.\n    * @param opts Optional parameters\n    * @param opts.where A string to restrict the returned objects by using a predicate.\n    * @return Promise<RenditionPaging>\n    */\n    listVersionRenditions(nodeId: string, versionId: string, opts?: any): Promise<RenditionPaging> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(versionId, 'versionId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId,            'versionId': versionId\n        };\n\n        const queryParams = {\n            'where': opts['where']\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/versions/{versionId}/renditions', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , RenditionPaging);\n    }\n/**\n    * Revert a version\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nAttempts to revert the version identified by **versionId** and **nodeId** to the live node.\n\nIf the node is successfully reverted then the content and metadata for that versioned node\nwill be promoted to the live node and a new version will appear in the version history.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param versionId The identifier of a version, ie. version label, within the version history of a node.\n    * @param revertBody Optionally, specify a version comment and whether this should be a major version, or not.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<VersionEntry>\n    */\n    revertVersion(nodeId: string, versionId: string, revertBody: RevertBody, opts?: any): Promise<VersionEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(versionId, 'versionId');\n        throwIfNotDefined(revertBody, 'revertBody');\n\n        opts = opts || {};\n        const postBody = revertBody;\n\n        const pathParams = {\n            'nodeId': nodeId,            'versionId': versionId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/versions/{versionId}/revert', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , VersionEntry);\n    }\n\n    /**\n     * Generate a direct access content url for a given version of a node\n     *\n     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions.\n     *\n     * @param nodeId The identifier of a node.\n     * @param versionId The identifier of a version\n     * @return Promise<DirectAccessUrlEntry>\n     */\n    requestDirectAccessUrl(nodeId: string, versionId: string): Promise<DirectAccessUrlEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(versionId, 'versionId');\n\n        const pathParams = {\n            'nodeId': nodeId,\n            'versionId': versionId\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/versions/{versionId}/request-direct-access-url', 'POST',\n            pathParams, {}, {}, {}, null,\n            contentTypes, accepts , DirectAccessUrlEntry);\n    }\n\n}\n"]}