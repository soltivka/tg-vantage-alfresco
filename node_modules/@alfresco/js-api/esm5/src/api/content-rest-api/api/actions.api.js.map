{"version":3,"file":"actions.api.js","sourceRoot":"","sources":["actions.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ActionBodyExec } from '../model/actionBodyExec';\nimport { ActionDefinitionEntry } from '../model/actionDefinitionEntry';\nimport { ActionDefinitionList } from '../model/actionDefinitionList';\nimport { ActionExecResultEntry } from '../model/actionExecResultEntry';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\n\n/**\n* Actions service.\n* @module ActionsApi\n*/\nexport class ActionsApi extends BaseApi {\n    /**\n    * Retrieve the details of an action definition\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nRetrieve the details of the action denoted by **actionDefinitionId**.\n\n    *\n    * @param actionDefinitionId The identifier of an action definition.\n    * @return Promise<ActionDefinitionEntry>\n    */\n    actionDetails(actionDefinitionId: string): Promise<ActionDefinitionEntry> {\n\n        throwIfNotDefined(actionDefinitionId, 'actionDefinitionId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'actionDefinitionId': actionDefinitionId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/action-definitions/{actionDefinitionId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , ActionDefinitionEntry);\n    }\n/**\n    * Execute an action\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nExecutes an action\n\nAn action may be executed against a node specified by **targetId**. For example:\n\n{\n  \\\"actionDefinitionId\\\": \\\"copy\\\",\n  \\\"targetId\\\": \\\"4c4b3c43-f18b-43ff-af84-751f16f1ddfd\\\",\n  \\\"params\\\": {\n  \t\\\"destination-folder\\\": \\\"34219f79-66fa-4ebf-b371-118598af898c\\\"\n  }\n}\n\nPerforming a POST with the request body shown above will result in the node identified by targetId\nbeing copied to the destination folder specified in the params object by the key destination-folder.\n\n**targetId** is optional, however, currently **targetId** must be a valid node ID.\nIn the future, actions may be executed against different entity types or\nexecuted without the need for the context of an entity.\n\nParameters supplied to the action within the params object will be converted to the expected type,\nwhere possible using the DefaultTypeConverter class. In addition:\n\n* Node IDs may be supplied in their short form (implicit workspace://SpacesStore prefix)\n* Aspect names may be supplied using their short form, e.g. cm:versionable or cm:auditable\n\nIn this example, we add the aspect cm:versionable to a node using the QName resolution mentioned above:\n\n{\n  \\\"actionDefinitionId\\\": \\\"add-features\\\",\n  \\\"targetId\\\": \\\"16349e3f-2977-44d1-93f2-73c12b8083b5\\\",\n  \\\"params\\\": {\n  \t\\\"aspect-name\\\": \\\"cm:versionable\\\"\n  }\n}\n\nThe actionDefinitionId is the id of an action definition as returned by\nthe _list actions_ operations (e.g. GET /action-definitions).\n\nThe action will be executed **asynchronously** with a 202 HTTP response signifying that\nthe request has been accepted successfully. The response body contains the unique ID of the action\npending execution. The ID may be used, for example to correlate an execution with output in the server logs.\n\n    *\n    * @param actionBodyExec Action execution details\n    * @return Promise<ActionExecResultEntry>\n    */\n    actionExec(actionBodyExec: ActionBodyExec): Promise<ActionExecResultEntry> {\n\n        throwIfNotDefined(actionBodyExec, 'actionBodyExec');\n\n        const postBody = actionBodyExec;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/action-executions', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , ActionExecResultEntry);\n    }\n/**\n    * Retrieve list of available actions\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nGets a list of all available actions\n\nThe default sort order for the returned list is for actions to be sorted by ascending name.\nYou can override the default by using the **orderBy** parameter.\n\nYou can use any of the following fields to order the results:\n* name\n* title\n\n    *\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<ActionDefinitionList>\n    */\n    listActions(opts?: any): Promise<ActionDefinitionList> {\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/action-definitions', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , ActionDefinitionList);\n    }\n/**\n    * Retrieve actions for a node\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nRetrieve the list of actions that may be executed against the given **nodeId**.\n\nThe default sort order for the returned list is for actions to be sorted by ascending name.\nYou can override the default by using the **orderBy** parameter.\n\nYou can use any of the following fields to order the results:\n* name\n* title\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<ActionDefinitionList>\n    */\n    nodeActions(nodeId: string, opts?: any): Promise<ActionDefinitionList> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/action-definitions', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , ActionDefinitionList);\n    }\n\n}\n"]}