/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { __extends } from "tslib";
var DateAlfresco = (function (_super) {
    __extends(DateAlfresco, _super);
    function DateAlfresco() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DateAlfresco.parseDate = function (dateToConvert) {
        if (dateToConvert instanceof Date) {
            return dateToConvert;
        }
        else if (typeof dateToConvert === 'number') {
            return new Date(dateToConvert);
        }
        var dateLength = 10;
        var separatorPos = dateToConvert.substring(dateLength).search(/[\+\-]/) + dateLength;
        var dateStr = separatorPos > dateLength ? dateToConvert.substring(0, separatorPos) : dateToConvert;
        var tzStr = separatorPos > dateLength ? dateToConvert.substring(separatorPos) : '';
        var parsedDate = this.parseDateTime(dateStr);
        var tzOffsetMins = this.parseDateTimeZone(tzStr);
        parsedDate.setTime(parsedDate.getTime() + tzOffsetMins * 60000);
        return parsedDate;
    };
    DateAlfresco.parseDateTime = function (dateToConvert) {
        var dateParts = dateToConvert.split(/[^0-9]/).map(function (s) {
            return parseInt(s, 10);
        });
        return new Date(Date.UTC(dateParts[0], dateParts[1] - 1 || 0, dateParts[2] || 1, dateParts[3] || 0, dateParts[4] || 0, dateParts[5] || 0, dateParts[6] || 0));
    };
    DateAlfresco.parseDateTimeZone = function (dateToConvert) {
        var match = /([\+\-])(\d{2}):?(\d{2})?/.exec(dateToConvert);
        if (match !== null) {
            return (parseInt(match[1] + '1', 10) * -1 * (parseInt(match[2], 10) * 60) + parseInt(match[3] || '0', 10));
        }
        else {
            return 0;
        }
    };
    return DateAlfresco;
}(Date));
export { DateAlfresco };
//# sourceMappingURL=../../../../../../src/api/content-custom-api/model/dateAlfresco.js.map