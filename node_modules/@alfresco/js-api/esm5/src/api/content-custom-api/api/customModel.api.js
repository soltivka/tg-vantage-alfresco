/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { __extends } from "tslib";
import { BaseApi } from './base.api';
import { throwIfNotDefined } from '../../../assert';
var CustomModelApi = (function (_super) {
    __extends(CustomModelApi, _super);
    function CustomModelApi() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.private = true;
        return _this;
    }
    CustomModelApi.prototype.createCustomModel = function (status, description, name, namespaceUri, namespacePrefix, author) {
        throwIfNotDefined(namespaceUri, 'namespaceUri');
        throwIfNotDefined(namespacePrefix, 'namespacePrefix');
        var bodyParam = {
            status: status,
            description: description,
            name: name,
            namespaceUri: namespaceUri,
            namespacePrefix: namespacePrefix,
            author: author
        };
        return this.post({
            path: 'cmm',
            bodyParam: bodyParam
        });
    };
    CustomModelApi.prototype.createCustomType = function (modelName, name, parentName, title, description) {
        throwIfNotDefined(modelName, 'modelName');
        throwIfNotDefined(name, 'name');
        var bodyParam = {
            name: name,
            parentName: parentName,
            title: title,
            description: description
        };
        var pathParams = {
            modelName: modelName
        };
        return this.post({
            path: 'cmm/{modelName}/types',
            bodyParam: bodyParam,
            pathParams: pathParams
        });
    };
    CustomModelApi.prototype.createCustomAspect = function (modelName, name, parentName, title, description) {
        throwIfNotDefined(modelName, 'modelName');
        throwIfNotDefined(name, 'name');
        var bodyParam = {
            name: name,
            parentName: parentName,
            title: title,
            description: description
        };
        var pathParams = {
            modelName: modelName
        };
        return this.post({
            path: 'cmm/{modelName}/aspects',
            bodyParam: bodyParam,
            pathParams: pathParams
        });
    };
    CustomModelApi.prototype.createCustomConstraint = function (modelName, name, type, parameters) {
        throwIfNotDefined(modelName, 'modelName');
        throwIfNotDefined(type, 'type');
        throwIfNotDefined(name, 'name');
        var bodyParam = {
            name: name,
            type: type,
            parameters: parameters
        };
        var pathParams = {
            modelName: modelName
        };
        return this.post({
            path: 'cmm/{modelName}/constraints',
            bodyParam: bodyParam,
            pathParams: pathParams
        });
    };
    CustomModelApi.prototype.activateCustomModel = function (modelName) {
        throwIfNotDefined(modelName, 'modelName');
        var bodyParam = {
            'status': 'ACTIVE'
        };
        var pathParams = {
            modelName: modelName
        };
        return this.put({
            path: 'cmm/{modelName}?select=status',
            bodyParam: bodyParam,
            pathParams: pathParams
        });
    };
    CustomModelApi.prototype.deactivateCustomModel = function (modelName) {
        throwIfNotDefined(modelName, 'modelName');
        var bodyParam = {
            'status': 'DRAFT'
        };
        var pathParams = {
            modelName: modelName
        };
        return this.put({
            path: 'cmm/{modelName}?select=status',
            bodyParam: bodyParam,
            pathParams: pathParams
        });
    };
    CustomModelApi.prototype.addPropertyToAspect = function (modelName, aspectName, properties) {
        throwIfNotDefined(modelName, 'modelName');
        throwIfNotDefined(aspectName, 'aspectName');
        var bodyParam = {
            'name': aspectName,
            properties: properties
        };
        var pathParams = {
            modelName: modelName,
            aspectName: aspectName
        };
        return this.put({
            path: 'cmm/{modelName}/aspects/{aspectName}?select=props',
            bodyParam: bodyParam,
            pathParams: pathParams
        });
    };
    CustomModelApi.prototype.addPropertyToType = function (modelName, typeName, properties) {
        throwIfNotDefined(modelName, 'modelName');
        throwIfNotDefined(typeName, 'typeName');
        var bodyParam = {
            'name': typeName,
            properties: properties
        };
        var pathParams = {
            modelName: modelName,
            typeName: typeName
        };
        return this.put({
            path: 'cmm/{modelName}/types/{typeName}?select=props',
            bodyParam: bodyParam,
            pathParams: pathParams
        });
    };
    CustomModelApi.prototype.updateCustomModel = function (modelName, description, namespaceUri, namespacePrefix, author) {
        throwIfNotDefined(modelName, 'modelName');
        var bodyParam = {
            'name': modelName,
            description: description,
            namespaceUri: namespaceUri,
            namespacePrefix: namespacePrefix,
            author: author
        };
        var pathParams = {
            modelName: modelName
        };
        return this.put({
            path: 'cmm/{modelName}',
            bodyParam: bodyParam,
            pathParams: pathParams
        });
    };
    CustomModelApi.prototype.updateCustomType = function (modelName, typeName, description, parentName, title) {
        throwIfNotDefined(modelName, 'modelName');
        throwIfNotDefined(typeName, 'typeName');
        var bodyParam = {
            'name': typeName,
            parentName: parentName,
            title: title,
            description: description
        };
        var pathParams = {
            modelName: modelName,
            typeName: typeName
        };
        return this.put({
            path: 'cmm/{modelName}/types/{typeName}',
            bodyParam: bodyParam,
            pathParams: pathParams
        });
    };
    CustomModelApi.prototype.updateCustomAspect = function (modelName, aspectName, description, parentName, title) {
        throwIfNotDefined(modelName, 'modelName');
        throwIfNotDefined(aspectName, 'aspectName');
        var bodyParam = {
            'name': aspectName,
            parentName: parentName,
            title: title,
            description: description
        };
        var pathParams = {
            modelName: modelName,
            aspectName: aspectName
        };
        return this.put({
            path: 'cmm/{modelName}/aspects/{aspectName}',
            bodyParam: bodyParam,
            pathParams: pathParams
        });
    };
    CustomModelApi.prototype.getAllCustomModel = function () {
        return this.get({
            path: 'cmm'
        });
    };
    CustomModelApi.prototype.getCustomModel = function (modelName, queryParams) {
        throwIfNotDefined(modelName, 'modelName');
        var pathParams = {
            modelName: modelName
        };
        return this.get({
            path: 'cmm/{modelName}',
            pathParams: pathParams,
            queryParams: queryParams
        });
    };
    CustomModelApi.prototype.getAllCustomType = function (modelName) {
        throwIfNotDefined(modelName, 'modelName');
        var pathParams = {
            modelName: modelName
        };
        return this.get({
            path: 'cmm/{modelName}/types',
            pathParams: pathParams
        });
    };
    CustomModelApi.prototype.getCustomType = function (modelName, typeName, queryParams) {
        throwIfNotDefined(modelName, 'modelName');
        throwIfNotDefined(typeName, 'typeName');
        var pathParams = {
            modelName: modelName,
            typeName: typeName
        };
        return this.get({
            path: 'cmm/{modelName}/types/{typeName}',
            pathParams: pathParams,
            queryParams: queryParams
        });
    };
    CustomModelApi.prototype.getAllCustomAspect = function (modelName, queryParams) {
        throwIfNotDefined(modelName, 'modelName');
        var pathParams = {
            modelName: modelName
        };
        return this.get({
            path: 'cmm/{modelName}/aspects',
            pathParams: pathParams,
            queryParams: queryParams
        });
    };
    CustomModelApi.prototype.getCustomAspect = function (modelName, aspectName, queryParams) {
        throwIfNotDefined(modelName, 'modelName');
        throwIfNotDefined(aspectName, 'aspectName');
        var pathParams = {
            modelName: modelName,
            aspectName: aspectName
        };
        return this.get({
            path: 'cmm/{modelName}/aspects/{aspectName}',
            pathParams: pathParams,
            queryParams: queryParams
        });
    };
    CustomModelApi.prototype.getAllCustomConstraints = function (modelName, queryParams) {
        throwIfNotDefined(modelName, 'modelName');
        var pathParams = {
            modelName: modelName
        };
        return this.get({
            path: 'cmm/{modelName}/constraints',
            pathParams: pathParams,
            queryParams: queryParams
        });
    };
    CustomModelApi.prototype.getCustomConstraints = function (modelName, constraintName, queryParams) {
        throwIfNotDefined(modelName, 'modelName');
        throwIfNotDefined(constraintName, 'constraintName');
        var pathParams = {
            modelName: modelName,
            constraintName: constraintName
        };
        return this.get({
            path: 'cmm/{modelName}/constraints{constraintName}',
            pathParams: pathParams,
            queryParams: queryParams
        });
    };
    CustomModelApi.prototype.deleteCustomModel = function (modelName) {
        throwIfNotDefined(modelName, 'modelName');
        var pathParams = {
            modelName: modelName
        };
        return this.delete({
            path: 'cmm/{modelName}',
            pathParams: pathParams
        });
    };
    CustomModelApi.prototype.deleteCustomType = function (modelName, typeName) {
        throwIfNotDefined(modelName, 'modelName');
        throwIfNotDefined(typeName, 'typeName');
        var pathParams = {
            modelName: modelName,
            typeName: typeName
        };
        return this.delete({
            path: 'cmm/{modelName}/types/{typeName}',
            pathParams: pathParams
        });
    };
    CustomModelApi.prototype.deleteCustomAspect = function (modelName, aspectName) {
        throwIfNotDefined(modelName, 'modelName');
        throwIfNotDefined(aspectName, 'aspectName');
        var pathParams = {
            modelName: modelName,
            aspectName: aspectName
        };
        return this.delete({
            path: 'cmm/{modelName}/aspects/{aspectName}',
            pathParams: pathParams
        });
    };
    CustomModelApi.prototype.deleteCustomAspectProperty = function (modelName, aspectName, propertyName) {
        throwIfNotDefined(modelName, 'modelName');
        throwIfNotDefined(aspectName, 'aspectName');
        throwIfNotDefined(propertyName, 'propertyName');
        var bodyParam = {
            'name': aspectName
        };
        var pathParams = {
            modelName: modelName,
            aspectName: aspectName
        };
        var queryParams = {
            select: 'props',
            delete: propertyName,
            update: true
        };
        return this.put({
            path: 'cmm/{modelName}/aspects/{aspectName}',
            bodyParam: bodyParam,
            pathParams: pathParams,
            queryParams: queryParams
        });
    };
    CustomModelApi.prototype.deleteCustomTypeProperty = function (modelName, typeName, propertyName) {
        throwIfNotDefined(modelName, 'modelName');
        throwIfNotDefined(typeName, 'typeName');
        throwIfNotDefined(propertyName, 'propertyName');
        var bodyParam = {
            'name': typeName
        };
        var pathParams = {
            modelName: modelName,
            typeName: typeName
        };
        var queryParams = {
            select: 'props',
            delete: propertyName,
            update: true
        };
        return this.put({
            path: 'cmm/{modelName}/types/{typeName}',
            bodyParam: bodyParam,
            pathParams: pathParams,
            queryParams: queryParams
        });
    };
    return CustomModelApi;
}(BaseApi));
export { CustomModelApi };
//# sourceMappingURL=../../../../../../src/api/content-custom-api/api/customModel.api.js.map