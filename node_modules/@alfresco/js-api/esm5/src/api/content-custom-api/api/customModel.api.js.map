{"version":3,"file":"customModel.api.js","sourceRoot":"","sources":["customModel.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { PaginatedList, PaginatedEntries } from '../model/pagination';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\nexport interface CustomModel {\n    name: string;\n    namespacePrefix: string;\n    description: string;\n    author: string;\n    namespaceUri: string;\n    status: 'ACTIVE' | 'DRAFT';\n}\n\nexport interface CustomType {\n    name?: string;\n    parentName?: string;\n    prefixedName?: string;\n    description?: string;\n    properties?: CustomModelProperty[];\n    title?: string;\n}\n\nexport interface CustomAspect {\n    description?: string;\n    name?: string;\n    parentName?: string;\n    prefixedName?: string;\n    properties?: CustomModelProperty[];\n    title?: string;\n}\n\nexport interface CustomModelProperty {\n    name?: string;\n    prefixedName?: string;\n    title?: string;\n    dataType?: string;\n    facetable?: 'FALSE' | 'TRUE';\n    indexTokenisationMode?: 'FALSE' | 'TRUE';\n    constraints?: CustomModelPropertyConstraint[];\n    multiValued?: boolean;\n    mandatoryEnforced?: boolean;\n    mandatory?: boolean;\n    indexed?: boolean;\n}\n\nexport interface CustomModelPropertyConstraint {\n    name: string;\n    prefixedName: string;\n    type: string;\n    parameters: any[];\n}\n\n/**\n * Comments service.\n * @module api/CustomModelApi\n * @version 0.1.0\n */\n\n/**\n * Constructs a new CustomModelApi.\n * @alias module:api/CustomModelApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use, default to {@link module:ApiClient#instance}\n * if unspecified.\n */\nexport class CustomModelApi extends BaseApi {\n    private = true;\n\n    /**\n     * create Custom Model\n     */\n    createCustomModel(status: string, description: string, name: string, namespaceUri: string, namespacePrefix: string, author?: string): Promise<{ entry: CustomModel }> {\n        throwIfNotDefined(namespaceUri, 'namespaceUri');\n        throwIfNotDefined(namespacePrefix, 'namespacePrefix');\n\n        const bodyParam = {\n            status,\n            description,\n            name,\n            namespaceUri,\n            namespacePrefix,\n            author\n        };\n\n        return this.post({\n            path: 'cmm',\n            bodyParam\n        });\n    }\n\n    /**\n     * Create a custom type\n     */\n    createCustomType(modelName: string, name: string, parentName?: string, title?: string, description?: string): Promise<{ entry: CustomType }> {\n        throwIfNotDefined(modelName, 'modelName');\n        throwIfNotDefined(name, 'name');\n\n        const bodyParam = {\n            name,\n            parentName,\n            title,\n            description\n        };\n\n        const pathParams = {\n            modelName\n        };\n\n        return this.post({\n            path: 'cmm/{modelName}/types',\n            bodyParam,\n            pathParams\n        });\n    }\n\n    /**\n     * Create a custom aspect\n     */\n    createCustomAspect(modelName: string, name: string, parentName?: string, title?: string, description?: string): Promise<any> {\n        throwIfNotDefined(modelName, 'modelName');\n        throwIfNotDefined(name, 'name');\n\n        const bodyParam = {\n            name,\n            parentName,\n            title,\n            description\n        };\n\n        const pathParams = {\n            modelName\n        };\n\n        return this.post({\n            path: 'cmm/{modelName}/aspects',\n            bodyParam,\n            pathParams\n        });\n    }\n\n    /**\n     * Create a custom constraint\n     */\n    createCustomConstraint(modelName: string, name: string, type: string, parameters?: any): Promise<any> {\n        throwIfNotDefined(modelName, 'modelName');\n        throwIfNotDefined(type, 'type');\n        throwIfNotDefined(name, 'name');\n\n        const bodyParam = {\n            name,\n            type,\n            parameters\n        };\n\n        const pathParams = {\n            modelName\n        };\n\n        return this.post({\n            path: 'cmm/{modelName}/constraints',\n            bodyParam,\n            pathParams\n        });\n    }\n\n    /**\n     * Activate the custom model\n     */\n    activateCustomModel(modelName: string): Promise<{ entry: CustomModel }> {\n        throwIfNotDefined(modelName, 'modelName');\n\n        const bodyParam = {\n            'status': 'ACTIVE'\n        };\n\n        const pathParams = {\n            modelName\n        };\n\n        return this.put({\n            path: 'cmm/{modelName}?select=status',\n            bodyParam,\n            pathParams\n        });\n    }\n\n    /**\n     * Deactivate the custom model\n     */\n    deactivateCustomModel(modelName: string): Promise<{ entry: CustomModel }> {\n        throwIfNotDefined(modelName, 'modelName');\n\n        const bodyParam = {\n            'status': 'DRAFT'\n        };\n\n        const pathParams = {\n            modelName\n        };\n\n        return this.put({\n            path: 'cmm/{modelName}?select=status',\n            bodyParam,\n            pathParams\n        });\n    }\n\n    /**\n     * Add property into an existing aspect\n     */\n    addPropertyToAspect(modelName: string, aspectName: string, properties?: CustomModelProperty[]): Promise<CustomAspect> {\n        throwIfNotDefined(modelName, 'modelName');\n        throwIfNotDefined(aspectName, 'aspectName');\n\n        const bodyParam = {\n            'name': aspectName,\n            properties\n        };\n\n        const pathParams = {\n            modelName,\n            aspectName\n        };\n\n        return this.put({\n            path: 'cmm/{modelName}/aspects/{aspectName}?select=props',\n            bodyParam,\n            pathParams\n        });\n    }\n\n    /**\n     * Add Property into an existing type\n     */\n    addPropertyToType(modelName: string, typeName: string, properties?: CustomModelProperty[]): Promise<CustomType> {\n        throwIfNotDefined(modelName, 'modelName');\n        throwIfNotDefined(typeName, 'typeName');\n\n        const bodyParam = {\n            'name': typeName,\n            properties\n        };\n\n        const pathParams = {\n            modelName,\n            typeName\n        };\n\n        return this.put({\n            path: 'cmm/{modelName}/types/{typeName}?select=props',\n            bodyParam,\n            pathParams\n        });\n    }\n\n    /**\n     * Edit an existing custom model\n     */\n    updateCustomModel(modelName: string, description?: string, namespaceUri?: string, namespacePrefix?: string, author?: string): Promise<any> {\n        throwIfNotDefined(modelName, 'modelName');\n\n        const bodyParam = {\n            'name': modelName,\n            description,\n            namespaceUri,\n            namespacePrefix,\n            author\n        };\n\n        const pathParams = {\n            modelName\n        };\n\n        return this.put({\n            path: 'cmm/{modelName}',\n            bodyParam,\n            pathParams\n        });\n    }\n\n    /**\n     * Edit an existing custom model type\n     */\n    updateCustomType(modelName: string, typeName: string, description?: string, parentName?: string, title?: string): Promise<any> {\n        throwIfNotDefined(modelName, 'modelName');\n        throwIfNotDefined(typeName, 'typeName');\n\n        const bodyParam = {\n            'name': typeName,\n            parentName,\n            title,\n            description\n        };\n\n        const pathParams = {\n            modelName,\n            typeName\n        };\n\n        return this.put({\n            path: 'cmm/{modelName}/types/{typeName}',\n            bodyParam,\n            pathParams\n        });\n    }\n\n    /**\n     * Edit an existing custom model aspect\n     */\n    updateCustomAspect(modelName: string, aspectName: string, description?: string, parentName?: string, title?: string): Promise<any> {\n        throwIfNotDefined(modelName, 'modelName');\n        throwIfNotDefined(aspectName, 'aspectName');\n\n        const bodyParam = {\n            'name': aspectName,\n            parentName,\n            title,\n            description\n        };\n\n        const pathParams = {\n            modelName,\n            aspectName\n        };\n\n        return this.put({\n            path: 'cmm/{modelName}/aspects/{aspectName}',\n            bodyParam,\n            pathParams\n        });\n    }\n\n    /**\n     * Get all custom models\n     */\n    getAllCustomModel(): Promise<PaginatedEntries<CustomModel>> {\n        return this.get({\n            path: 'cmm'\n        });\n    }\n\n    /**\n     * Get custom model\n     */\n    getCustomModel(modelName: string, queryParams?: any): Promise<{ entry: CustomModel }> {\n        throwIfNotDefined(modelName, 'modelName');\n\n        const pathParams = {\n            modelName\n        };\n\n        return this.get({\n            path: 'cmm/{modelName}',\n            pathParams,\n            queryParams\n        });\n    }\n\n    /**\n     * Get all custom model types\n     */\n    getAllCustomType(modelName: string): Promise<PaginatedList<CustomType>> {\n        throwIfNotDefined(modelName, 'modelName');\n\n        const pathParams = {\n            modelName\n        };\n\n        return this.get({\n            path: 'cmm/{modelName}/types',\n            pathParams\n        });\n    }\n\n    /**\n     * Get custom model type\n     */\n    getCustomType(modelName: string, typeName?: string, queryParams?: any): Promise<{ entry: CustomType }> {\n        throwIfNotDefined(modelName, 'modelName');\n        throwIfNotDefined(typeName, 'typeName');\n\n        const pathParams = {\n            modelName,\n            typeName\n        };\n\n        return this.get({\n            path: 'cmm/{modelName}/types/{typeName}',\n            pathParams,\n            queryParams\n        });\n    }\n\n    /**\n     * Get all custom model aspect\n     */\n    getAllCustomAspect(modelName: string, queryParams?: any): Promise<PaginatedList<CustomAspect>> {\n        throwIfNotDefined(modelName, 'modelName');\n\n        const pathParams = {\n            modelName\n        };\n\n        return this.get({\n            path: 'cmm/{modelName}/aspects',\n            pathParams,\n            queryParams\n        });\n    }\n\n    /**\n     * Get custom model aspect\n     */\n    getCustomAspect(modelName: string, aspectName: string, queryParams?: any): Promise<{ entry: CustomAspect }> {\n        throwIfNotDefined(modelName, 'modelName');\n        throwIfNotDefined(aspectName, 'aspectName');\n\n        const pathParams = {\n            modelName,\n            aspectName\n        };\n\n        return this.get({\n            path: 'cmm/{modelName}/aspects/{aspectName}',\n            pathParams,\n            queryParams\n        });\n    }\n\n    /**\n     * Get all custom model defined constraints\n     */\n    getAllCustomConstraints(modelName: string, queryParams?: any): Promise<any> {\n        throwIfNotDefined(modelName, 'modelName');\n\n        const pathParams = {\n            modelName\n        };\n\n        return this.get({\n            path: 'cmm/{modelName}/constraints',\n            pathParams,\n            queryParams\n        });\n    }\n\n    /**\n     * Get custom model defined constraints\n     */\n    getCustomConstraints(modelName: string, constraintName: string, queryParams?: any): Promise<any> {\n        throwIfNotDefined(modelName, 'modelName');\n        throwIfNotDefined(constraintName, 'constraintName');\n\n        const pathParams = {\n            modelName,\n            constraintName\n        };\n\n        return this.get({\n            path: 'cmm/{modelName}/constraints{constraintName}',\n            pathParams,\n            queryParams\n        });\n    }\n\n    /**\n     * Delete the given custom model\n     */\n    deleteCustomModel(modelName: string): Promise<any> {\n        throwIfNotDefined(modelName, 'modelName');\n\n        const pathParams = {\n            modelName\n        };\n\n        return this.delete({\n            path: 'cmm/{modelName}',\n            pathParams\n        });\n    }\n\n    /**\n     * Delete the given custom type\n     */\n    deleteCustomType(modelName: string, typeName: string): Promise<any> {\n        throwIfNotDefined(modelName, 'modelName');\n        throwIfNotDefined(typeName, 'typeName');\n\n        const pathParams = {\n            modelName,\n            typeName\n        };\n\n        return this.delete({\n            path: 'cmm/{modelName}/types/{typeName}',\n            pathParams\n        });\n    }\n\n    deleteCustomAspect(modelName: string, aspectName: string): Promise<any> {\n        throwIfNotDefined(modelName, 'modelName');\n        throwIfNotDefined(aspectName, 'aspectName');\n\n        const pathParams = {\n            modelName,\n            aspectName\n        };\n\n        return this.delete({\n            path: 'cmm/{modelName}/aspects/{aspectName}',\n            pathParams\n        });\n    }\n\n    deleteCustomAspectProperty(modelName: string, aspectName: string, propertyName: string): Promise<{ entry: CustomAspect }> {\n        throwIfNotDefined(modelName, 'modelName');\n        throwIfNotDefined(aspectName, 'aspectName');\n        throwIfNotDefined(propertyName, 'propertyName');\n\n        const bodyParam = {\n            'name': aspectName\n        };\n\n        const pathParams = {\n            modelName,\n            aspectName\n        };\n\n        const queryParams = {\n            select: 'props',\n            delete: propertyName,\n            update: true\n        };\n\n        return this.put({\n            path: 'cmm/{modelName}/aspects/{aspectName}',\n            bodyParam,\n            pathParams,\n            queryParams\n        });\n    }\n\n    deleteCustomTypeProperty(modelName: string, typeName: string, propertyName: string): Promise<{ entry: CustomType }> {\n        throwIfNotDefined(modelName, 'modelName');\n        throwIfNotDefined(typeName, 'typeName');\n        throwIfNotDefined(propertyName, 'propertyName');\n\n        const bodyParam = {\n            'name': typeName\n        };\n\n        const pathParams = {\n            modelName,\n            typeName\n        };\n\n        const queryParams = {\n            select: 'props',\n            delete: propertyName,\n            update: true\n        };\n\n        return this.put({\n            path: 'cmm/{modelName}/types/{typeName}',\n            bodyParam,\n            pathParams,\n            queryParams\n        });\n    }\n\n}\n"]}