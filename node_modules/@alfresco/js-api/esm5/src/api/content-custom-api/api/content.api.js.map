{"version":3,"file":"content.api.js","sourceRoot":"","sources":["content.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { BaseApi } from './base.api';\n\nexport class ContentApi extends BaseApi {\n\n    /**\n     * Get thumbnail URL for the given nodeId\n     *\n     * @param nodeId The ID of the document node\n     * @param [attachment=false] Retrieve content as an attachment for download\n     * @param [ticket] Custom ticket to use for authentication\n     * @returns The URL address pointing to the content.\n     */\n    getDocumentThumbnailUrl(nodeId: string, attachment?: boolean, ticket?: string): string {\n        return this.apiClient.basePath + '/nodes/' + nodeId +\n            '/renditions/doclib/content' +\n            '?attachment=' + (attachment ? 'true' : 'false') +\n            this.apiClient.getAlfTicket(ticket);\n    }\n\n    /**\n     * Get preview URL for the given nodeId\n     *\n     * @param nodeId The ID of the document node\n     * @param  [attachment=false] Retrieve content as an attachment for download\n     * @param [ticket] Custom ticket to use for authentication\n     * @returns  The URL address pointing to the content.\n     */\n    getDocumentPreviewUrl(nodeId: string, attachment?: boolean, ticket?: string): string {\n        return this.apiClient.basePath + '/nodes/' + nodeId +\n            '/renditions/imgpreview/content' +\n            '?attachment=' + (attachment ? 'true' : 'false') +\n            this.apiClient.getAlfTicket(ticket);\n    }\n\n    /**\n     * Get content URL for the given nodeId\n     *\n     * @param  nodeId The ID of the document node\n     * @param  [attachment=false] Retrieve content as an attachment for download\n     * @param  [ticket] Custom ticket to use for authentication\n     * @returns The URL address pointing to the content.\n     */\n    getContentUrl(nodeId: string, attachment?: boolean, ticket?: string): string {\n        return this.apiClient.basePath + '/nodes/' + nodeId +\n            '/content' +\n            '?attachment=' + (attachment ? 'true' : 'false') +\n            this.apiClient.getAlfTicket(ticket);\n    }\n\n    /**\n     * Get rendition URL for the given nodeId\n     *\n     * @param nodeId The ID of the document node\n     * @param encoding of the document\n     * @param [attachment=false] retrieve content as an attachment for download\n     * @param [ticket] Custom ticket to use for authentication\n     * @returns The URL address pointing to the content.\n     */\n    getRenditionUrl(nodeId: string, encoding: string, attachment?: boolean, ticket?: string): string {\n        return this.apiClient.basePath + '/nodes/' + nodeId +\n            '/renditions/' + encoding + '/content' +\n            '?attachment=' + (attachment ? 'true' : 'false') +\n            this.apiClient.getAlfTicket(ticket);\n    }\n\n    /**\n     * Get version's rendition URL for the given nodeId\n     *\n     * @param nodeId The ID of the document node\n     * @param versionId The ID of the version\n     * @param encoding of the document\n     * @param [attachment=false] retrieve content as an attachment for download\n     * @param [ticket] Custom ticket to use for authentication\n     * @returns The URL address pointing to the content.\n     */\n    getVersionRenditionUrl(nodeId: string, versionId: string, encoding: string, attachment?: boolean, ticket?: string): string {\n        return this.apiClient.basePath + '/nodes/' + nodeId + '/versions/' + versionId +\n            '/renditions/' + encoding + '/content' +\n            '?attachment=' + (attachment ? 'true' : 'false') +\n            this.apiClient.getAlfTicket(ticket);\n    }\n\n    /**\n     * Get content URL for the given nodeId and versionId\n     *\n     * @param  nodeId The ID of the document node\n     * @param versionId The ID of the version\n     * @param  [attachment=false] Retrieve content as an attachment for download\n     * @param  [ticket] Custom ticket to use for authentication\n     * @returns The URL address pointing to the content.\n     */\n    getVersionContentUrl(nodeId: string, versionId: string, attachment?: boolean, ticket?: string): string {\n        return this.apiClient.basePath + '/nodes/' + nodeId +\n            '/versions/' + versionId + '/content' +\n            '?attachment=' + (attachment ? 'true' : 'false') +\n            this.apiClient.getAlfTicket(ticket);\n    }\n\n    /**\n     * Get content url for the given shared link id\n     *\n     * @param linkId - The ID of the shared link\n     * @param  [attachment=false] Retrieve content as an attachment for download\n     * @returns  The URL address pointing to the content.\n     */\n    getSharedLinkContentUrl(linkId: string, attachment?: boolean): string {\n        return this.apiClient.basePath + '/shared-links/' + linkId +\n            '/content' +\n            '?attachment=' + (attachment ? 'true' : 'false');\n    }\n\n    /**\n     * Gets the rendition content for file with shared link identifier sharedId.\n     *\n     * @param  sharedId - The identifier of a shared link to a file.\n     * @param  renditionId - The name of a thumbnail rendition, for example doclib, or pdf.\n     * @param [attachment=false] Retrieve content as an attachment for download\n     * @returns The URL address pointing to the content.\n     */\n    getSharedLinkRenditionUrl(sharedId: string, renditionId: string, attachment?: boolean): string {\n        return this.apiClient.basePath + '/shared-links/' + sharedId +\n            '/renditions/' + renditionId + '/content' +\n            '?attachment=' + (attachment ? 'true' : 'false');\n    }\n}\n"]}