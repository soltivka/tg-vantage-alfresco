/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { __extends } from "tslib";
import { ResultListDataRepresentationUserProcessInstanceFilterRepresentation } from '../model/resultListDataRepresentationUserProcessInstanceFilterRepresentation';
import { ResultListDataRepresentationUserTaskFilterRepresentation } from '../model/resultListDataRepresentationUserTaskFilterRepresentation';
import { UserProcessInstanceFilterRepresentation } from '../model/userProcessInstanceFilterRepresentation';
import { UserTaskFilterRepresentation } from '../model/userTaskFilterRepresentation';
import { BaseApi } from './base.api';
import { throwIfNotDefined } from '../../../assert';
var UserFiltersApi = (function (_super) {
    __extends(UserFiltersApi, _super);
    function UserFiltersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UserFiltersApi.prototype.createUserProcessInstanceFilter = function (userProcessInstanceFilterRepresentation) {
        throwIfNotDefined(userProcessInstanceFilterRepresentation, 'userProcessInstanceFilterRepresentation');
        var postBody = userProcessInstanceFilterRepresentation;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserProcessInstanceFilterRepresentation);
    };
    UserFiltersApi.prototype.createUserTaskFilter = function (userTaskFilterRepresentation) {
        throwIfNotDefined(userTaskFilterRepresentation, 'userTaskFilterRepresentation');
        var postBody = userTaskFilterRepresentation;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserTaskFilterRepresentation);
    };
    UserFiltersApi.prototype.deleteUserProcessInstanceFilter = function (userFilterId) {
        throwIfNotDefined(userFilterId, 'userFilterId');
        var postBody = null;
        var pathParams = {
            'userFilterId': userFilterId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes/{userFilterId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    UserFiltersApi.prototype.deleteUserTaskFilter = function (userFilterId) {
        throwIfNotDefined(userFilterId, 'userFilterId');
        var postBody = null;
        var pathParams = {
            'userFilterId': userFilterId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks/{userFilterId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    UserFiltersApi.prototype.getUserProcessInstanceFilter = function (userFilterId) {
        throwIfNotDefined(userFilterId, 'userFilterId');
        var postBody = null;
        var pathParams = {
            'userFilterId': userFilterId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes/{userFilterId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserProcessInstanceFilterRepresentation);
    };
    UserFiltersApi.prototype.getUserProcessInstanceFilters = function (opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
            'appId': opts['appId']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationUserProcessInstanceFilterRepresentation);
    };
    UserFiltersApi.prototype.getUserTaskFilter = function (userFilterId) {
        throwIfNotDefined(userFilterId, 'userFilterId');
        var postBody = null;
        var pathParams = {
            'userFilterId': userFilterId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks/{userFilterId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserTaskFilterRepresentation);
    };
    UserFiltersApi.prototype.getUserTaskFilters = function (opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
            'appId': opts['appId']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationUserTaskFilterRepresentation);
    };
    UserFiltersApi.prototype.orderUserProcessInstanceFilters = function (filterOrderRepresentation) {
        throwIfNotDefined(filterOrderRepresentation, 'filterOrderRepresentation');
        var postBody = filterOrderRepresentation;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    UserFiltersApi.prototype.orderUserTaskFilters = function (filterOrderRepresentation) {
        throwIfNotDefined(filterOrderRepresentation, 'filterOrderRepresentation');
        var postBody = filterOrderRepresentation;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    UserFiltersApi.prototype.updateUserProcessInstanceFilter = function (userFilterId, userProcessInstanceFilterRepresentation) {
        throwIfNotDefined(userFilterId, 'userFilterId');
        throwIfNotDefined(userProcessInstanceFilterRepresentation, 'userProcessInstanceFilterRepresentation');
        var postBody = userProcessInstanceFilterRepresentation;
        var pathParams = {
            'userFilterId': userFilterId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes/{userFilterId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserProcessInstanceFilterRepresentation);
    };
    UserFiltersApi.prototype.updateUserTaskFilter = function (userFilterId, userTaskFilterRepresentation) {
        throwIfNotDefined(userFilterId, 'userFilterId');
        throwIfNotDefined(userTaskFilterRepresentation, 'userTaskFilterRepresentation');
        var postBody = userTaskFilterRepresentation;
        var pathParams = {
            'userFilterId': userFilterId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks/{userFilterId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserTaskFilterRepresentation);
    };
    return UserFiltersApi;
}(BaseApi));
export { UserFiltersApi };
//# sourceMappingURL=../../../../../../src/api/activiti-rest-api/api/userFilters.api.js.map