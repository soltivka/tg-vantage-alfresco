{"version":3,"file":"tasks.api.js","sourceRoot":"","sources":["tasks.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { HistoricTaskInstanceQueryRepresentation } from '../model/historicTaskInstanceQueryRepresentation';\nimport { IdentityLinkRepresentation } from '../model/identityLinkRepresentation';\nimport { ResultListDataRepresentationTaskRepresentation } from '../model/resultListDataRepresentationTaskRepresentation';\nimport { TaskAuditInfoRepresentation } from '../model/taskAuditInfoRepresentation';\nimport { TaskFilterRequestRepresentation } from '../model/taskFilterRequestRepresentation';\nimport { TaskQueryRepresentation } from '../model/taskQueryRepresentation';\nimport { TaskRepresentation } from '../model/taskRepresentation';\nimport { TaskUpdateRepresentation } from '../model/taskUpdateRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Tasks service.\n* @module TasksApi\n*/\nexport class TasksApi extends BaseApi {\n    /**\n    * List the users and groups involved with a task\n    *\n    *\n    *\n    * @param taskId taskId\n    * @param identityLinkRepresentation identityLinkRepresentation\n    * @return Promise<IdentityLinkRepresentation>\n    */\n    createIdentityLink(taskId: string, identityLinkRepresentation: IdentityLinkRepresentation): Promise<IdentityLinkRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(identityLinkRepresentation, 'identityLinkRepresentation');\n\n        let postBody = identityLinkRepresentation;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/identitylinks', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, IdentityLinkRepresentation);\n    }\n    /**\n        * Create a standalone task\n        *\n        * A standalone task is one which is not associated with any process instance.\n        *\n        * @param taskRepresentation taskRepresentation\n        * @return Promise<TaskRepresentation>\n        */\n    createNewTask(taskRepresentation: TaskRepresentation): Promise<TaskRepresentation> {\n        throwIfNotDefined(taskRepresentation, 'taskRepresentation');\n\n        let postBody = taskRepresentation;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TaskRepresentation);\n    }\n    /**\n        * Remove a user or group involvement from a task\n        *\n        *\n        *\n        * @param taskId taskId\n        * @param family family\n        * @param identityId identityId\n        * @param type type\n        * @return Promise<{}>\n        */\n    deleteIdentityLink(taskId: string, family: string, identityId: string, type: string): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(family, 'family');\n        throwIfNotDefined(identityId, 'identityId');\n        throwIfNotDefined(type, 'type');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId, 'family': family, 'identityId': identityId, 'type': type\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Delete a task\n        *\n        *\n        *\n        * @param taskId taskId\n        * @return Promise<{}>\n        */\n    deleteTask(taskId: string): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Filter a list of tasks\n        *\n        *\n        *\n        * @param tasksFilter tasksFilter\n        * @return Promise<ResultListDataRepresentationTaskRepresentation>\n        */\n    filterTasks(tasksFilter: TaskFilterRequestRepresentation): Promise<ResultListDataRepresentationTaskRepresentation> {\n        throwIfNotDefined(tasksFilter, 'tasksFilter');\n\n        let postBody = tasksFilter;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/filter', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);\n    }\n    /**\n        * Get a user or group involvement with a task\n        *\n        *\n        *\n        * @param taskId taskId\n        * @param family family\n        * @param identityId identityId\n        * @param type type\n        * @return Promise<IdentityLinkRepresentation>\n        */\n    getIdentityLinkType(taskId: string, family: string, identityId: string, type: string): Promise<IdentityLinkRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(family, 'family');\n        throwIfNotDefined(identityId, 'identityId');\n        throwIfNotDefined(type, 'type');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId, 'family': family, 'identityId': identityId, 'type': type\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, IdentityLinkRepresentation);\n    }\n    /**\n        * List either the users or groups involved with a process instance\n        *\n        *\n        *\n        * @param taskId taskId\n        * @param family family\n        * @return Promise<IdentityLinkRepresentation>\n        */\n    getIdentityLinksForFamily(taskId: string, family: string): Promise<IdentityLinkRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(family, 'family');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId, 'family': family\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/identitylinks/{family}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, IdentityLinkRepresentation);\n    }\n    /**\n        * getIdentityLinks\n        *\n        *\n        *\n        * @param taskId taskId\n        * @return Promise<IdentityLinkRepresentation>\n        */\n    getIdentityLinks(taskId: string): Promise<IdentityLinkRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/identitylinks', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, IdentityLinkRepresentation);\n    }\n    /**\n        * Get the audit log for a task\n        *\n        *\n        *\n        * @param taskId taskId\n        * @return Promise<TaskAuditInfoRepresentation>\n        */\n    getTaskAuditLog(taskId: string): Promise<TaskAuditInfoRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/audit', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TaskAuditInfoRepresentation);\n    }\n\n    /**\n     * Get the audit log for a task\n     * @param taskId taskId\n     * @return Promise<Blob> task audit in blob\n     */\n    getTaskAuditPdf(taskId: string): Promise<Blob> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {};\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n        let responseType = 'blob';\n\n        // Todo: update url once ACTIVITI-4191 fixed\n        return this.apiClient.callApi(\n            'app/rest/tasks/{taskId}/audit', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, responseType);\n    }\n\n    /**\n        * Get a task\n        *\n        *\n        *\n        * @param taskId taskId\n        * @return Promise<TaskRepresentation>\n        */\n    getTask(taskId: string): Promise<TaskRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TaskRepresentation);\n    }\n    /**\n        * Query historic tasks\n        *\n        *\n        *\n        * @param queryRequest queryRequest\n        * @return Promise<ResultListDataRepresentationTaskRepresentation>\n        */\n    listHistoricTasks(queryRequest: HistoricTaskInstanceQueryRepresentation): Promise<ResultListDataRepresentationTaskRepresentation> {\n        throwIfNotDefined(queryRequest, 'queryRequest');\n\n        let postBody = queryRequest;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/historic-tasks/query', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);\n    }\n    /**\n        * List tasks\n        *\n        *\n        *\n        * @param tasksQuery tasksQuery\n        * @return Promise<ResultListDataRepresentationTaskRepresentation>\n        */\n    listTasks(tasksQuery: TaskQueryRepresentation): Promise<ResultListDataRepresentationTaskRepresentation> {\n        throwIfNotDefined(tasksQuery, 'tasksQuery');\n\n        let postBody = tasksQuery;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/query', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);\n    }\n    /**\n        * Update a task\n        *\n        * You can edit only name, description and dueDate (ISO 8601 string).\n        *\n        * @param taskId taskId\n        * @param updated updated\n        * @return Promise<TaskRepresentation>\n        */\n    updateTask(taskId: string, updated: TaskUpdateRepresentation): Promise<TaskRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(updated, 'updated');\n\n        let postBody = updated;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TaskRepresentation);\n    }\n\n}\n"]}