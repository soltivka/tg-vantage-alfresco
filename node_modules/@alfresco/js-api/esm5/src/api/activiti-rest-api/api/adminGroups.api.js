/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { __extends } from "tslib";
import { AbstractGroupRepresentation } from '../model/abstractGroupRepresentation';
import { GroupRepresentation } from '../model/groupRepresentation';
import { LightGroupRepresentation } from '../model/lightGroupRepresentation';
import { ResultListDataRepresentationLightUserRepresentation } from '../model/resultListDataRepresentationLightUserRepresentation';
import { BaseApi } from './base.api';
import { throwIfNotDefined } from '../../../assert';
var AdminGroupsApi = (function (_super) {
    __extends(AdminGroupsApi, _super);
    function AdminGroupsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AdminGroupsApi.prototype.activate = function (groupId) {
        throwIfNotDefined(groupId, 'groupId');
        var postBody = null;
        var pathParams = {
            'groupId': groupId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/action/activate', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    AdminGroupsApi.prototype.addAllUsersToGroup = function (groupId) {
        throwIfNotDefined(groupId, 'groupId');
        var postBody = null;
        var pathParams = {
            'groupId': groupId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/add-all-users', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    AdminGroupsApi.prototype.addGroupCapabilities = function (groupId, addGroupCapabilitiesRepresentation) {
        throwIfNotDefined(groupId, 'groupId');
        throwIfNotDefined(addGroupCapabilitiesRepresentation, 'addGroupCapabilitiesRepresentation');
        var postBody = addGroupCapabilitiesRepresentation;
        var pathParams = {
            'groupId': groupId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/capabilities', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    AdminGroupsApi.prototype.addGroupMember = function (groupId, userId) {
        throwIfNotDefined(groupId, 'groupId');
        throwIfNotDefined(userId, 'userId');
        var postBody = null;
        var pathParams = {
            'groupId': groupId, 'userId': userId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/members/{userId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    AdminGroupsApi.prototype.addRelatedGroup = function (groupId, relatedGroupId, type) {
        throwIfNotDefined(groupId, 'groupId');
        throwIfNotDefined(relatedGroupId, 'relatedGroupId');
        throwIfNotDefined(type, 'type');
        var postBody = null;
        var pathParams = {
            'groupId': groupId, 'relatedGroupId': relatedGroupId
        };
        var queryParams = {
            'type': type
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/related-groups/{relatedGroupId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    AdminGroupsApi.prototype.createNewGroup = function (groupRepresentation) {
        throwIfNotDefined(groupRepresentation, 'groupRepresentation');
        var postBody = groupRepresentation;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupRepresentation);
    };
    AdminGroupsApi.prototype.deleteGroupCapability = function (groupId, groupCapabilityId) {
        throwIfNotDefined(groupId, 'groupId');
        throwIfNotDefined(groupCapabilityId, 'groupCapabilityId');
        var postBody = null;
        var pathParams = {
            'groupId': groupId, 'groupCapabilityId': groupCapabilityId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/capabilities/{groupCapabilityId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    AdminGroupsApi.prototype.deleteGroupMember = function (groupId, userId) {
        throwIfNotDefined(groupId, 'groupId');
        throwIfNotDefined(userId, 'userId');
        var postBody = null;
        var pathParams = {
            'groupId': groupId, 'userId': userId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/members/{userId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    AdminGroupsApi.prototype.deleteGroup = function (groupId) {
        throwIfNotDefined(groupId, 'groupId');
        var postBody = null;
        var pathParams = {
            'groupId': groupId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    AdminGroupsApi.prototype.deleteRelatedGroup = function (groupId, relatedGroupId) {
        throwIfNotDefined(groupId, 'groupId');
        throwIfNotDefined(relatedGroupId, 'relatedGroupId');
        var postBody = null;
        var pathParams = {
            'groupId': groupId, 'relatedGroupId': relatedGroupId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/related-groups/{relatedGroupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    AdminGroupsApi.prototype.getCapabilities = function (groupId) {
        throwIfNotDefined(groupId, 'groupId');
        var postBody = null;
        var pathParams = {
            'groupId': groupId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/potential-capabilities', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    AdminGroupsApi.prototype.getGroupUsers = function (groupId, opts) {
        throwIfNotDefined(groupId, 'groupId');
        opts = opts || {};
        var postBody = null;
        var pathParams = {
            'groupId': groupId
        };
        var queryParams = {
            'filter': opts['filter'],
            'page': opts['page'],
            'pageSize': opts['pageSize']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/users', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationLightUserRepresentation);
    };
    AdminGroupsApi.prototype.getGroup = function (groupId, opts) {
        throwIfNotDefined(groupId, 'groupId');
        opts = opts || {};
        var postBody = null;
        var pathParams = {
            'groupId': groupId
        };
        var queryParams = {
            'includeAllUsers': opts['includeAllUsers'],
            'summary': opts['summary']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AbstractGroupRepresentation);
    };
    AdminGroupsApi.prototype.getGroups = function (opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
            'tenantId': opts['tenantId'],
            'functional': opts['functional'],
            'summary': opts['summary']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, LightGroupRepresentation);
    };
    AdminGroupsApi.prototype.getRelatedGroups = function (groupId) {
        throwIfNotDefined(groupId, 'groupId');
        var postBody = null;
        var pathParams = {
            'groupId': groupId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/related-groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, LightGroupRepresentation);
    };
    AdminGroupsApi.prototype.updateGroup = function (groupId, groupRepresentation) {
        throwIfNotDefined(groupId, 'groupId');
        throwIfNotDefined(groupRepresentation, 'groupRepresentation');
        var postBody = groupRepresentation;
        var pathParams = {
            'groupId': groupId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupRepresentation);
    };
    return AdminGroupsApi;
}(BaseApi));
export { AdminGroupsApi };
//# sourceMappingURL=../../../../../../src/api/activiti-rest-api/api/adminGroups.api.js.map