{"version":3,"file":"formModels.api.js","sourceRoot":"","sources":["formModels.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { FormDefinitionRepresentation } from '../model/formDefinitionRepresentation';\nimport { FormRepresentation } from '../model/formRepresentation';\nimport { FormSaveRepresentation } from '../model/formSaveRepresentation';\nimport { ResultListDataRepresentationFormRepresentation } from '../model/resultListDataRepresentationFormRepresentation';\nimport { ResultListDataRepresentationRuntimeFormRepresentation } from '../model/resultListDataRepresentationRuntimeFormRepresentation';\nimport { ValidationErrorRepresentation } from '../model/validationErrorRepresentation';\nimport { BaseApi } from './base.api';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n * Formmodels service.\n * @module FormmodelsApi\n */\nexport class FormModelsApi extends BaseApi {\n    /**\n     * Get form content\n     *\n     *\n     *\n     * @param formId formId\n     * @return Promise<FormDefinitionRepresentation>\n     */\n    getFormEditorJson(formId: number): Promise<FormDefinitionRepresentation> {\n        throwIfNotDefined(formId, 'formId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'formId': formId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/forms/{formId}/editorJson', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, FormDefinitionRepresentation);\n    }\n\n    /**\n     * Get form history\n     *\n     *\n     *\n     * @param formId formId\n     * @param formHistoryId formHistoryId\n     * @return Promise<FormRepresentation>\n     */\n    getFormHistory(formId: number, formHistoryId: number): Promise<FormRepresentation> {\n        throwIfNotDefined(formId, 'formId');\n        throwIfNotDefined(formHistoryId, 'formHistoryId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'formId': formId, 'formHistoryId': formHistoryId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/editor/form-models/{formId}/history/{formHistoryId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, FormRepresentation);\n    }\n\n    /**\n     * Get a form model\n     *\n     *\n     *\n     * @param formId formId\n     * @return Promise<FormRepresentation>\n     */\n    getForm(formId: number): Promise<FormRepresentation> {\n        throwIfNotDefined(formId, 'formId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'formId': formId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/editor/form-models/{formId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, FormRepresentation);\n    }\n\n    /**\n     * Get forms\n     *\n     *\n     *\n     * @param formId formId\n     * @return Promise<FormRepresentation>\n     */\n    getForms(input: string[] | { [key: string]: any }): Promise<FormRepresentation | ResultListDataRepresentationFormRepresentation | ResultListDataRepresentationRuntimeFormRepresentation> {\n        let postBody = null;\n        let pathParams = {};\n        let headerParams = {};\n        let formParams = {};\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        if (typeof input === 'string') {\n            let queryParams = {\n                'formId': buildCollectionParam(input, 'multi')\n            };\n\n            return this.apiClient.callApi(\n                '/api/enterprise/editor/form-models/values', 'GET',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                contentTypes, accepts, FormRepresentation);\n        } else if (typeof input === 'object') {\n            input = input || {};\n            let queryParams = {\n                'nameLike': input['nameLike'],\n                'appId': input['appId'],\n                'tenantId': input['tenantId'],\n                'start': input['start'],\n                'sort': input['sort'],\n                'order': input['order'],\n                'size': input['size']\n            };\n\n            return this.apiClient.callApi(\n                '/api/enterprise/forms', 'GET',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                contentTypes, accepts, ResultListDataRepresentationRuntimeFormRepresentation);\n        } else {\n            let queryParams = {};\n\n            return this.apiClient.callApi(\n                '/api/enterprise/editor/form-models', 'GET',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                contentTypes, accepts, ResultListDataRepresentationFormRepresentation);\n        }\n    }\n\n    /**\n     * Update form model content\n     *\n     *\n     *\n     * @param formId ID of the form to update\n     * @param saveRepresentation saveRepresentation\n     * @return Promise<FormRepresentation>\n     */\n    saveForm(formId: number, saveRepresentation: FormSaveRepresentation): Promise<FormRepresentation> {\n        throwIfNotDefined(formId, 'formId');\n        throwIfNotDefined(saveRepresentation, 'saveRepresentation');\n\n        let postBody = saveRepresentation;\n\n        let pathParams = {\n            'formId': formId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/editor/form-models/{formId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, FormRepresentation);\n    }\n\n    /**\n     * Validate form model content\n     *\n     * The model content to be validated must be specified in the POST body\n     *\n     * @param formId formId\n     * @param saveRepresentation saveRepresentation\n     * @return Promise<ValidationErrorRepresentation>\n     */\n    validateModel(formId: number, saveRepresentation: FormSaveRepresentation): Promise<ValidationErrorRepresentation> {\n        throwIfNotDefined(formId, 'formId');\n        throwIfNotDefined(saveRepresentation, 'saveRepresentation');\n\n        let postBody = saveRepresentation;\n\n        let pathParams = {\n            'formId': formId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/editor/form-models/{formId}/validate', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ValidationErrorRepresentation);\n    }\n\n}\n"]}