{"version":3,"file":"modelsHistory.api.js","sourceRoot":"","sources":["modelsHistory.api.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;;AAEF,OAAO,EAAE,mBAAmB,EAAE,MAAM,8BAA8B,CAAC;AACnE,OAAO,EAAE,+CAA+C,EAAE,MAAM,0DAA0D,CAAC;AAC3H,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AAMpD;IAAsC,oCAAO;IAA7C;;IA4EA,CAAC;IAjEG,oDAAyB,GAAzB,UAA0B,OAAe,EAAE,IAAU;QACjD,iBAAiB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAEtC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,SAAS,EAAE,OAAO;SACrB,CAAC;QAEF,IAAI,WAAW,GAAG;YACd,sBAAsB,EAAE,IAAI,CAAC,sBAAsB,CAAC;SACvD,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,0CAA0C,EAAE,KAAK,EACjD,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,+CAA+C,CAAC,CAAC;IAChF,CAAC;IAUD,iDAAsB,GAAtB,UAAuB,OAAe,EAAE,cAAsB;QAC1D,iBAAiB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACtC,iBAAiB,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QAEpD,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,SAAS,EAAE,OAAO,EAAE,gBAAgB,EAAE,cAAc;SACvD,CAAC;QAEF,IAAI,WAAW,GAAG,EACjB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,2DAA2D,EAAE,KAAK,EAClE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;IAEL,uBAAC;AAAD,CAAC,AA5ED,CAAsC,OAAO,GA4E5C","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ModelRepresentation } from '../model/modelRepresentation';\nimport { ResultListDataRepresentationModelRepresentation } from '../model/resultListDataRepresentationModelRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Modelshistory service.\n* @module ModelshistoryApi\n*/\nexport class ModelsHistoryApi extends BaseApi {\n    /**\n    * List a model's historic versions\n    *\n    *\n    *\n    * @param modelId modelId\n    * @param opts Optional parameters\n    * @param opts.includeLatestVersion includeLatestVersion\n    * @return Promise<ResultListDataRepresentationModelRepresentation>\n    */\n    getModelHistoryCollection(modelId: number, opts?: any): Promise<ResultListDataRepresentationModelRepresentation> {\n        throwIfNotDefined(modelId, 'modelId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'modelId': modelId\n        };\n\n        let queryParams = {\n            'includeLatestVersion': opts['includeLatestVersion']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/models/{modelId}/history', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationModelRepresentation);\n    }\n    /**\n        * Get a historic version of a model\n        *\n        *\n        *\n        * @param modelId modelId\n        * @param modelHistoryId modelHistoryId\n        * @return Promise<ModelRepresentation>\n        */\n    getProcessModelHistory(modelId: number, modelHistoryId: number): Promise<ModelRepresentation> {\n        throwIfNotDefined(modelId, 'modelId');\n        throwIfNotDefined(modelHistoryId, 'modelHistoryId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'modelId': modelId, 'modelHistoryId': modelHistoryId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/models/{modelId}/history/{modelHistoryId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ModelRepresentation);\n    }\n\n}\n"]}