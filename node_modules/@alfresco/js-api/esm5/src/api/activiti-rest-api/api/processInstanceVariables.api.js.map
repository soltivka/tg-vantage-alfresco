{"version":3,"file":"processInstanceVariables.api.js","sourceRoot":"","sources":["processInstanceVariables.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { } from '../model/';\nimport { RestVariable } from '../model/restVariable';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Processinstancevariables service.\n* @module ProcessinstancevariablesApi\n*/\nexport class ProcessInstanceVariablesApi extends BaseApi {\n    /**\n    * Create or update variables\n    *\n    *\n    *\n    * @param processInstanceId Process instance ID\n    * @param restVariables restVariables\n    * @return Promise<RestVariable>\n    */\n    createOrUpdateProcessInstanceVariables(processInstanceId: string, restVariables: RestVariable[]): Promise<RestVariable[]> {\n        throwIfNotDefined(processInstanceId, 'processInstanceId');\n        throwIfNotDefined(restVariables, 'restVariables');\n\n        let postBody = restVariables;\n\n        let pathParams = {\n            'processInstanceId': processInstanceId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-instances/{processInstanceId}/variables', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Create variables\n        *\n        *\n        *\n        * @param processInstanceId Process instance ID\n        * @param restVariables restVariables\n        * @return Promise<RestVariable>\n        */\n    createProcessInstanceVariables(processInstanceId: string, restVariables: RestVariable[]): Promise<RestVariable[]> {\n        throwIfNotDefined(processInstanceId, 'processInstanceId');\n        throwIfNotDefined(restVariables, 'restVariables');\n\n        let postBody = restVariables;\n\n        let pathParams = {\n            'processInstanceId': processInstanceId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-instances/{processInstanceId}/variables', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Delete a variable\n        *\n        *\n        *\n        * @param processInstanceId processInstanceId\n        * @param variableName variableName\n        * @return Promise<{}>\n        */\n    deleteProcessInstanceVariable(processInstanceId: string, variableName: string): Promise<any> {\n        throwIfNotDefined(processInstanceId, 'processInstanceId');\n        throwIfNotDefined(variableName, 'variableName');\n\n        let postBody = null;\n\n        let pathParams = {\n            'processInstanceId': processInstanceId, 'variableName': variableName\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-instances/{processInstanceId}/variables/{variableName}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Get a variable\n        *\n        *\n        *\n        * @param processInstanceId processInstanceId\n        * @param variableName variableName\n        * @return Promise<RestVariable>\n        */\n    getProcessInstanceVariable(processInstanceId: string, variableName: string): Promise<RestVariable> {\n        throwIfNotDefined(processInstanceId, 'processInstanceId');\n        throwIfNotDefined(variableName, 'variableName');\n\n        let postBody = null;\n\n        let pathParams = {\n            'processInstanceId': processInstanceId, 'variableName': variableName\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-instances/{processInstanceId}/variables/{variableName}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RestVariable);\n    }\n    /**\n        * List variables\n        *\n        *\n        *\n        * @param processInstanceId Process instance ID\n        * @return Promise<RestVariable>\n        */\n    getProcessInstanceVariables(processInstanceId: string): Promise<RestVariable[]> {\n        throwIfNotDefined(processInstanceId, 'processInstanceId');\n\n        let postBody = null;\n        let pathParams = {\n            'processInstanceId': processInstanceId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-instances/{processInstanceId}/variables', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Update a variable\n        *\n        *\n        *\n        * @param processInstanceId processInstanceId\n        * @param variableName variableName\n        * @param restVariable restVariable\n        * @return Promise<RestVariable>\n        */\n    updateProcessInstanceVariable(processInstanceId: string, variableName: string, restVariable: RestVariable): Promise<RestVariable> {\n        throwIfNotDefined(processInstanceId, 'processInstanceId');\n        throwIfNotDefined(variableName, 'variableName');\n        throwIfNotDefined(restVariable, 'restVariable');\n\n        let postBody = restVariable;\n\n        let pathParams = {\n            'processInstanceId': processInstanceId, 'variableName': variableName\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-instances/{processInstanceId}/variables/{variableName}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RestVariable);\n    }\n\n}\n"]}