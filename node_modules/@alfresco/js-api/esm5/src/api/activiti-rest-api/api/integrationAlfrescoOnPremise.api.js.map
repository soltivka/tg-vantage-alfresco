{"version":3,"file":"integrationAlfrescoOnPremise.api.js","sourceRoot":"","sources":["integrationAlfrescoOnPremise.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ResultListDataRepresentationAlfrescoContentRepresentation } from '../model/resultListDataRepresentationAlfrescoContentRepresentation';\nimport { ResultListDataRepresentationAlfrescoEndpointRepresentation } from '../model/resultListDataRepresentationAlfrescoEndpointRepresentation';\nimport { ResultListDataRepresentationAlfrescoSiteRepresenation } from '../model/resultListDataRepresentationAlfrescoSiteRepresenation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Integrationalfrescoonpremise service.\n* @module IntegrationalfrescoonpremiseApi\n*/\nexport class IntegrationAlfrescoOnPremiseApi extends BaseApi {\n    /**\n    * List Alfresco sites\n    *\n    * Returns ALL Sites\n    *\n    * @param repositoryId repositoryId\n    * @return Promise<ResultListDataRepresentationAlfrescoSiteRepresenation>\n    */\n    getAllSites(repositoryId: string): Promise<ResultListDataRepresentationAlfrescoSiteRepresenation> {\n        throwIfNotDefined(repositoryId, 'networkId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'repositoryId': repositoryId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/alfresco/{repositoryId}/sites', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationAlfrescoSiteRepresenation);\n    }\n    /**\n        * List files and folders inside a specific folder identified by folder path\n        *\n        *\n        *\n        * @param repositoryId repositoryId\n        * @param siteId siteId\n        * @param folderPath folderPath\n        * @return Promise<ResultListDataRepresentationAlfrescoContentRepresentation>\n        */\n    getContentInFolderPath(repositoryId: string, siteId: string, folderPath: string): Promise<ResultListDataRepresentationAlfrescoContentRepresentation> {\n        throwIfNotDefined(repositoryId, 'networkId');\n        throwIfNotDefined(siteId, 'siteId');\n        throwIfNotDefined(folderPath, 'folderPath');\n\n        let postBody = null;\n\n        let pathParams = {\n            'repositoryId': repositoryId, 'siteId': siteId, 'folderPath': folderPath\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/rest/integration/alfresco/{repositoryId}/sites/{siteId}/folderpath/{folderPath}/content', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);\n    }\n    /**\n        * List files and folders inside a specific folder\n        *\n        *\n        *\n        * @param repositoryId repositoryId\n        * @param folderId folderId\n        * @return Promise<ResultListDataRepresentationAlfrescoContentRepresentation>\n        */\n    getContentInFolder(repositoryId: string, folderId: string): Promise<ResultListDataRepresentationAlfrescoContentRepresentation> {\n        throwIfNotDefined(repositoryId, 'networkId');\n        throwIfNotDefined(folderId, 'folderId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'repositoryId': repositoryId, 'folderId': folderId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/alfresco/{repositoryId}/folders/{folderId}/content', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);\n    }\n    /**\n        * List files and folders inside a specific site\n        *\n        *\n        *\n        * @param repositoryId repositoryId\n        * @param siteId siteId\n        * @return Promise<ResultListDataRepresentationAlfrescoContentRepresentation>\n        */\n    getContentInSite(repositoryId: string, siteId: string): Promise<ResultListDataRepresentationAlfrescoContentRepresentation> {\n        throwIfNotDefined(repositoryId, 'networkId');\n        throwIfNotDefined(siteId, 'siteId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'repositoryId': repositoryId, 'siteId': siteId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/alfresco/{repositoryId}/sites/{siteId}/content', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);\n    }\n    /**\n        * List Alfresco repositories\n        *\n        * A tenant administrator can configure one or more Alfresco repositories to use when working with content.\n        *\n        * @param opts Optional parameters\n        * @param opts.tenantId tenantId\n        * @param opts.includeAccounts includeAccounts (default to true)\n        * @return Promise<ResultListDataRepresentationAlfrescoEndpointRepresentation>\n        */\n    getRepositories(opts?: any): Promise<ResultListDataRepresentationAlfrescoEndpointRepresentation> {\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'tenantId': opts['tenantId'],\n            'includeAccounts': opts['includeAccounts']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/profile/accounts/alfresco', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationAlfrescoEndpointRepresentation);\n    }\n\n}\n"]}