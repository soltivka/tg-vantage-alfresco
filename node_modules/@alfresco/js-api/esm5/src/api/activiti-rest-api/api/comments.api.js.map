{"version":3,"file":"comments.api.js","sourceRoot":"","sources":["comments.api.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;;AAEF,OAAO,EAAE,qBAAqB,EAAE,MAAM,gCAAgC,CAAC;AACvE,OAAO,EAAE,iDAAiD,EAAE,MAAM,4DAA4D,CAAC;AAC/H,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AAMpD;IAAyC,uCAAO;IAAhD;;IAsJA,CAAC;IA5IG,uDAAyB,GAAzB,UAA0B,cAAqC,EAAE,iBAAyB;QACtF,iBAAiB,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QACpD,iBAAiB,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,CAAC;QAE1D,IAAI,QAAQ,GAAG,cAAc,CAAC;QAE9B,IAAI,UAAU,GAAG;YACb,mBAAmB,EAAE,iBAAiB;SACzC,CAAC;QAEF,IAAI,WAAW,GAAG,EACjB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,gEAAgE,EAAE,MAAM,EACxE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,qBAAqB,CAAC,CAAC;IACtD,CAAC;IAUD,4CAAc,GAAd,UAAe,cAAqC,EAAE,MAAc;QAChE,iBAAiB,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QACpD,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEpC,IAAI,QAAQ,GAAG,cAAc,CAAC;QAE9B,IAAI,UAAU,GAAG;YACb,QAAQ,EAAE,MAAM;SACnB,CAAC;QAEF,IAAI,WAAW,GAAG,EACjB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,yCAAyC,EAAE,MAAM,EACjD,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,qBAAqB,CAAC,CAAC;IACtD,CAAC;IAWD,wDAA0B,GAA1B,UAA2B,iBAAyB,EAAE,IAAU;QAC5D,iBAAiB,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,CAAC;QAE1D,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,mBAAmB,EAAE,iBAAiB;SACzC,CAAC;QAEF,IAAI,WAAW,GAAG;YACd,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC;SACrC,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,gEAAgE,EAAE,KAAK,EACvE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,iDAAiD,CAAC,CAAC;IAClF,CAAC;IAWD,6CAAe,GAAf,UAAgB,MAAc,EAAE,IAAU;QACtC,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEpC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,QAAQ,EAAE,MAAM;SACnB,CAAC;QAEF,IAAI,WAAW,GAAG;YACd,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC;SACrC,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,yCAAyC,EAAE,KAAK,EAChD,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,iDAAiD,CAAC,CAAC;IAClF,CAAC;IAEL,0BAAC;AAAD,CAAC,AAtJD,CAAyC,OAAO,GAsJ/C","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { CommentRepresentation } from '../model/commentRepresentation';\nimport { ResultListDataRepresentationCommentRepresentation } from '../model/resultListDataRepresentationCommentRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Comments service.\n* @module CommentsApi\n*/\nexport class ActivitiCommentsApi extends BaseApi {\n    /**\n    * Add a comment to a process instance\n    *\n    *\n    *\n    * @param commentRequest commentRequest\n    * @param processInstanceId processInstanceId\n    * @return Promise<CommentRepresentation>\n    */\n    addProcessInstanceComment(commentRequest: CommentRepresentation, processInstanceId: string): Promise<CommentRepresentation> {\n        throwIfNotDefined(commentRequest, 'commentRequest');\n        throwIfNotDefined(processInstanceId, 'processInstanceId');\n\n        let postBody = commentRequest;\n\n        let pathParams = {\n            'processInstanceId': processInstanceId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-instances/{processInstanceId}/comments', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, CommentRepresentation);\n    }\n    /**\n        * Add a comment to a task\n        *\n        *\n        *\n        * @param commentRequest commentRequest\n        * @param taskId taskId\n        * @return Promise<CommentRepresentation>\n        */\n    addTaskComment(commentRequest: CommentRepresentation, taskId: string): Promise<CommentRepresentation> {\n        throwIfNotDefined(commentRequest, 'commentRequest');\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = commentRequest;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/comments', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, CommentRepresentation);\n    }\n    /**\n        * Get comments for a process\n        *\n        *\n        *\n        * @param processInstanceId processInstanceId\n        * @param opts Optional parameters\n        * @param opts.latestFirst latestFirst\n        * @return Promise<ResultListDataRepresentationCommentRepresentation>\n        */\n    getProcessInstanceComments(processInstanceId: string, opts?: any): Promise<ResultListDataRepresentationCommentRepresentation> {\n        throwIfNotDefined(processInstanceId, 'processInstanceId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'processInstanceId': processInstanceId\n        };\n\n        let queryParams = {\n            'latestFirst': opts['latestFirst']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-instances/{processInstanceId}/comments', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationCommentRepresentation);\n    }\n    /**\n        * Get comments for a task\n        *\n        *\n        *\n        * @param taskId taskId\n        * @param opts Optional parameters\n        * @param opts.latestFirst latestFirst\n        * @return Promise<ResultListDataRepresentationCommentRepresentation>\n        */\n    getTaskComments(taskId: string, opts?: any): Promise<ResultListDataRepresentationCommentRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n            'latestFirst': opts['latestFirst']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/comments', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationCommentRepresentation);\n    }\n\n}\n"]}