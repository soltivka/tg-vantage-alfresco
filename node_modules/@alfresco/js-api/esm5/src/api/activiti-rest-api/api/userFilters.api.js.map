{"version":3,"file":"userFilters.api.js","sourceRoot":"","sources":["userFilters.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ResultListDataRepresentationUserProcessInstanceFilterRepresentation } from '../model/resultListDataRepresentationUserProcessInstanceFilterRepresentation';\nimport { ResultListDataRepresentationUserTaskFilterRepresentation } from '../model/resultListDataRepresentationUserTaskFilterRepresentation';\nimport { UserFilterOrderRepresentation } from '../model/userFilterOrderRepresentation';\nimport { UserProcessInstanceFilterRepresentation } from '../model/userProcessInstanceFilterRepresentation';\nimport { UserTaskFilterRepresentation } from '../model/userTaskFilterRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Userfilters service.\n* @module UserfiltersApi\n*/\nexport class UserFiltersApi extends BaseApi {\n    /**\n    * Create a process instance filter\n    *\n    *\n    *\n    * @param userProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation\n    * @return Promise<UserProcessInstanceFilterRepresentation>\n    */\n    createUserProcessInstanceFilter(userProcessInstanceFilterRepresentation: UserProcessInstanceFilterRepresentation): Promise<UserProcessInstanceFilterRepresentation> {\n        throwIfNotDefined(userProcessInstanceFilterRepresentation, 'userProcessInstanceFilterRepresentation');\n\n        let postBody = userProcessInstanceFilterRepresentation;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/filters/processes', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, UserProcessInstanceFilterRepresentation);\n    }\n    /**\n        * Create a task filter\n        *\n        *\n        *\n        * @param userTaskFilterRepresentation userTaskFilterRepresentation\n        * @return Promise<UserTaskFilterRepresentation>\n        */\n    createUserTaskFilter(userTaskFilterRepresentation: UserTaskFilterRepresentation): Promise<UserTaskFilterRepresentation> {\n        throwIfNotDefined(userTaskFilterRepresentation, 'userTaskFilterRepresentation');\n\n        let postBody = userTaskFilterRepresentation;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/filters/tasks', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, UserTaskFilterRepresentation);\n    }\n    /**\n        * Delete a process instance filter\n        *\n        *\n        *\n        * @param userFilterId userFilterId\n        * @return Promise<{}>\n        */\n    deleteUserProcessInstanceFilter(userFilterId: number): Promise<any> {\n        throwIfNotDefined(userFilterId, 'userFilterId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'userFilterId': userFilterId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/filters/processes/{userFilterId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Delete a task filter\n        *\n        *\n        *\n        * @param userFilterId userFilterId\n        * @return Promise<{}>\n        */\n    deleteUserTaskFilter(userFilterId: number): Promise<any> {\n        throwIfNotDefined(userFilterId, 'userFilterId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'userFilterId': userFilterId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/filters/tasks/{userFilterId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Get a process instance filter\n        *\n        *\n        *\n        * @param userFilterId userFilterId\n        * @return Promise<UserProcessInstanceFilterRepresentation>\n        */\n    getUserProcessInstanceFilter(userFilterId: number): Promise<UserProcessInstanceFilterRepresentation> {\n        throwIfNotDefined(userFilterId, 'userFilterId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'userFilterId': userFilterId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/filters/processes/{userFilterId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, UserProcessInstanceFilterRepresentation);\n    }\n    /**\n        * List process instance filters\n        *\n        * Returns filters for the current user, optionally filtered by *appId*.\n        *\n        * @param opts Optional parameters\n        * @param opts.appId appId\n        * @return Promise<ResultListDataRepresentationUserProcessInstanceFilterRepresentation>\n        */\n    getUserProcessInstanceFilters(opts?: any): Promise<ResultListDataRepresentationUserProcessInstanceFilterRepresentation> {\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'appId': opts['appId']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/filters/processes', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationUserProcessInstanceFilterRepresentation);\n    }\n    /**\n        * Get a task filter\n        *\n        *\n        *\n        * @param userFilterId userFilterId\n        * @return Promise<UserTaskFilterRepresentation>\n        */\n    getUserTaskFilter(userFilterId: number): Promise<UserTaskFilterRepresentation> {\n        throwIfNotDefined(userFilterId, 'userFilterId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'userFilterId': userFilterId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/filters/tasks/{userFilterId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, UserTaskFilterRepresentation);\n    }\n    /**\n        * List task filters\n        *\n        * Returns filters for the current user, optionally filtered by *appId*.\n        *\n        * @param opts Optional parameters\n        * @param opts.appId appId\n        * @return Promise<ResultListDataRepresentationUserTaskFilterRepresentation>\n        */\n    getUserTaskFilters(opts?: any): Promise<ResultListDataRepresentationUserTaskFilterRepresentation> {\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'appId': opts['appId']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/filters/tasks', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationUserTaskFilterRepresentation);\n    }\n    /**\n        * Re-order the list of user process instance filters\n        *\n        *\n        *\n        * @param filterOrderRepresentation filterOrderRepresentation\n        * @return Promise<{}>\n        */\n    orderUserProcessInstanceFilters(filterOrderRepresentation: UserFilterOrderRepresentation): Promise<any> {\n        throwIfNotDefined(filterOrderRepresentation, 'filterOrderRepresentation');\n\n        let postBody = filterOrderRepresentation;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/filters/processes', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Re-order the list of user task filters\n        *\n        *\n        *\n        * @param filterOrderRepresentation filterOrderRepresentation\n        * @return Promise<{}>\n        */\n    orderUserTaskFilters(filterOrderRepresentation: UserFilterOrderRepresentation): Promise<any> {\n        throwIfNotDefined(filterOrderRepresentation, 'filterOrderRepresentation');\n\n        let postBody = filterOrderRepresentation;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/filters/tasks', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Update a process instance filter\n        *\n        *\n        *\n        * @param userFilterId userFilterId\n        * @param userProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation\n        * @return Promise<UserProcessInstanceFilterRepresentation>\n        */\n    updateUserProcessInstanceFilter(userFilterId: number, userProcessInstanceFilterRepresentation: UserProcessInstanceFilterRepresentation): Promise<UserProcessInstanceFilterRepresentation> {\n        throwIfNotDefined(userFilterId, 'userFilterId');\n        throwIfNotDefined(userProcessInstanceFilterRepresentation, 'userProcessInstanceFilterRepresentation');\n\n        let postBody = userProcessInstanceFilterRepresentation;\n\n        let pathParams = {\n            'userFilterId': userFilterId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/filters/processes/{userFilterId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, UserProcessInstanceFilterRepresentation);\n    }\n    /**\n        * Update a task filter\n        *\n        *\n        *\n        * @param userFilterId userFilterId\n        * @param userTaskFilterRepresentation userTaskFilterRepresentation\n        * @return Promise<UserTaskFilterRepresentation>\n        */\n    updateUserTaskFilter(userFilterId: number, userTaskFilterRepresentation: UserTaskFilterRepresentation): Promise<UserTaskFilterRepresentation> {\n        throwIfNotDefined(userFilterId, 'userFilterId');\n        throwIfNotDefined(userTaskFilterRepresentation, 'userTaskFilterRepresentation');\n\n        let postBody = userTaskFilterRepresentation;\n\n        let pathParams = {\n            'userFilterId': userFilterId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/filters/tasks/{userFilterId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, UserTaskFilterRepresentation);\n    }\n\n}\n"]}