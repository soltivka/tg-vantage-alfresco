/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { __extends } from "tslib";
import { FormDefinitionRepresentation } from '../model/formDefinitionRepresentation';
import { FormRepresentation } from '../model/formRepresentation';
import { ResultListDataRepresentationFormRepresentation } from '../model/resultListDataRepresentationFormRepresentation';
import { ResultListDataRepresentationRuntimeFormRepresentation } from '../model/resultListDataRepresentationRuntimeFormRepresentation';
import { ValidationErrorRepresentation } from '../model/validationErrorRepresentation';
import { BaseApi } from './base.api';
import { buildCollectionParam } from '../../../alfrescoApiClient';
import { throwIfNotDefined } from '../../../assert';
var FormModelsApi = (function (_super) {
    __extends(FormModelsApi, _super);
    function FormModelsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormModelsApi.prototype.getFormEditorJson = function (formId) {
        throwIfNotDefined(formId, 'formId');
        var postBody = null;
        var pathParams = {
            'formId': formId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/forms/{formId}/editorJson', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormDefinitionRepresentation);
    };
    FormModelsApi.prototype.getFormHistory = function (formId, formHistoryId) {
        throwIfNotDefined(formId, 'formId');
        throwIfNotDefined(formHistoryId, 'formHistoryId');
        var postBody = null;
        var pathParams = {
            'formId': formId, 'formHistoryId': formHistoryId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}/history/{formHistoryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormRepresentation);
    };
    FormModelsApi.prototype.getForm = function (formId) {
        throwIfNotDefined(formId, 'formId');
        var postBody = null;
        var pathParams = {
            'formId': formId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormRepresentation);
    };
    FormModelsApi.prototype.getForms = function (input) {
        var postBody = null;
        var pathParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        if (typeof input === 'string') {
            var queryParams = {
                'formId': buildCollectionParam(input, 'multi')
            };
            return this.apiClient.callApi('/api/enterprise/editor/form-models/values', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormRepresentation);
        }
        else if (typeof input === 'object') {
            input = input || {};
            var queryParams = {
                'nameLike': input['nameLike'],
                'appId': input['appId'],
                'tenantId': input['tenantId'],
                'start': input['start'],
                'sort': input['sort'],
                'order': input['order'],
                'size': input['size']
            };
            return this.apiClient.callApi('/api/enterprise/forms', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRuntimeFormRepresentation);
        }
        else {
            var queryParams = {};
            return this.apiClient.callApi('/api/enterprise/editor/form-models', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationFormRepresentation);
        }
    };
    FormModelsApi.prototype.saveForm = function (formId, saveRepresentation) {
        throwIfNotDefined(formId, 'formId');
        throwIfNotDefined(saveRepresentation, 'saveRepresentation');
        var postBody = saveRepresentation;
        var pathParams = {
            'formId': formId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormRepresentation);
    };
    FormModelsApi.prototype.validateModel = function (formId, saveRepresentation) {
        throwIfNotDefined(formId, 'formId');
        throwIfNotDefined(saveRepresentation, 'saveRepresentation');
        var postBody = saveRepresentation;
        var pathParams = {
            'formId': formId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}/validate', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ValidationErrorRepresentation);
    };
    return FormModelsApi;
}(BaseApi));
export { FormModelsApi };
//# sourceMappingURL=../../../../../../src/api/activiti-rest-api/api/formModels.api.js.map