/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { __extends } from "tslib";
import { FormDefinitionRepresentation } from '../model/formDefinitionRepresentation';
import { IdentityLinkRepresentation } from '../model/identityLinkRepresentation';
import { ProcessInstanceAuditInfoRepresentation } from '../model/processInstanceAuditInfoRepresentation';
import { ProcessInstanceRepresentation } from '../model/processInstanceRepresentation';
import { ProcessInstanceVariableRepresentation } from '../model/processInstanceVariableRepresentation';
import { ResultListDataRepresentationProcessContentRepresentation } from '../model/resultListDataRepresentationProcessContentRepresentation';
import { ResultListDataRepresentationProcessInstanceRepresentation } from '../model/resultListDataRepresentationProcessInstanceRepresentation';
import { BaseApi } from './base.api';
import { throwIfNotDefined } from '../../../assert';
var ProcessInstancesApi = (function (_super) {
    __extends(ProcessInstancesApi, _super);
    function ProcessInstancesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProcessInstancesApi.prototype.activateProcessInstance = function (processInstanceId) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        var postBody = null;
        var pathParams = {
            'processInstanceId': processInstanceId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/activate', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceRepresentation);
    };
    ProcessInstancesApi.prototype.createIdentityLink = function (processInstanceId, identityLinkRepresentation) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        throwIfNotDefined(identityLinkRepresentation, 'identityLinkRepresentation');
        var postBody = identityLinkRepresentation;
        var pathParams = {
            'processInstanceId': processInstanceId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    };
    ProcessInstancesApi.prototype.deleteIdentityLink = function (processInstanceId, family, identityId, type) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        throwIfNotDefined(family, 'family');
        throwIfNotDefined(identityId, 'identityId');
        throwIfNotDefined(type, 'type');
        var postBody = null;
        var pathParams = {
            'processInstanceId': processInstanceId, 'family': family, 'identityId': identityId, 'type': type
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks/{family}/{identityId}/{type}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    ProcessInstancesApi.prototype.deleteProcessInstance = function (processInstanceId) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        var postBody = null;
        var pathParams = {
            'processInstanceId': processInstanceId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    ProcessInstancesApi.prototype.filterProcessInstances = function (filterRequest) {
        throwIfNotDefined(filterRequest, 'filterRequest');
        var postBody = filterRequest;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/filter', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationProcessInstanceRepresentation);
    };
    ProcessInstancesApi.prototype.getHistoricProcessInstanceDecisionTasks = function (processInstanceId) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        var postBody = null;
        var pathParams = {
            'processInstanceId': processInstanceId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/decision-tasks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    ProcessInstancesApi.prototype.getHistoricProcessInstanceVariables = function (processInstanceId) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        var postBody = null;
        var pathParams = {
            'processInstanceId': processInstanceId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/historic-variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceVariableRepresentation);
    };
    ProcessInstancesApi.prototype.getHistoricProcessInstances = function (queryRequest) {
        throwIfNotDefined(queryRequest, 'queryRequest');
        var postBody = queryRequest;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/historic-process-instances/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationProcessInstanceRepresentation);
    };
    ProcessInstancesApi.prototype.getIdentityLinkType = function (processInstanceId, family, identityId, type) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        throwIfNotDefined(family, 'family');
        throwIfNotDefined(identityId, 'identityId');
        throwIfNotDefined(type, 'type');
        var postBody = null;
        var pathParams = {
            'processInstanceId': processInstanceId, 'family': family, 'identityId': identityId, 'type': type
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks/{family}/{identityId}/{type}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    };
    ProcessInstancesApi.prototype.getIdentityLinksForFamily = function (processInstanceId, family) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        throwIfNotDefined(family, 'family');
        var postBody = null;
        var pathParams = {
            'processInstanceId': processInstanceId, 'family': family
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks/{family}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    };
    ProcessInstancesApi.prototype.getIdentityLinks = function (processInstanceId) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        var postBody = null;
        var pathParams = {
            'processInstanceId': processInstanceId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    };
    ProcessInstancesApi.prototype.getProcessInstanceContent = function (processInstanceId) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        var postBody = null;
        var pathParams = {
            'processInstanceId': processInstanceId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/field-content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationProcessContentRepresentation);
    };
    ProcessInstancesApi.prototype.getProcessInstanceDiagram = function (processInstanceId) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        var postBody = null;
        var pathParams = {
            'processInstanceId': processInstanceId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['image/png'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/diagram', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    ProcessInstancesApi.prototype.getProcessInstanceStartForm = function (processInstanceId) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        var postBody = null;
        var pathParams = {
            'processInstanceId': processInstanceId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/start-form', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormDefinitionRepresentation);
    };
    ProcessInstancesApi.prototype.getProcessInstance = function (processInstanceId) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        var postBody = null;
        var pathParams = {
            'processInstanceId': processInstanceId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceRepresentation);
    };
    ProcessInstancesApi.prototype.getProcessInstances = function (processInstancesQuery) {
        throwIfNotDefined(processInstancesQuery, 'processInstancesQuery');
        var postBody = processInstancesQuery;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationProcessInstanceRepresentation);
    };
    ProcessInstancesApi.prototype.getTaskAuditLog = function (processInstanceId) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        var postBody = null;
        var pathParams = {
            'processInstanceId': processInstanceId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/audit-log', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceAuditInfoRepresentation);
    };
    ProcessInstancesApi.prototype.getProcessAuditPdf = function (processInstanceId) {
        var postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw "Missing param 'processId' in getProcessAuditPdf";
        }
        var pathParams = {
            'processInstanceId': processInstanceId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        var contextRoot = null;
        var responseType = 'blob';
        return this.apiClient.callApi('/app/rest/process-instances/{processInstanceId}/audit', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, null, contextRoot, responseType);
    };
    ProcessInstancesApi.prototype.startNewProcessInstance = function (startRequest) {
        throwIfNotDefined(startRequest, 'startRequest');
        var postBody = startRequest;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceRepresentation);
    };
    ProcessInstancesApi.prototype.suspendProcessInstance = function (processInstanceId) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        var postBody = null;
        var pathParams = {
            'processInstanceId': processInstanceId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/suspend', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceRepresentation);
    };
    return ProcessInstancesApi;
}(BaseApi));
export { ProcessInstancesApi };
//# sourceMappingURL=../../../../../../src/api/activiti-rest-api/api/processInstances.api.js.map