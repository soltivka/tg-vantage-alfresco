/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { __extends } from "tslib";
import { ModelRepresentation } from '../model/modelRepresentation';
import { ObjectNode } from '../model/objectNode';
import { ResultListDataRepresentationModelRepresentation } from '../model/resultListDataRepresentationModelRepresentation';
import { ValidationErrorRepresentation } from '../model/validationErrorRepresentation';
import { BaseApi } from './base.api';
import { throwIfNotDefined } from '../../../assert';
var ModelsApi = (function (_super) {
    __extends(ModelsApi, _super);
    function ModelsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModelsApi.prototype.createModel = function (modelRepresentation) {
        throwIfNotDefined(modelRepresentation, 'modelRepresentation');
        var postBody = modelRepresentation;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
    };
    ModelsApi.prototype.deleteModel = function (modelId, opts) {
        throwIfNotDefined(modelId, 'modelId');
        opts = opts || {};
        var postBody = null;
        var pathParams = {
            'modelId': modelId
        };
        var queryParams = {
            'cascade': opts['cascade'],
            'deleteRuntimeApp': opts['deleteRuntimeApp']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    ModelsApi.prototype.duplicateModel = function (modelId, modelRepresentation) {
        throwIfNotDefined(modelId, 'modelId');
        throwIfNotDefined(modelRepresentation, 'modelRepresentation');
        var postBody = modelRepresentation;
        var pathParams = {
            'modelId': modelId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}/clone', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
    };
    ModelsApi.prototype.getModelJSON = function (modelId) {
        throwIfNotDefined(modelId, 'modelId');
        var postBody = null;
        var pathParams = {
            'modelId': modelId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}/editor/json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ObjectNode);
    };
    ModelsApi.prototype.getModelThumbnail = function (modelId) {
        throwIfNotDefined(modelId, 'modelId');
        var postBody = null;
        var pathParams = {
            'modelId': modelId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['image/png'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}/thumbnail', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    ModelsApi.prototype.getModel = function (modelId, opts) {
        throwIfNotDefined(modelId, 'modelId');
        opts = opts || {};
        var postBody = null;
        var pathParams = {
            'modelId': modelId
        };
        var queryParams = {
            'includePermissions': opts['includePermissions']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
    };
    ModelsApi.prototype.getModelsToIncludeInAppDefinition = function () {
        var postBody = null;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models-for-app-definition', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationModelRepresentation);
    };
    ModelsApi.prototype.getModels = function (opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
            'filter': opts['filter'],
            'filterText': opts['filterText'],
            'sort': opts['sort'],
            'modelType': opts['modelType'],
            'referenceId': opts['referenceId']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationModelRepresentation);
    };
    ModelsApi.prototype.importNewVersion = function (modelId, file) {
        throwIfNotDefined(modelId, 'modelId');
        throwIfNotDefined(file, 'file');
        var postBody = null;
        var pathParams = {
            'modelId': modelId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {
            'file': file
        };
        var contentTypes = ['multipart/form-data'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}/newversion', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
    };
    ModelsApi.prototype.importProcessModel = function (file) {
        throwIfNotDefined(file, 'file');
        var postBody = null;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {
            'file': file
        };
        var contentTypes = ['multipart/form-data'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-models/import', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
    };
    ModelsApi.prototype.saveModel = function (modelId, values) {
        throwIfNotDefined(modelId, 'modelId');
        throwIfNotDefined(values, 'values');
        var postBody = values;
        var pathParams = {
            'modelId': modelId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}/editor/json', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
    };
    ModelsApi.prototype.updateModel = function (modelId, updatedModel) {
        throwIfNotDefined(modelId, 'modelId');
        throwIfNotDefined(updatedModel, 'updatedModel');
        var postBody = updatedModel;
        var pathParams = {
            'modelId': modelId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
    };
    ModelsApi.prototype.validateModel = function (modelId, opts) {
        throwIfNotDefined(modelId, 'modelId');
        opts = opts || {};
        var postBody = opts['values'];
        var pathParams = {
            'modelId': modelId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/x-www-form-urlencoded'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}/editor/validate', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ValidationErrorRepresentation);
    };
    return ModelsApi;
}(BaseApi));
export { ModelsApi };
//# sourceMappingURL=../../../../../../src/api/activiti-rest-api/api/models.api.js.map