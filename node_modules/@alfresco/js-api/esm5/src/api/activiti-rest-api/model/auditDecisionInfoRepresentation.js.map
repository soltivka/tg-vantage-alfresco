{"version":3,"file":"auditDecisionInfoRepresentation.js","sourceRoot":"","sources":["auditDecisionInfoRepresentation.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;AAEF,OAAO,EAAE,kCAAkC,EAAE,MAAM,sCAAsC,CAAC;AAC1F,OAAO,EAAE,mCAAmC,EAAE,MAAM,uCAAuC,CAAC;AAE5F;IAII,yCAAY,KAAW;QAEnB,IAAI,KAAK,EAAE;YACP,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC3B,IAAI,KAAK,CAAC,YAAY,EAAE;gBACpB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,UAAC,IAAS;oBACjD,OAAO,IAAI,mCAAmC,CAAC,IAAI,CAAC,CAAC;gBACzD,CAAC,CAAC,CAAC;aACN;YACD,IAAI,KAAK,CAAC,gBAAgB,EAAE;gBACxB,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAC,IAAS;oBACzD,OAAO,IAAI,kCAAkC,CAAC,IAAI,CAAC,CAAC;gBACxD,CAAC,CAAC,CAAC;aACN;SACJ;IACL,CAAC;IAEL,sCAAC;AAAD,CAAC,AArBD,IAqBC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { AuditCalculatedValueRepresentation } from './auditCalculatedValueRepresentation';\nimport { AuditDecisionRuleInfoRepresentation } from './auditDecisionRuleInfoRepresentation';\n\nexport class AuditDecisionInfoRepresentation {\n    appliedRules?: AuditDecisionRuleInfoRepresentation[];\n    calculatedValues?: AuditCalculatedValueRepresentation[];\n\n    constructor(input?: any) {\n\n        if (input) {\n            Object.assign(this, input);\n            if (input.appliedRules) {\n                this.appliedRules = input.appliedRules.map((item: any) => {\n                    return new AuditDecisionRuleInfoRepresentation(item);\n                });\n            }\n            if (input.calculatedValues) {\n                this.calculatedValues = input.calculatedValues.map((item: any) => {\n                    return new AuditCalculatedValueRepresentation(item);\n                });\n            }\n        }\n    }\n\n}\n"]}