{"version":3,"file":"jsonNode.js","sourceRoot":"","sources":["jsonNode.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;AAEF;IAuBI,kBAAY,KAAW;QAEnB,IAAI,KAAK,EAAE;YACP,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SAC9B;IACL,CAAC;IAEL,eAAC;AAAD,CAAC,AA9BD,IA8BC;;AACD,WAAiB,QAAQ;IAER,qBAAY,GAAG;QACxB,KAAK,EAAE,OAAuB;QAC9B,MAAM,EAAE,QAAwB;QAChC,OAAO,EAAE,SAAyB;QAClC,OAAO,EAAE,SAAyB;QAClC,IAAI,EAAE,MAAsB;QAC5B,MAAM,EAAE,QAAwB;QAChC,MAAM,EAAE,QAAwB;QAChC,IAAI,EAAE,MAAsB;QAC5B,MAAM,EAAE,QAAwB;KACnC,CAAC;AACN,CAAC,EAbgB,QAAQ,KAAR,QAAQ,QAaxB","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nexport class JsonNode {\n    array?: boolean;\n    bigDecimal?: boolean;\n    bigInteger?: boolean;\n    binary?: boolean;\n    boolean?: boolean;\n    containerNode?: boolean;\n    double?: boolean;\n    float?: boolean;\n    floatingPointNumber?: boolean;\n    int?: boolean;\n    integralNumber?: boolean;\n    long?: boolean;\n    missingNode?: boolean;\n    nodeType?: JsonNode.NodeTypeEnum | string;\n    null?: boolean;\n    number?: boolean;\n    object?: boolean;\n    pojo?: boolean;\n    short?: boolean;\n    textual?: boolean;\n    valueNode?: boolean;\n\n    constructor(input?: any) {\n\n        if (input) {\n            Object.assign(this, input);\n        }\n    }\n\n}\nexport namespace JsonNode {\n    export type NodeTypeEnum = 'ARRAY' | 'BINARY' | 'BOOLEAN' | 'MISSING' | 'NULL' | 'NUMBER' | 'OBJECT' | 'POJO' | 'STRING';\n    export const NodeTypeEnum = {\n        ARRAY: 'ARRAY' as NodeTypeEnum,\n        BINARY: 'BINARY' as NodeTypeEnum,\n        BOOLEAN: 'BOOLEAN' as NodeTypeEnum,\n        MISSING: 'MISSING' as NodeTypeEnum,\n        NULL: 'NULL' as NodeTypeEnum,\n        NUMBER: 'NUMBER' as NodeTypeEnum,\n        OBJECT: 'OBJECT' as NodeTypeEnum,\n        POJO: 'POJO' as NodeTypeEnum,\n        STRING: 'STRING' as NodeTypeEnum\n    };\n}\n"]}