{"version":3,"file":"classificationGuides.api.js","sourceRoot":"","sources":["classificationGuides.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ClassificationGuideBody } from '../model/classificationGuideBody';\nimport { ClassificationGuideEntry } from '../model/classificationGuideEntry';\nimport { ClassificationGuidePaging } from '../model/classificationGuidePaging';\nimport { InstructionEntry } from '../model/instructionEntry';\nimport { SubtopicPaging } from '../model/subtopicPaging';\nimport { TopicBody } from '../model/topicBody';\nimport { TopicEntry } from '../model/topicEntry';\nimport { TopicPaging } from '../model/topicPaging';\nimport { BaseApi } from './base.api';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Classificationguides service.\n* @module ClassificationGuidesApi\n*/\nexport class ClassificationGuidesApi extends BaseApi {\n    /**\n    * Combined instructions\n    *\n    * Combines instructions from the given topics and the user defined instruction, if any.\n    *\n    * @param opts Optional parameters\n    * @param opts.instructions Instructions\n    * @return Promise<InstructionEntry>\n    */\n    combinedInstructions(opts?: any): Promise<InstructionEntry> {\n        opts = opts || {};\n        let postBody = opts['instructions'];\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/combined-instructions', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, InstructionEntry);\n    }\n    /**\n        * Create a classification guide\n        *\n        * Creates a new classification guide.\n        *\n        * @param classificationGuide Classification guide\n        * @return Promise<ClassificationGuideEntry>\n        */\n    createClassificationGuide(classificationGuide: ClassificationGuideBody): Promise<ClassificationGuideEntry> {\n        throwIfNotDefined(classificationGuide, 'classificationGuide');\n\n        let postBody = classificationGuide;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/classification-guides', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ClassificationGuideEntry);\n    }\n    /**\n        * Create a subtopic\n        *\n        * Creates a new subtopic of a topic.\n        *\n        * @param topicId The identifier for the topic\n        * @param topic Subtopic\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the topic. The following optional fields can be requested:\n    * hasSubtopics - A flag indicating whether the topic already contains any subtopics.\n    * instruction - Contains details of any instruction in the topic.\n    * path - An ordered list of id-name pairs of all ancestor topics and the classification guide.\n    * classificationGuide - The classification guide this topic is in.\n\n        * @return Promise<TopicEntry>\n        */\n    createSubtopic(topicId: string, topic: TopicBody, opts?: any): Promise<TopicEntry> {\n        throwIfNotDefined(topicId, 'topicId');\n        throwIfNotDefined(topic, 'topic');\n\n        opts = opts || {};\n        let postBody = topic;\n\n        let pathParams = {\n            'topicId': topicId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/topics/{topicId}/subtopics', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TopicEntry);\n    }\n    /**\n        * Create a topic\n        *\n        * Creates a new topic.\n        *\n        * @param classificationGuideId The identifier for the classification guide\n        * @param topic Topic\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the topic. The following optional fields can be requested:\n    * hasSubtopics - A flag indicating whether the topic already contains any subtopics.\n    * instruction - Contains details of any instruction in the topic.\n    * path - An ordered list of id-name pairs of all ancestor topics and the classification guide.\n    * classificationGuide - The classification guide this topic is in.\n\n        * @return Promise<TopicEntry>\n        */\n    createTopic(classificationGuideId: string, topic: TopicBody, opts?: any): Promise<TopicEntry> {\n        throwIfNotDefined(classificationGuideId, 'classificationGuideId');\n        throwIfNotDefined(topic, 'topic');\n\n        opts = opts || {};\n        let postBody = topic;\n\n        let pathParams = {\n            'classificationGuideId': classificationGuideId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/classification-guides/{classificationGuideId}/topics', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TopicEntry);\n    }\n    /**\n        * Delete a classification guide\n        *\n        * Deletes the classification guide with id **classificationGuideId**, including any topics and instructions.\n        *\n        * @param classificationGuideId The identifier for the classification guide\n        * @return Promise<{}>\n        */\n    deleteClassificationGuide(classificationGuideId: string): Promise<any> {\n        throwIfNotDefined(classificationGuideId, 'classificationGuideId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'classificationGuideId': classificationGuideId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/classification-guides/{classificationGuideId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Delete a topic\n        *\n        * Deletes the topic with id  **topicId**, including any subtopics and instructions.\n        *\n        * @param topicId The identifier for the topic\n        * @return Promise<{}>\n        */\n    deleteTopic(topicId: string): Promise<any> {\n        throwIfNotDefined(topicId, 'topicId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'topicId': topicId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/topics/{topicId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * List all classification guides\n        *\n        * Gets all classification guides.\n        *\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the guide. The following optional fields can be requested:\n    * hasTopics - A flag indicating whether the guide already contains any topics.\n\n        * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\n        * @param opts.maxItems The maximum number of items to return in the list.\n        * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\n    sort the list by one or more fields.\n\n    Each field has a default sort order, which is normally ascending order. Read the API method implementation notes\n    above to check if any fields used in this method have a descending default search order.\n\n    To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n        * @param opts.where A string to restrict the returned objects by using a predicate. Supported operations are AND, NOT, and OR. Fields to filter on:\n    * enabled - e.g. (enabled = true OR enabled = false)\n\n        * @return Promise<ClassificationGuidePaging>\n        */\n    listClassificationGuides(opts?: any): Promise<ClassificationGuidePaging> {\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),\n            'where': opts['where']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/classification-guides', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ClassificationGuidePaging);\n    }\n    /**\n        * List all subtopics\n        *\n        * Gets all subtopics of a topic.\n        *\n        * @param topicId The identifier for the topic\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the topic. The following optional fields can be requested:\n    * hasSubtopics - A flag indicating whether the topic already contains any subtopics.\n    * instruction - Contains details of any instruction in the topic.\n    * path - An ordered list of id-name pairs of all ancestor topics and the classification guide.\n    * classificationGuide - The classification guide this topic is in.\n\n        * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\n        * @param opts.maxItems The maximum number of items to return in the list.\n        * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\n    sort the list by one or more fields.\n\n    Each field has a default sort order, which is normally ascending order. Read the API method implementation notes\n    above to check if any fields used in this method have a descending default search order.\n\n    To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n        * @param opts.where A string to restrict the returned objects by using a predicate. Supported operations are AND, NOT, and OR. Fields to filter on:\n    * hasInstruction\n    * hasSubtopics\n\n        * @param opts.includeSource Also include **source** in addition to **entries** with folder information on the parent guide/topic\n        * @return Promise<SubtopicPaging>\n        */\n    listSubtopics(topicId: string, opts?: any): Promise<SubtopicPaging> {\n        throwIfNotDefined(topicId, 'topicId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'topicId': topicId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),\n            'where': opts['where'],\n            'includeSource': opts['includeSource']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/topics/{topicId}/subtopics', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, SubtopicPaging);\n    }\n    /**\n        * List all topics\n        *\n        * Gets all topics.\n        *\n        * @param classificationGuideId The identifier for the classification guide\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the topic. The following optional fields can be requested:\n    * hasSubtopics - A flag indicating whether the topic already contains any subtopics.\n    * instruction - Contains details of any instruction in the topic.\n    * path - An ordered list of id-name pairs of all ancestor topics and the classification guide.\n    * classificationGuide - The classification guide this topic is in.\n\n        * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\n        * @param opts.maxItems The maximum number of items to return in the list.\n        * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\n    sort the list by one or more fields.\n\n    Each field has a default sort order, which is normally ascending order. Read the API method implementation notes\n    above to check if any fields used in this method have a descending default search order.\n\n    To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n        * @param opts.where A string to restrict the returned objects by using a predicate. Supported operations are AND, NOT, and OR e.g. (instruction=true and hasSubtopics=false). Fields to filter on:\n    * hasInstruction\n    * hasSubtopics\n\n        * @param opts.includeSource Also include **source** in addition to **entries** with folder information on the parent guide/topic\n        * @return Promise<TopicPaging>\n        */\n    listTopics(classificationGuideId: string, opts?: any): Promise<TopicPaging> {\n        throwIfNotDefined(classificationGuideId, 'classificationGuideId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'classificationGuideId': classificationGuideId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),\n            'where': opts['where'],\n            'includeSource': opts['includeSource']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/classification-guides/{classificationGuideId}/topics', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TopicPaging);\n    }\n    /**\n        * Get classification guide information\n        *\n        * Gets the classification guide with id **classificationGuideId**.\n        *\n        * @param classificationGuideId The identifier for the classification guide\n        * @return Promise<ClassificationGuideEntry>\n        */\n    showClassificationGuideById(classificationGuideId: string): Promise<ClassificationGuideEntry> {\n        throwIfNotDefined(classificationGuideId, 'classificationGuideId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'classificationGuideId': classificationGuideId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/classification-guides/{classificationGuideId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ClassificationGuideEntry);\n    }\n    /**\n        * Get topic information\n        *\n        * Gets the topic with id **topicId**.\n        *\n        * @param topicId The identifier for the topic\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the topic. The following optional fields can be requested:\n    * hasSubtopics - A flag indicating whether the topic already contains any subtopics.\n    * instruction - Contains details of any instruction in the topic.\n    * path - An ordered list of id-name pairs of all ancestor topics and the classification guide.\n    * classificationGuide - The classification guide this topic is in.\n\n        * @return Promise<TopicEntry>\n        */\n    showTopicById(topicId: string, opts?: any): Promise<TopicEntry> {\n        throwIfNotDefined(topicId, 'topicId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'topicId': topicId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/topics/{topicId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TopicEntry);\n    }\n    /**\n        * Update a classification guide\n        *\n        * Updates the classification guide with id **classificationGuideId**. For example, you can rename a classification guide.\n        *\n        * @param classificationGuideId The identifier for the classification guide\n        * @param classificationGuide Classification guide\n        * @return Promise<ClassificationGuideEntry>\n        */\n    updateClassificationGuide(classificationGuideId: string, classificationGuide: ClassificationGuideBody): Promise<ClassificationGuideEntry> {\n        throwIfNotDefined(classificationGuideId, 'classificationGuideId');\n        throwIfNotDefined(classificationGuide, 'classificationGuide');\n\n        let postBody = classificationGuide;\n\n        let pathParams = {\n            'classificationGuideId': classificationGuideId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/classification-guides/{classificationGuideId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ClassificationGuideEntry);\n    }\n    /**\n        * Update a topic\n        *\n        * Updates the topic with id **topicId**.\n\n    Use this to rename a topic or to add, edit, or remove the instruction associated with it.\n\n        *\n        * @param topicId The identifier for the topic\n        * @param topic Topic\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the topic. The following optional fields can be requested:\n    * hasSubtopics - A flag indicating whether the topic already contains any subtopics.\n    * instruction - Contains details of any instruction in the topic.\n    * path - An ordered list of id-name pairs of all ancestor topics and the classification guide.\n    * classificationGuide - The classification guide this topic is in.\n\n        * @return Promise<TopicEntry>\n        */\n    updateTopic(topicId: string, topic: TopicBody, opts?: any): Promise<TopicEntry> {\n        throwIfNotDefined(topicId, 'topicId');\n        throwIfNotDefined(topic, 'topic');\n\n        opts = opts || {};\n        let postBody = topic;\n\n        let pathParams = {\n            'topicId': topicId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/topics/{topicId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TopicEntry);\n    }\n\n}\n"]}