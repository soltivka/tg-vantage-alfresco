{"version":3,"file":"genericBucket.js","sourceRoot":"","sources":["genericBucket.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;AAEF,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACpE,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAKhD;IAuBI,uBAAY,KAAW;QAEnB,IAAI,KAAK,EAAE;YACP,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC3B,IAAI,KAAK,CAAC,OAAO,EAAE;gBACf,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,IAAS;oBACvC,OAAO,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;aACN;YACD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,uBAAuB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;SAClG;IACL,CAAC;IAEL,oBAAC;AAAD,CAAC,AApCD,IAoCC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { GenericBucketBucketInfo } from './genericBucketBucketInfo';\nimport { GenericMetric } from './genericMetric';\n\n/**\n * A bucket of facet results\n */\nexport class GenericBucket {\n    /**\n     * The bucket label\n     */\n    label?: string;\n    /**\n     * The filter query you can use to apply this facet\n     */\n    filterQuery?: string;\n    /**\n     * An optional field for additional display information\n     */\n    display?: any;\n    /**\n     * An array of buckets and values\n     */\n    metrics?: GenericMetric[];\n    /**\n     * Additional list of nested facets\n     */\n    facets?: any[];\n    bucketInfo?: GenericBucketBucketInfo;\n\n    constructor(input?: any) {\n\n        if (input) {\n            Object.assign(this, input);\n            if (input.metrics) {\n                this.metrics = input.metrics.map((item: any) => {\n                    return new GenericMetric(item);\n                });\n            }\n            this.bucketInfo = input.bucketInfo ? new GenericBucketBucketInfo(input.bucketInfo) : undefined;\n        }\n    }\n\n}\n"]}