{"version":3,"file":"filePlans.api.js","sourceRoot":"","sources":["filePlans.api.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;;AAGF,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AACvD,OAAO,EAAE,mBAAmB,EAAE,MAAM,8BAA8B,CAAC;AACnE,OAAO,EAAE,oBAAoB,EAAE,MAAM,+BAA+B,CAAC;AAErE,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AAClE,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AAMpD;IAAkC,gCAAO;IAAzC;;IAwTA,CAAC;IAnOG,+CAAwB,GAAxB,UAAyB,UAAkB,EAAE,cAAsC,EAAE,IAAU;QAC3F,iBAAiB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QAC5C,iBAAiB,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QAEpD,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,cAAc,CAAC;QAE9B,IAAI,UAAU,GAAG;YACb,YAAY,EAAE,UAAU;SAC3B,CAAC;QAEF,IAAI,WAAW,GAAG;YACd,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC;YAChC,SAAS,EAAE,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC;YACvD,QAAQ,EAAE,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC;SACxD,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC;QAC/D,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,qCAAqC,EAAE,MAAM,EAC7C,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;IA+BD,kCAAW,GAAX,UAAY,UAAkB,EAAE,IAAU;QACtC,iBAAiB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QAE5C,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,YAAY,EAAE,UAAU;SAC3B,CAAC;QAEF,IAAI,WAAW,GAAG;YACd,SAAS,EAAE,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC;YACvD,QAAQ,EAAE,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC;SACxD,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,0BAA0B,EAAE,KAAK,EACjC,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;IAqCD,4CAAqB,GAArB,UAAsB,UAAkB,EAAE,IAAU;QAChD,iBAAiB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QAE5C,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,YAAY,EAAE,UAAU;SAC3B,CAAC;QAEF,IAAI,WAAW,GAAG;YACd,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC;YAC9B,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC;YAC5B,SAAS,EAAE,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC;YACvD,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC;YACtC,QAAQ,EAAE,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC;SACxD,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,qCAAqC,EAAE,KAAK,EAC5C,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,oBAAoB,CAAC,CAAC;IACrD,CAAC;IAuCD,qCAAc,GAAd,UAAe,UAAkB,EAAE,kBAAsC,EAAE,IAAU;QACjF,iBAAiB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QAC5C,iBAAiB,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;QAE5D,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,kBAAkB,CAAC;QAElC,IAAI,UAAU,GAAG;YACb,YAAY,EAAE,UAAU;SAC3B,CAAC;QAEF,IAAI,WAAW,GAAG;YACd,SAAS,EAAE,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC;YACvD,QAAQ,EAAE,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC;SACxD,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,0BAA0B,EAAE,KAAK,EACjC,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;IAEL,mBAAC;AAAD,CAAC,AAxTD,CAAkC,OAAO,GAwTxC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { FilePlanBodyUpdate } from '../model/filePlanBodyUpdate';\nimport { FilePlanEntry } from '../model/filePlanEntry';\nimport { RecordCategoryEntry } from '../model/recordCategoryEntry';\nimport { RecordCategoryPaging } from '../model/recordCategoryPaging';\nimport { RootCategoryBodyCreate } from '../model/rootCategoryBodyCreate';\nimport { BaseApi } from './base.api';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Fileplans service.\n* @module FilePlansApi\n*/\nexport class FilePlansApi extends BaseApi {\n    /**\n    * Create record categories for a file plan\n    *\n    * Creates a record category as a primary child of **filePlanId**.\n\nYou can set the **autoRename** boolean field to automatically resolve name clashes. If there is a name clash, then\nthe API method tries to create\na unique name using an integer suffix.\n\nThis API method also supports record category creation using application/json.\n\nYou must specify at least a **name**.\n\nYou can create a category like this:\nJSON\n{\n  \\\"name\\\":\\\"My Record Category\\\"\n}\n\nYou can set properties when creating a record category:\nJSON\n{\n  \\\"name\\\":\\\"My Record Category\\\",\n  \\\"properties\\\":\n  {\n    \\\"rma:vitalRecordIndicator\\\":\\\"true\\\",\n    \\\"rma:reviewPeriod\\\":\\\"month|1\\\"\n  }\n}\n\nAny missing aspects are applied automatically. You can set aspects explicitly, if needed, using an **aspectNames** field.\n\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 2,\n      \\\"hasMoreItems\\\": false,\n      \\\"totalItems\\\": 2,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 100\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n\n    *\n    * @param filePlanId The identifier of a file plan. You can also use the -filePlan- alias.\n    * @param nodeBodyCreate The node information to create.\n    * @param opts Optional parameters\n    * @param opts.autoRename If true, then  a name clash will cause an attempt to auto rename by finding a unique name using an integer suffix.\n\n    * @param opts.include Returns additional information about the record category. Any optional field from the response model can be requested. For example:\n* allowableOperations\n* hasRetentionSchedule\n* path\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<RecordCategoryEntry>\n    */\n    createFilePlanCategories(filePlanId: string, nodeBodyCreate: RootCategoryBodyCreate, opts?: any): Promise<RecordCategoryEntry> {\n        throwIfNotDefined(filePlanId, 'filePlanId');\n        throwIfNotDefined(nodeBodyCreate, 'nodeBodyCreate');\n\n        opts = opts || {};\n        let postBody = nodeBodyCreate;\n\n        let pathParams = {\n            'filePlanId': filePlanId\n        };\n\n        let queryParams = {\n            'autoRename': opts['autoRename'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json', 'multipart/form-data'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/file-plans/{filePlanId}/categories', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RecordCategoryEntry);\n    }\n    /**\n        * Get a file plan\n        *\n        * Gets information for file plan **filePlanId**\n\n    Mandatory fields and the file plan's aspects and properties are returned by default.\n\n    You can use the **include** parameter (include=allowableOperations) to return additional information.\n\n        *\n        * @param filePlanId The identifier of a file plan. You can also use the -filePlan- alias.\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the file plan. Any optional field from the response model can be requested. For example:\n    * allowableOperations\n    * path\n\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @return Promise<FilePlanEntry>\n        */\n    getFilePlan(filePlanId: string, opts?: any): Promise<FilePlanEntry> {\n        throwIfNotDefined(filePlanId, 'filePlanId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'filePlanId': filePlanId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/file-plans/{filePlanId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, FilePlanEntry);\n    }\n    /**\n        * List file plans's children\n        *\n        * Returns a list of record categories.\n\n    Minimal information for each child is returned by default.\n\n    You can use the **include** parameter (include=allowableOperations) to return additional information.\n\n        *\n        * @param filePlanId The identifier of a file plan. You can also use the -filePlan- alias.\n        * @param opts Optional parameters\n        * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\n        * @param opts.maxItems The maximum number of items to return in the list.\n        * @param opts.include Returns additional information about the record category. Any optional field from the response model can be requested. For example:\n    * allowableOperations\n    * aspectNames\n    * hasRetentionSchedule\n    * path\n    * properties\n\n        * @param opts.includeSource Also include **source** (in addition to **entries**) with folder information on the parent node – the specified parent **filePlanId**\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @return Promise<RecordCategoryPaging>\n        */\n    getFilePlanCategories(filePlanId: string, opts?: any): Promise<RecordCategoryPaging> {\n        throwIfNotDefined(filePlanId, 'filePlanId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'filePlanId': filePlanId\n        };\n\n        let queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'includeSource': opts['includeSource'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/file-plans/{filePlanId}/categories', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RecordCategoryPaging);\n    }\n    /**\n        * Update a file plan\n        *\n        * Updates file plan **filePlanId**.\n    You can only set or update description and title properties:\n    JSON\n    {\n      \\\"properties\\\":\n        {\n           \\\"cm:description\\\": \\\"New Description\\\",\n           \\\"cm:title\\\":\\\"New Title\\\"\n        }\n    }\n\n    **Note:** Currently there is no optimistic locking for updates, so they are applied in \\\"last one wins\\\" order.\n\n        *\n        * @param filePlanId The identifier of a file plan. You can also use the -filePlan- alias.\n        * @param filePlanBodyUpdate The file plan information to update.\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the file plan. Any optional field from the response model can be requested. For example:\n    * allowableOperations\n    * path\n\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @return Promise<FilePlanEntry>\n        */\n    updateFilePlan(filePlanId: string, filePlanBodyUpdate: FilePlanBodyUpdate, opts?: any): Promise<FilePlanEntry> {\n        throwIfNotDefined(filePlanId, 'filePlanId');\n        throwIfNotDefined(filePlanBodyUpdate, 'filePlanBodyUpdate');\n\n        opts = opts || {};\n        let postBody = filePlanBodyUpdate;\n\n        let pathParams = {\n            'filePlanId': filePlanId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/file-plans/{filePlanId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, FilePlanEntry);\n    }\n\n}\n"]}