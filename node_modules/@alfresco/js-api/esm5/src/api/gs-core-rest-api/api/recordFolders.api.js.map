{"version":3,"file":"recordFolders.api.js","sourceRoot":"","sources":["recordFolders.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { FilePlanComponentBodyUpdate } from '../model/filePlanComponentBodyUpdate';\nimport { RMNodeBodyCreate } from '../model/rMNodeBodyCreate';\nimport { RecordEntry } from '../model/recordEntry';\nimport { RecordFolderAssociationPaging } from '../model/recordFolderAssociationPaging';\nimport { RecordFolderEntry } from '../model/recordFolderEntry';\nimport { BaseApi } from './base.api';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Recordfolders service.\n* @module RecordFoldersApi\n*/\nexport class RecordFoldersApi extends BaseApi {\n    /**\n    * Create a record\n    *\n    * Create a record as a primary child of **recordFolderId**.\n\nThis endpoint supports both JSON and multipart/form-data (file upload).\n\n**Using multipart/form-data**\n\nUse the **filedata** field to represent the content to upload, for example, the following curl command will\ncreate a node with the contents of test.txt in the test user's home folder.\n\ncurl -utest:test -X POST host:port/alfresco/api/-default-/public/gs/versions/1/record-folders/{recordFolderId}/records -F filedata=@test.txt\n\nThis API method also supports record creation using application/json.\n\nYou must specify at least a **name** and **nodeType**.\n\nYou can create a non-electronic record like this:\nJSON\n{\n  \\\"name\\\":\\\"My Non-electronic Record\\\",\n  \\\"nodeType\\\":\\\"rma:nonElectronicDocument\\\",\n  \\\"properties\\\":\n    {\n      \\\"cm:description\\\":\\\"My Non-electronic Record Description\\\",\n      \\\"cm:title\\\":\\\"My Non-electronic Record Title\\\",\n      \\\"rma:box\\\":\\\"My Non-electronic Record Box\\\",\n      \\\"rma:file\\\":\\\"My Non-electronic Record File\\\",\n      \\\"rma:numberOfCopies\\\":1,\n      \\\"rma:physicalSize\\\":30,\n      \\\"rma:shelf\\\":\\\"My Non-electronic Record Shelf\\\",\n      \\\"rma:storageLocation\\\":\\\"My Non-electronic Record Location\\\"\n    }\n}\n\nYou can create an empty electronic record:\nJSON\n{\n  \\\"name\\\":\\\"My Electronic Record\\\",\n  \\\"nodeType\\\":\\\"cm:content\\\"\n}\n\nAny missing aspects are applied automatically. You can set aspects explicitly, if needed, using an **aspectNames** field.\n\n**Note:** You can create more than one child by\nspecifying a list of nodes in the JSON body. For example, the following JSON\nbody creates a record category and a record folder inside the specified **categoryId**:\nJSON\n[\n  {\n    \\\"name\\\":\\\"Record 1\\\",\n    \\\"nodeType\\\":\\\"cm:content\\\"\n  },\n  {\n    \\\"name\\\":\\\"Record 2\\\",\n    \\\"nodeType\\\":\\\"cm:content\\\"\n  }\n]\n\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 2,\n      \\\"hasMoreItems\\\": false,\n      \\\"totalItems\\\": 2,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 100\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n\n    *\n    * @param recordFolderId The identifier of a record folder.\n    * @param recordBodyCreate The record information to create.\n\nThis field is ignored for multipart/form-data content uploads.\n\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about the record. Any optional field from the response model can be requested. For example:\n* allowableOperations\n* content\n* isCompleted\n* path\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<RecordEntry>\n    */\n    createRecordFolderChild(recordFolderId: string, recordBodyCreate: RMNodeBodyCreate, opts?: any): Promise<RecordEntry> {\n        throwIfNotDefined(recordFolderId, 'recordFolderId');\n        throwIfNotDefined(recordBodyCreate, 'recordBodyCreate');\n\n        opts = opts || {};\n        let postBody = recordBodyCreate;\n\n        let pathParams = {\n            'recordFolderId': recordFolderId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json', 'multipart/form-data'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/record-folders/{recordFolderId}/records', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n    /**\n        * Delete a record folder\n        *\n        * Deletes record folder **recordFolderId**. Deleted file plan components cannot be recovered, they are deleted permanently.\n\n        *\n        * @param recordFolderId The identifier of a record folder.\n        * @return Promise<{}>\n        */\n    deleteRecordFolder(recordFolderId: string): Promise<any> {\n        throwIfNotDefined(recordFolderId, 'recordFolderId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'recordFolderId': recordFolderId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/record-folders/{recordFolderId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Get a record folder\n        *\n        * Gets information for record folder **recordFolderId**\n\n    Mandatory fields and the record folder's aspects and properties are returned by default.\n\n    You can use the **include** parameter (include=allowableOperations) to return additional information.\n\n        *\n        * @param recordFolderId The identifier of a record folder.\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the record folders. Any optional field from the response model can be requested. For example:\n    * allowableOperations\n    * isClosed\n    * path\n\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @return Promise<RecordFolderEntry>\n        */\n    getRecordFolder(recordFolderId: string, opts?: any): Promise<RecordFolderEntry> {\n        throwIfNotDefined(recordFolderId, 'recordFolderId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'recordFolderId': recordFolderId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/record-folders/{recordFolderId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RecordFolderEntry);\n    }\n    /**\n        * List records\n        *\n        * Gets a list of records.\n\n    Minimal information for each record is returned by default.\n\n    The list of records includes primary children and secondary children, if there are any.\n\n    You can use the **include** parameter (include=allowableOperations) to return additional information.\n\n        *\n        * @param recordFolderId The identifier of a record folder.\n        * @param opts Optional parameters\n        * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\n        * @param opts.maxItems The maximum number of items to return in the list.\n        * @param opts.where Optionally filter the list. Here are some examples:\n\n    *   where=(nodeType='my:specialNodeType')\n\n    *   where=(nodeType='my:specialNodeType INCLUDESUBTYPES')\n\n    *   where=(isPrimary=true)\n\n        * @param opts.include Returns additional information about the records. Any optional field from the response model can be requested. For example:\n    * allowableOperations\n    * aspectNames\n    * association\n    * content\n    * isCompleted\n    * path\n    * properties\n\n        * @param opts.includeSource Also include **source** (in addition to **entries**) with record information on the parent folder – the specified parent **recordFolderId**\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @return Promise<RecordFolderAssociationPaging>\n        */\n    listRecordFolderChildren(recordFolderId: string, opts?: any): Promise<RecordFolderAssociationPaging> {\n        throwIfNotDefined(recordFolderId, 'recordFolderId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'recordFolderId': recordFolderId\n        };\n\n        let queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'where': opts['where'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'includeSource': opts['includeSource'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/record-folders/{recordFolderId}/records', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RecordFolderAssociationPaging);\n    }\n    /**\n        * Update a record folder\n        *\n        * Updates record folder **recordFolderId**. For example, you can rename a record folder:\n    JSON\n    {\n      \\\"name\\\":\\\"My new name\\\"\n    }\n\n    You can also set or update one or more properties:\n    JSON\n    {\n      \\\"properties\\\":\n        {\n           \\\"rma:vitalRecordIndicator\\\": true,\n           \\\"rma:reviewPeriod\\\":\\\"month|6\\\"\n        }\n    }\n\n    **Note:** if you want to add or remove aspects, then you must use **GET /record-folders/{recordFolderId}** first to get the complete set of *aspectNames*.\n\n    **Note:** Currently there is no optimistic locking for updates, so they are applied in \\\"last one wins\\\" order.\n\n        *\n        * @param recordFolderId The identifier of a record folder.\n        * @param recordFolderBodyUpdate The record folder information to update.\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the record folders. Any optional field from the response model can be requested. For example:\n    * allowableOperations\n    * isClosed\n    * path\n\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @return Promise<RecordFolderEntry>\n        */\n    updateRecordFolder(recordFolderId: string, recordFolderBodyUpdate: FilePlanComponentBodyUpdate, opts?: any): Promise<RecordFolderEntry> {\n        throwIfNotDefined(recordFolderId, 'recordFolderId');\n        throwIfNotDefined(recordFolderBodyUpdate, 'recordFolderBodyUpdate');\n\n        opts = opts || {};\n        let postBody = recordFolderBodyUpdate;\n\n        let pathParams = {\n            'recordFolderId': recordFolderId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/record-folders/{recordFolderId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RecordFolderEntry);\n    }\n\n}\n"]}