/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { __extends } from "tslib";
import { RecordCategoryChildEntry } from '../model/recordCategoryChildEntry';
import { RecordCategoryChildPaging } from '../model/recordCategoryChildPaging';
import { RecordCategoryEntry } from '../model/recordCategoryEntry';
import { BaseApi } from './base.api';
import { buildCollectionParam } from '../../../alfrescoApiClient';
import { throwIfNotDefined } from '../../../assert';
var RecordCategoriesApi = (function (_super) {
    __extends(RecordCategoriesApi, _super);
    function RecordCategoriesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RecordCategoriesApi.prototype.createRecordCategoryChild = function (recordCategoryId, nodeBodyCreate, opts) {
        throwIfNotDefined(recordCategoryId, 'recordCategoryId');
        throwIfNotDefined(nodeBodyCreate, 'nodeBodyCreate');
        opts = opts || {};
        var postBody = nodeBodyCreate;
        var pathParams = {
            'recordCategoryId': recordCategoryId
        };
        var queryParams = {
            'autoRename': opts['autoRename'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json', 'multipart/form-data'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/record-categories/{recordCategoryId}/children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryChildEntry);
    };
    RecordCategoriesApi.prototype.deleteRecordCategory = function (recordCategoryId) {
        throwIfNotDefined(recordCategoryId, 'recordCategoryId');
        var postBody = null;
        var pathParams = {
            'recordCategoryId': recordCategoryId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/record-categories/{recordCategoryId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    RecordCategoriesApi.prototype.getRecordCategory = function (recordCategoryId, opts) {
        throwIfNotDefined(recordCategoryId, 'recordCategoryId');
        opts = opts || {};
        var postBody = null;
        var pathParams = {
            'recordCategoryId': recordCategoryId
        };
        var queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'relativePath': opts['relativePath'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/record-categories/{recordCategoryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryEntry);
    };
    RecordCategoriesApi.prototype.listRecordCategoryChildren = function (recordCategoryId, opts) {
        throwIfNotDefined(recordCategoryId, 'recordCategoryId');
        opts = opts || {};
        var postBody = null;
        var pathParams = {
            'recordCategoryId': recordCategoryId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'relativePath': opts['relativePath'],
            'includeSource': opts['includeSource'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/record-categories/{recordCategoryId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryChildPaging);
    };
    RecordCategoriesApi.prototype.updateRecordCategory = function (recordCategoryId, recordCategoryBodyUpdate, opts) {
        throwIfNotDefined(recordCategoryId, 'recordCategoryId');
        throwIfNotDefined(recordCategoryBodyUpdate, 'recordCategoryBodyUpdate');
        opts = opts || {};
        var postBody = recordCategoryBodyUpdate;
        var pathParams = {
            'recordCategoryId': recordCategoryId
        };
        var queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/record-categories/{recordCategoryId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryEntry);
    };
    return RecordCategoriesApi;
}(BaseApi));
export { RecordCategoriesApi };
//# sourceMappingURL=../../../../../../src/api/gs-core-rest-api/api/recordCategories.api.js.map