{"version":3,"file":"types.api.js","sourceRoot":"","sources":["types.api.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;;AAEF,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAC/C,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AACjD,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AACpD,OAAO,EAAE,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AAMlE;IAA8B,4BAAO;IAArC;;IAgLA,CAAC;IArKG,0BAAO,GAAP,UAAQ,MAAc;QAElB,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEpC,IAAM,QAAQ,GAAS,IAAI,CAAC;QAE5B,IAAM,UAAU,GAAG;YACf,QAAQ,EAAE,MAAM;SACnB,CAAC;QAEF,IAAM,WAAW,GAAG,EACnB,CAAC;QAEF,IAAM,YAAY,GAAG,EAEpB,CAAC;QACF,IAAM,UAAU,GAAG,EAClB,CAAC;QAEF,IAAM,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC1C,IAAM,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,iBAAiB,EAAE,KAAK,EACxB,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAG,SAAS,CAAC,CAAC;IAC3C,CAAC;IA4GD,4BAAS,GAAT,UAAU,IAAU;QAEhB,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,IAAM,QAAQ,GAAS,IAAI,CAAC;QAE5B,IAAM,UAAU,GAAG,EAElB,CAAC;QAEF,IAAM,WAAW,GAAG;YAChB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC;YACtB,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC;YAC9B,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC;YAC5B,SAAS,EAAE,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC;SAC1D,CAAC;QAEF,IAAM,YAAY,GAAG,EAEpB,CAAC;QACF,IAAM,UAAU,GAAG,EAClB,CAAC;QAEF,IAAM,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC1C,IAAM,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,QAAQ,EAAE,KAAK,EACf,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAG,UAAU,CAAC,CAAC;IAC5C,CAAC;IAEL,eAAC;AAAD,CAAC,AAhLD,CAA8B,OAAO,GAgLpC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { TypeEntry } from '../model/typeEntry';\nimport { TypePaging } from '../model/typePaging';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\n\n/**\n* Types service.\n* @module TypesApi\n*/\nexport class TypesApi extends BaseApi {\n    /**\n    * Get a type\n    *\n    * **Note:** This is available in Alfresco 7.0.0 and newer versions.\nGet information for type **typeId**.\n\n    *\n    * @param typeId The Qname of a type(prefix:name) e.g 'cm:content'\n    * @return Promise<TypeEntry>\n    */\n    getType(typeId: string): Promise<TypeEntry> {\n\n        throwIfNotDefined(typeId, 'typeId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'typeId': typeId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/types/{typeId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , TypeEntry);\n    }\n/**\n    * List types\n    *\n    * **Note:** This is available in Alfresco 7.0.0 and newer versions.\n\nGets a list of types from the data dictionary. The System types will be ignored by default.\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 0,\n      \\\"hasMoreItems\\\": true,\n      \\\"totalItems\\\": 0,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 0\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          \\\"associations\\\": [],\n          \\\"isArchive\\\": true,\n          \\\"mandatoryAspects\\\": [\n              \\\"cm:auditable\\\",\n              \\\"sys:referenceable\\\",\n              \\\"sys:localized\\\"\n          ],\n          \\\"includedInSupertypeQuery\\\": true,\n          \\\"description\\\": \\\"Base Content Object\\\",\n          \\\"isContainer\\\": false,\n          \\\"model\\\": {\n              \\\"id\\\": \\\"cm:contentmodel\\\",\n              \\\"author\\\": \\\"Alfresco\\\",\n              \\\"description\\\": \\\"Alfresco Content Domain Model\\\",\n              \\\"namespaceUri\\\": \\\"http://www.alfresco.org/model/content/1.0\\\",\n              \\\"namespacePrefix\\\": \\\"cm\\\"\n          },\n          \\\"id\\\": \\\"cm:content\\\",\n          \\\"title\\\": \\\"Content\\\",\n          \\\"parentId\\\": \\\"cm:cmobject\\\"\n          \\\"properties\\\": [\n            {\n              \\\"id\\\": \\\"cm:name\\\",\n              \\\"title\\\": \\\"Name\\\",\n              \\\"description\\\": \\\"Name\\\",\n              \\\"dataType\\\": \\\"d:text\\\",\n              \\\"isMultiValued\\\": false,\n              \\\"isMandatory\\\": true,\n              \\\"isMandatoryEnforced\\\": true\n              \\\"isProtected\\\": false\n              ...\n            },\n            {\n              ...\n            }\n          ]\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n    ]\n  }\n}\n\n    *\n    * @param opts Optional parameters\n    * @param opts.where Optionally filter the list. Here are some examples:\n\nA type should represented in the following format(prefix:name). e.g 'cm:content'.\n\nThe following where clause will only return types from the namespace1:model and namespace2:model.\n\n  where=(modelId in ('namespace1:model','namespace2:model'))\n  where=(modelId in ('namespace1:model INCLUDESUBTYPES','namespace2:model'))\n\nThe following where clause will only return sub types for the given parents.\n\n  where=(parentId in ('namespace1:parent','namespace2:parent'))\n\nThe following where clause will only return types that match the pattern.\n\n  where=(namespaceUri matches('http://www.alfresco.*'))\n\nThe following where clause will only return types that don't match the pattern.\n\n  where=(not namespaceUri matches('http://www.alfresco.*'))\n\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.include Returns additional information about the type. The following optional fields can be requested:\n* properties\n* mandatoryAspects\n* associations\n\n    * @return Promise<TypePaging>\n    */\n    listTypes(opts?: any): Promise<TypePaging> {\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'where': opts['where'],\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'include': buildCollectionParam(opts['include'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/types', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , TypePaging);\n    }\n\n}\n"]}