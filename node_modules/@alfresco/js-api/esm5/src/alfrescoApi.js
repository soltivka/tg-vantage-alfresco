/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import ee from 'event-emitter';
import { ContentAuth } from './authentication/contentAuth';
import { ProcessAuth } from './authentication/processAuth';
import { Oauth2Auth } from './authentication/oauth2Auth';
import { ContentClient } from './contentClient';
import { ProcessClient } from './processClient';
import { Storage } from './storage';
import { AlfrescoApiConfig } from './alfrescoApiConfig';
var AlfrescoApi = (function () {
    function AlfrescoApi(config) {
        this.bufferEvents = [];
        ee(this);
        if (config) {
            this.setConfig(config);
        }
    }
    AlfrescoApi.prototype.setConfig = function (config) {
        if (!config) {
            config = {};
        }
        this.storage = new Storage();
        this.storage.setDomainPrefix(config.domainPrefix);
        this.config = new AlfrescoApiConfig(config);
        this.clientsFactory();
        this.processClient = new ProcessClient(this.config);
        this.errorListeners();
        this.initAuth(config);
        if (this.isLoggedIn()) {
            this.emitBuffer('logged-in');
        }
        return config;
    };
    AlfrescoApi.prototype.initAuth = function (config) {
        var _this = this;
        var _a, _b, _c;
        if (this.isOauthConfiguration()) {
            if (!this.oauth2Auth) {
                this.oauth2Auth = new Oauth2Auth(this.config, this);
            }
            else {
                this.oauth2Auth.setConfig(this.config, this);
            }
            (_a = this.oauth2Auth) === null || _a === void 0 ? void 0 : _a.on('logged-in', function () {
                _this.emitBuffer('logged-in');
            });
            this.setAuthenticationClientECMBPM(this.oauth2Auth.getAuthentication(), this.oauth2Auth.getAuthentication());
        }
        else {
            if (!this.processAuth) {
                this.processAuth = new ProcessAuth(this.config);
            }
            else {
                this.processAuth.setConfig(this.config);
            }
            (_b = this.processAuth) === null || _b === void 0 ? void 0 : _b.on('logged-in', function () {
                _this.emitBuffer('logged-in');
            });
            if (!this.contentAuth) {
                this.contentAuth = new ContentAuth(this.config, this);
            }
            else {
                this.contentAuth.setConfig(config);
            }
            (_c = this.contentAuth) === null || _c === void 0 ? void 0 : _c.on('logged-in', function () {
                _this.emitBuffer('logged-in');
            });
            this.setAuthenticationClientECMBPM(this.contentAuth.getAuthentication(), this.processAuth.getAuthentication());
        }
    };
    AlfrescoApi.prototype.clientsFactory = function () {
        if (!this.contentPrivateClient) {
            this.contentPrivateClient = new ContentClient(this.config, "/api/".concat(this.config.tenant, "/private/alfresco/versions/1"));
        }
        else {
            this.contentPrivateClient.setConfig(this.config, "/api/".concat(this.config.tenant, "/private/alfresco/versions/1"));
        }
        if (!this.contentClient) {
            this.contentClient = new ContentClient(this.config, "/api/".concat(this.config.tenant, "/public/alfresco/versions/1"));
        }
        else {
            this.contentClient.setConfig(this.config, "/api/".concat(this.config.tenant, "/public/alfresco/versions/1"));
        }
        if (!this.authClient) {
            this.authClient = new ContentClient(this.config, "/api/".concat(this.config.tenant, "/public/authentication/versions/1"));
        }
        else {
            this.authClient.setConfig(this.config, "/api/".concat(this.config.tenant, "/public/authentication/versions/1"));
        }
        if (!this.searchClient) {
            this.searchClient = new ContentClient(this.config, "/api/".concat(this.config.tenant, "/public/search/versions/1"));
        }
        else {
            this.searchClient.setConfig(this.config, "/api/".concat(this.config.tenant, "/public/search/versions/1"));
        }
        if (!this.discoveryClient) {
            this.discoveryClient = new ContentClient(this.config, "/api");
        }
        else {
            this.discoveryClient.setConfig(this.config, "/api");
        }
        if (!this.gsClient) {
            this.gsClient = new ContentClient(this.config, "/api/".concat(this.config.tenant, "/public/gs/versions/1"));
        }
        else {
            this.gsClient.setConfig(this.config, "/api/".concat(this.config.tenant, "/public/gs/versions/1"));
        }
        if (!this.processClient) {
            this.processClient = new ProcessClient(this.config);
        }
        else {
            this.processClient.setConfig(this.config);
        }
    };
    AlfrescoApi.prototype.errorListeners = function () {
        var _this = this;
        this.contentClient.off('error', function () {
        });
        this.authClient.off('error', function () {
        });
        this.contentPrivateClient.off('error', function () {
        });
        this.processClient.off('error', function () {
        });
        this.searchClient.off('error', function () {
        });
        this.discoveryClient.off('error', function () {
        });
        this.gsClient.off('error', function () {
        });
        this.contentClient.on('error', function (error) {
            _this.errorHandler(error);
        });
        this.authClient.on('error', function (error) {
            _this.errorHandler(error);
        });
        this.contentPrivateClient.on('error', function (error) {
            _this.errorHandler(error);
        });
        this.processClient.on('error', function (error) {
            _this.errorHandler(error);
        });
        this.searchClient.on('error', function (error) {
            _this.errorHandler(error);
        });
        this.discoveryClient.on('error', function (error) {
            _this.errorHandler(error);
        });
        this.gsClient.on('error', function (error) {
            _this.errorHandler(error);
        });
    };
    AlfrescoApi.prototype.errorHandler = function (error) {
        if (error.status === 401) {
            this.invalidateSession();
        }
        this.emitBuffer('error', error);
    };
    AlfrescoApi.prototype.changeWithCredentialsConfig = function (withCredentials) {
        this.config.withCredentials = withCredentials;
    };
    AlfrescoApi.prototype.changeCsrfConfig = function (disableCsrf) {
        this.config.disableCsrf = disableCsrf;
        this.processAuth.changeCsrfConfig(disableCsrf);
    };
    AlfrescoApi.prototype.changeEcmHost = function (hostEcm) {
        this.config.hostEcm = hostEcm;
        this.contentAuth.changeHost();
        this.contentClient.changeHost();
        this.authClient.changeHost();
    };
    AlfrescoApi.prototype.changeBpmHost = function (hostBpm) {
        this.config.hostBpm = hostBpm;
        this.processAuth.changeHost();
        this.processClient.changeHost();
    };
    AlfrescoApi.prototype.login = function (username, password) {
        var _this = this;
        if (!this.isCredentialValid(username) || !this.isCredentialValid(password)) {
            return Promise.reject('missing username or password');
        }
        if (username) {
            username = username.trim();
        }
        this.username = username;
        if (this.isOauthConfiguration()) {
            var oauth2AuthPromise = void 0;
            oauth2AuthPromise = this.oauth2Auth.login(username, password);
            oauth2AuthPromise.then(function (accessToken) {
                _this.config.accessToken = accessToken;
            }, function (e) {
                console.log('login OAUTH error', e);
            });
            return oauth2AuthPromise;
        }
        else {
            if (this.isBpmConfiguration()) {
                var processPromise = this.processAuth.login(username, password);
                processPromise.then(function (ticketBpm) {
                    _this.config.ticketBpm = ticketBpm;
                }, function () {
                    console.log('login BPM error');
                });
                return processPromise;
            }
            else if (this.isEcmConfiguration()) {
                var contentPromise = this.contentAuth.login(username, password);
                contentPromise.then(function (ticketEcm) {
                    _this.setAuthenticationClientECMBPM(_this.contentAuth.getAuthentication(), null);
                    _this.config.ticketEcm = ticketEcm;
                }, function () {
                    console.log('login ECM error');
                });
                return contentPromise;
            }
            else if (this.isEcmBpmConfiguration()) {
                var contentProcessPromise = this._loginBPMECM(username, password);
                contentProcessPromise.then(function (data) {
                    _this.config.ticketEcm = data[0];
                    _this.config.ticketBpm = data[1];
                });
                return contentProcessPromise;
            }
            else {
                return Promise.reject('Unknown configuration');
            }
        }
    };
    AlfrescoApi.prototype.isCredentialValid = function (credential) {
        return credential !== undefined && credential !== null && credential !== '';
    };
    AlfrescoApi.prototype.implicitLogin = function () {
        var _this = this;
        if (!this.isOauthConfiguration()) {
            return Promise.reject('Missing the required oauth2 configuration');
        }
        return new Promise(function () {
            _this.oauth2Auth.implicitLogin();
        });
    };
    AlfrescoApi.prototype.setAuthenticationClientECMBPM = function (authECM, authBPM) {
        this.contentClient.setAuthentications(authECM);
        this.authClient.setAuthentications(authECM);
        this.searchClient.setAuthentications(authECM);
        this.contentPrivateClient.setAuthentications(authECM);
        this.processClient.setAuthentications(authBPM);
        this.searchClient.setAuthentications(authECM);
        this.discoveryClient.setAuthentications(authECM);
        this.gsClient.setAuthentications(authECM);
    };
    AlfrescoApi.prototype.loginTicket = function (ticketEcm, ticketBpm) {
        this.config.ticketEcm = ticketEcm;
        this.config.ticketBpm = ticketBpm;
        return this.contentAuth.validateTicket();
    };
    AlfrescoApi.prototype._loginBPMECM = function (username, password) {
        var _this = this;
        var contentPromise = this.contentAuth.login(username, password);
        var processPromise = this.processAuth.login(username, password);
        var promise = new Promise(function (resolve, reject) {
            Promise.all([contentPromise, processPromise]).then(function (data) {
                promise.emit('success');
                resolve(data);
            }, function (error) {
                _this.contentAuth.invalidateSession();
                _this.processAuth.invalidateSession();
                if (error.status === 401) {
                    promise.emit('unauthorized');
                }
                promise.emit('error');
                reject(error);
            });
        });
        ee(promise);
        return promise;
    };
    AlfrescoApi.prototype.logout = function () {
        var _this = this;
        this.username = null;
        if (this.isOauthConfiguration()) {
            return this.oauth2Auth.logOut();
        }
        else {
            if (this.isBpmConfiguration()) {
                return this.processAuth.logout();
            }
            else if (this.isEcmConfiguration()) {
                var contentPromise = this.contentAuth.logout();
                contentPromise.then(function () { return _this.config.ticket = undefined; }, function () {
                });
                return contentPromise;
            }
            else if (this.isEcmBpmConfiguration()) {
                return this._logoutBPMECM();
            }
            return Promise.resolve();
        }
    };
    AlfrescoApi.prototype._logoutBPMECM = function () {
        var _this = this;
        var contentPromise = this.contentAuth.logout();
        var processPromise = this.processAuth.logout();
        var promise = new Promise(function (resolve, reject) {
            Promise.all([contentPromise, processPromise]).then(function () {
                _this.config.ticket = undefined;
                promise.emit('logout');
                resolve('logout');
            }, function (error) {
                if (error.status === 401) {
                    promise.emit('unauthorized');
                }
                promise.emit('error');
                reject(error);
            });
        });
        ee(promise);
        return promise;
    };
    AlfrescoApi.prototype.isLoggedIn = function () {
        if (this.isOauthConfiguration()) {
            return this.oauth2Auth.isLoggedIn();
        }
        else {
            if (this.isBpmConfiguration()) {
                return this.processAuth.isLoggedIn();
            }
            else if (this.isEcmConfiguration()) {
                return this.contentAuth.isLoggedIn();
            }
            else if (this.isEcmBpmConfiguration()) {
                return this.contentAuth.isLoggedIn() && this.processAuth.isLoggedIn();
            }
            else {
                return false;
            }
        }
    };
    AlfrescoApi.prototype.isBpmLoggedIn = function () {
        if (this.isBpmConfiguration() || this.isEcmBpmConfiguration()) {
            if (this.isOauthConfiguration()) {
                return this.oauth2Auth.isLoggedIn();
            }
            else {
                return this.processAuth.isLoggedIn();
            }
        }
        return false;
    };
    AlfrescoApi.prototype.isEcmLoggedIn = function () {
        if (this.isEcmConfiguration() || this.isEcmBpmConfiguration()) {
            if (this.isOauthConfiguration()) {
                return this.oauth2Auth.isLoggedIn();
            }
            else {
                return this.contentAuth.isLoggedIn();
            }
        }
        return false;
    };
    AlfrescoApi.prototype.getBpmUsername = function () {
        if (this.isOauthConfiguration()) {
            return this.username || this.oauth2Auth.storage.getItem('USERNAME');
        }
        else {
            return this.username || this.processAuth.storage.getItem('APS_USERNAME');
        }
    };
    AlfrescoApi.prototype.getEcmUsername = function () {
        if (this.isOauthConfiguration()) {
            return this.username || this.oauth2Auth.storage.getItem('USERNAME');
        }
        else {
            return this.username || this.contentAuth.storage.getItem('ACS_USERNAME');
        }
    };
    AlfrescoApi.prototype.refreshToken = function () {
        if (!this.isOauthConfiguration()) {
            return Promise.reject('Missing the required oauth2 configuration');
        }
        if (this.config.oauth2.implicitFlow) {
            return Promise.reject('Manual refresh token not possible in implicit flow');
        }
        return this.oauth2Auth.refreshToken();
    };
    AlfrescoApi.prototype.getTicketAuth = function () {
        return this.oauth2Auth && this.oauth2Auth.getToken();
    };
    AlfrescoApi.prototype.setTicket = function (ticketEcm, TicketBpm) {
        if (this.contentAuth) {
            this.contentAuth.setTicket(ticketEcm);
        }
        if (this.processAuth) {
            this.processAuth.setTicket(TicketBpm);
        }
    };
    AlfrescoApi.prototype.invalidateSession = function () {
        if (this.oauth2Auth) {
            this.oauth2Auth.invalidateSession();
        }
        else {
            this.contentAuth.invalidateSession();
            this.processAuth.invalidateSession();
        }
    };
    AlfrescoApi.prototype.getTicketBpm = function () {
        return this.processAuth && this.processAuth.getTicket();
    };
    AlfrescoApi.prototype.getTicketEcm = function () {
        return this.contentAuth && this.contentAuth.getTicket();
    };
    AlfrescoApi.prototype.getTicket = function () {
        return [this.contentAuth.getTicket(), this.processAuth.getTicket()];
    };
    AlfrescoApi.prototype.isBpmConfiguration = function () {
        return this.config.provider && this.config.provider.toUpperCase() === 'BPM';
    };
    AlfrescoApi.prototype.isEcmConfiguration = function () {
        return this.config.provider && this.config.provider.toUpperCase() === 'ECM';
    };
    AlfrescoApi.prototype.isOauthConfiguration = function () {
        return this.config.authType === 'OAUTH';
    };
    AlfrescoApi.prototype.isPublicUrl = function () {
        if (this.isOauthConfiguration()) {
            return this.oauth2Auth.isPublicUrl();
        }
        return false;
    };
    AlfrescoApi.prototype.isEcmBpmConfiguration = function () {
        return this.config.provider && this.config.provider.toUpperCase() === 'ALL';
    };
    AlfrescoApi.prototype.emitBuffer = function (event, callback) {
        this.emit(event, callback);
        this.bufferEvents.push(event);
    };
    AlfrescoApi.prototype.reply = function (event, callback) {
        if (this.bufferEvents.indexOf(event) >= 0) {
            Function.prototype.apply.call(callback, this, arguments);
        }
        else {
            this.on(event, callback);
        }
    };
    return AlfrescoApi;
}());
export { AlfrescoApi };
//# sourceMappingURL=../../../src/alfrescoApi.js.map