/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { NodesApi } from '../../../../api/content-rest-api/api/nodes.api';
import { SharedlinksApi } from '../../../../api/content-rest-api/api/sharedlinks.api';
import { RenditionsApi } from '../../../../api/content-rest-api/api/renditions.api';
import { SitesApi } from '../../../../api/content-rest-api/api/sites.api';
import { TrashcanApi } from '../../../../api/content-rest-api/api/trashcan.api';
var ChangesApi = (function () {
    function ChangesApi() {
    }
    ChangesApi.prototype.init = function (alfrescoApi) {
        this.nodesApi = new NodesApi(alfrescoApi);
        this.sharedlinksApi = new SharedlinksApi(alfrescoApi);
        this.renditionsApi = new RenditionsApi(alfrescoApi);
        this.sitesApi = new SitesApi(alfrescoApi);
        this.trashcanApi = new TrashcanApi(alfrescoApi);
    };
    ChangesApi.prototype.addAssoc = function (sourceId, assocTargetBody) {
        return this.nodesApi.createAssociation(sourceId, assocTargetBody);
    };
    ChangesApi.prototype.addNode = function (nodeId, nodeBody, opts) {
        return this.nodesApi.createNode(nodeId, nodeBody, opts);
    };
    ChangesApi.prototype.addSecondaryChildAssoc = function (parentId, assocChildBody, opts) {
        return this.nodesApi.createSecondaryChildAssociation(parentId, assocChildBody, opts);
    };
    ChangesApi.prototype.addSharedLink = function (sharedLinkBody, opts) {
        return this.sharedlinksApi.createSharedLink(sharedLinkBody, opts);
    };
    ChangesApi.prototype.copyNode = function (nodeId, copyBody, opts) {
        return this.nodesApi.copyNode(nodeId, copyBody, opts);
    };
    ChangesApi.prototype.createRendition = function (nodeId, renditionBody) {
        return this.renditionsApi.createRendition(nodeId, renditionBody);
    };
    ChangesApi.prototype.createSite = function (siteBody, opts) {
        return this.sitesApi.createSite(siteBody, opts);
    };
    ChangesApi.prototype.updateSite = function (siteId, siteBody, opts) {
        return this.sitesApi.updateSite(siteId, siteBody, opts);
    };
    ChangesApi.prototype.deleteNode = function (nodeId, opts) {
        return this.nodesApi.deleteNode(nodeId, opts);
    };
    ChangesApi.prototype.deleteSharedLink = function (sharedId) {
        return this.sharedlinksApi.deleteSharedLink(sharedId);
    };
    ChangesApi.prototype.deleteSite = function (siteId, opts) {
        return this.sitesApi.deleteSite(siteId, opts);
    };
    ChangesApi.prototype.emailSharedLink = function (sharedId, emailSharedLinkBody) {
        return this.sharedlinksApi.emailSharedLink(sharedId, emailSharedLinkBody);
    };
    ChangesApi.prototype.findSharedLinks = function (opts) {
        return this.sharedlinksApi.listSharedLinks(opts);
    };
    ChangesApi.prototype.getDeletedNode = function (nodeId, opts) {
        return this.trashcanApi.getDeletedNode(nodeId, opts);
    };
    ChangesApi.prototype.getDeletedNodes = function (opts) {
        return this.trashcanApi.listDeletedNodes(opts);
    };
    ChangesApi.prototype.getFileContent = function (nodeId, opts) {
        return this.nodesApi.getNodeContent(nodeId, opts);
    };
    ChangesApi.prototype.getNode = function (nodeId, opts) {
        return this.nodesApi.getNode(nodeId, opts);
    };
    ChangesApi.prototype.getNodeChildren = function (nodeId, opts) {
        return this.nodesApi.listNodeChildren(nodeId, opts);
    };
    ChangesApi.prototype.getRendition = function (nodeId, renditionId) {
        return this.renditionsApi.getRendition(nodeId, renditionId);
    };
    ChangesApi.prototype.getRenditionContent = function (nodeId, renditionId, opts) {
        return this.renditionsApi.getRenditionContent(nodeId, renditionId, opts);
    };
    ChangesApi.prototype.getRenditions = function (nodeId) {
        return this.renditionsApi.listRenditions(nodeId);
    };
    ChangesApi.prototype.getSharedLink = function (sharedId, opts) {
        return this.sharedlinksApi.getSharedLink(sharedId, opts);
    };
    ChangesApi.prototype.getSharedLinkContent = function (sharedId, opts) {
        return this.sharedlinksApi.getSharedLinkContent(sharedId, opts);
    };
    ChangesApi.prototype.getSharedLinkRenditionContent = function (sharedId, renditionId, opts) {
        return this.sharedlinksApi.getSharedLinkRenditionContent(sharedId, renditionId, opts);
    };
    ChangesApi.prototype.getSharedLinkRenditions = function (sharedId) {
        return this.sharedlinksApi.listSharedLinkRenditions(sharedId);
    };
    ChangesApi.prototype.listParents = function (childId, opts) {
        return this.nodesApi.listParents(childId, opts);
    };
    ChangesApi.prototype.listSecondaryChildAssociations = function (parentId, opts) {
        return this.nodesApi.listSecondaryChildren(parentId, opts);
    };
    ChangesApi.prototype.listSourceNodeAssociations = function (targetId, opts) {
        return this.nodesApi.listSourceAssociations(targetId, opts);
    };
    ChangesApi.prototype.listTargetAssociations = function (sourceId, opts) {
        return this.nodesApi.listTargetAssociations(sourceId, opts);
    };
    ChangesApi.prototype.moveNode = function (nodeId, moveBody, opts) {
        return this.nodesApi.moveNode(nodeId, moveBody, opts);
    };
    ChangesApi.prototype.purgeDeletedNode = function (nodeId) {
        return this.trashcanApi.deleteDeletedNode(nodeId);
    };
    ChangesApi.prototype.removeAssoc = function (sourceId, targetId, opts) {
        return this.nodesApi.deleteAssociation(sourceId, targetId, opts);
    };
    ChangesApi.prototype.removeSecondaryChildAssoc = function (parentId, childId, opts) {
        return this.nodesApi.deleteSecondaryChildAssociation(parentId, childId, opts);
    };
    ChangesApi.prototype.restoreNode = function (nodeId) {
        return this.trashcanApi.restoreDeletedNode(nodeId);
    };
    ChangesApi.prototype.updateFileContent = function (nodeId, contentBody, opts) {
        return this.nodesApi.updateNodeContent(nodeId, contentBody, opts);
    };
    ChangesApi.prototype.updateNode = function (nodeId, nodeBody, opts) {
        return this.nodesApi.updateNode(nodeId, nodeBody, opts);
    };
    return ChangesApi;
}());
export { ChangesApi };
//# sourceMappingURL=../../../../../../../src/api-legacy/content-rest-api/src/api/changesApi.js.map