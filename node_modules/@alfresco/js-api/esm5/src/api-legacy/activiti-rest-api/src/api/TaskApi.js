/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { TaskActionsApi } from '../../../../api/activiti-rest-api/api/taskActions.api';
import { ActivitiCommentsApi } from '../../../../api/activiti-rest-api/api/comments.api';
import { ChecklistsApi } from '../../../../api/activiti-rest-api/api/checklists.api';
import { TaskFormsApi } from '../../../../api/activiti-rest-api/api/taskForms.api';
import { TasksApi } from '../../../../api/activiti-rest-api/api/tasks.api';
import { ContentApi } from '../../../../api/activiti-rest-api/api/content.api';
var TaskApi = (function () {
    function TaskApi() {
    }
    TaskApi.prototype.init = function (alfrescoApi) {
        this.taskactionsApi = new TaskActionsApi(alfrescoApi);
        this.activitiCommentsApi = new ActivitiCommentsApi(alfrescoApi);
        this.checklistsApi = new ChecklistsApi(alfrescoApi);
        this.taskFormsApi = new TaskFormsApi(alfrescoApi);
        this.tasksApi = new TasksApi(alfrescoApi);
        this.contentApi = new ContentApi(alfrescoApi);
    };
    TaskApi.prototype.addSubtask = function (taskId, taskRepresentation) {
        return this.checklistsApi.addSubtask(taskId, taskRepresentation);
    };
    TaskApi.prototype.addTaskComment = function (commentRequest, taskId) {
        return this.activitiCommentsApi.addTaskComment(commentRequest, taskId);
    };
    TaskApi.prototype.assignTask = function (taskId, userIdentifier) {
        return this.taskactionsApi.assignTask(taskId, userIdentifier);
    };
    TaskApi.prototype.attachForm = function (taskId, formIdentifier) {
        return this.taskactionsApi.attachForm(taskId, formIdentifier);
    };
    TaskApi.prototype.claimTask = function (taskId) {
        return this.taskactionsApi.claimTask(taskId);
    };
    TaskApi.prototype.completeTaskForm = function (taskId, completeTaskFormRepresentation) {
        return this.taskFormsApi.completeTaskForm(taskId, completeTaskFormRepresentation);
    };
    TaskApi.prototype.completeTask = function (taskId) {
        return this.taskactionsApi.completeTask(taskId);
    };
    TaskApi.prototype.createNewTask = function (taskRepresentation) {
        return this.tasksApi.createNewTask(taskRepresentation);
    };
    TaskApi.prototype.createRelatedContentOnTask = function (taskId, relatedContent, opts) {
        return this.contentApi.createRelatedContentOnTask(taskId, relatedContent, opts);
    };
    TaskApi.prototype.deleteTask = function (taskId) {
        return this.tasksApi.deleteTask(taskId);
    };
    TaskApi.prototype.filterTasks = function (tasksFilter) {
        return this.tasksApi.filterTasks(tasksFilter);
    };
    TaskApi.prototype.getChecklist = function (taskId) {
        return this.checklistsApi.getChecklist(taskId);
    };
    TaskApi.prototype.getTaskAuditLog = function (taskId) {
        return this.tasksApi.getTaskAuditLog(taskId);
    };
    TaskApi.prototype.getTaskAuditJson = function (taskId) {
        return this.tasksApi.getTaskAuditLog(taskId);
    };
    TaskApi.prototype.getTaskAuditPdf = function (taskId) {
        return this.tasksApi.getTaskAuditPdf(taskId);
    };
    TaskApi.prototype.getRelatedContentForTask = function (taskId, opts) {
        return this.contentApi.getRelatedContentForTask(taskId, opts);
    };
    TaskApi.prototype.getRestFieldValuesColumn = function (taskId, field, column) {
        return this.taskFormsApi.getRestFieldColumnValues(taskId, field, column);
    };
    TaskApi.prototype.getRestFieldValues = function (taskId, field) {
        return this.taskFormsApi.getRestFieldValues(taskId, field);
    };
    TaskApi.prototype.getTaskComments = function (taskId, opts) {
        return this.activitiCommentsApi.getTaskComments(taskId, opts);
    };
    TaskApi.prototype.getTaskForm = function (taskId) {
        return this.taskFormsApi.getTaskForm(taskId);
    };
    TaskApi.prototype.getTask = function (taskId) {
        return this.tasksApi.getTask(taskId);
    };
    TaskApi.prototype.involveUser = function (taskId, userIdentifier) {
        return this.taskactionsApi.involveUser(taskId, userIdentifier);
    };
    TaskApi.prototype.listTasks = function (tasksQuery) {
        return this.tasksApi.listTasks(tasksQuery);
    };
    TaskApi.prototype.orderChecklist = function (taskId, orderRepresentation) {
        return this.checklistsApi.orderChecklist(taskId, orderRepresentation);
    };
    TaskApi.prototype.removeForm = function (taskId) {
        return this.taskactionsApi.removeForm(taskId);
    };
    TaskApi.prototype.removeInvolvedUser = function (taskId, groupId) {
        return this.taskactionsApi.removeInvolvedUser(taskId, groupId);
    };
    TaskApi.prototype.saveTaskForm = function (taskId, saveTaskFormRepresentation) {
        return this.taskFormsApi.saveTaskForm(taskId, saveTaskFormRepresentation);
    };
    TaskApi.prototype.unclaimTask = function (taskId) {
        return this.taskactionsApi.unclaimTask(taskId);
    };
    TaskApi.prototype.updateTask = function (taskId, updated) {
        return this.tasksApi.updateTask(taskId, updated);
    };
    return TaskApi;
}());
export { TaskApi };
//# sourceMappingURL=../../../../../../../src/api-legacy/activiti-rest-api/src/api/TaskApi.js.map