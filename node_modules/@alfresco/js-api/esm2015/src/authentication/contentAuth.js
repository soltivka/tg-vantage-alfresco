/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import ee from 'event-emitter';
import { AuthenticationApi } from '../api/auth-rest-api/api/authentication.api';
import { AlfrescoApiClient } from '../alfrescoApiClient';
import { Storage } from '../storage';
export class ContentAuth extends AlfrescoApiClient {
    constructor(config, alfrescoApi) {
        super();
        this.className = 'ContentAuth';
        this.storage = new Storage();
        this.storage.setDomainPrefix(config.domainPrefix);
        this.setConfig(config);
        this.authApi = new AuthenticationApi(alfrescoApi);
    }
    setConfig(config) {
        this.config = config;
        this.basePath = this.config.hostEcm + '/' + this.config.contextRoot + '/api/-default-/public/authentication/versions/1';
        this.ticketStorageLabel = 'ticket-ECM';
        if (this.config.ticketEcm) {
            this.setTicket(config.ticketEcm);
        }
        else if (this.storage.getItem(this.ticketStorageLabel)) {
            this.setTicket(this.storage.getItem(this.ticketStorageLabel));
        }
    }
    changeHost() {
        this.basePath = this.config.hostEcm + '/' + this.config.contextRoot + '/api/-default-/public/authentication/versions/1';
        this.ticket = undefined;
    }
    saveUsername(username) {
        if (this.storage.supportsStorage()) {
            this.storage.setItem('ACS_USERNAME', username);
        }
    }
    login(username, password) {
        this.authentications.basicAuth.username = username;
        this.authentications.basicAuth.password = password;
        let loginRequest = {};
        loginRequest.userId = this.authentications.basicAuth.username;
        loginRequest.password = this.authentications.basicAuth.password;
        let promise = new Promise((resolve, reject) => {
            this.authApi.createTicket(loginRequest)
                .then((data) => {
                this.saveUsername(username);
                this.setTicket(data.entry.id);
                promise.emit('success');
                this.emit('logged-in');
                resolve(data.entry.id);
            })
                .catch((error) => {
                this.saveUsername('');
                if (error.status === 401) {
                    promise.emit('unauthorized');
                }
                else if (error.status === 403) {
                    promise.emit('forbidden');
                }
                else {
                    promise.emit('error');
                }
                reject(error);
            });
        });
        ee(promise);
        return promise;
    }
    validateTicket() {
        this.setTicket(this.config.ticketEcm);
        let promise = new Promise((resolve, reject) => {
            this.authApi.validateTicket().then((data) => {
                this.setTicket(data.entry.id);
                promise.emit('success');
                this.emit('logged-in');
                resolve(data.entry.id);
            }, (error) => {
                if (error.status === 401) {
                    promise.emit('unauthorized');
                }
                promise.emit('error');
                reject(error);
            });
        });
        ee(promise);
        return promise;
    }
    logout() {
        this.saveUsername('');
        let promise = new Promise((resolve, reject) => {
            this.authApi.deleteTicket().then(() => {
                promise.emit('logout');
                this.invalidateSession();
                resolve('logout');
            }, (error) => {
                if (error.status === 401) {
                    promise.emit('unauthorized');
                }
                promise.emit('error');
                reject(error);
            });
        });
        ee(promise);
        return promise;
    }
    setTicket(ticket) {
        this.authentications.basicAuth.username = 'ROLE_TICKET';
        this.authentications.basicAuth.password = ticket;
        this.config.ticketEcm = ticket;
        this.storage.setItem(this.ticketStorageLabel, ticket);
        this.ticket = ticket;
    }
    getTicket() {
        return this.ticket;
    }
    invalidateSession() {
        this.storage.removeItem(this.ticketStorageLabel);
        this.authentications.basicAuth.username = null;
        this.authentications.basicAuth.password = null;
        this.config.ticketEcm = null;
        this.ticket = null;
    }
    isLoggedIn() {
        return !!this.ticket;
    }
    getAuthentication() {
        return this.authentications;
    }
}
//# sourceMappingURL=../../../../src/authentication/contentAuth.js.map