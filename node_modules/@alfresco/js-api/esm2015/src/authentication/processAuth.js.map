{"version":3,"file":"processAuth.js","sourceRoot":"","sources":["processAuth.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport ee from 'event-emitter';\nimport { AlfrescoApiClient } from '../alfrescoApiClient';\nimport { AlfrescoApiConfig } from '../alfrescoApiConfig';\nimport { Authentication } from './authentication';\nimport { Storage } from '../storage';\n\nexport class ProcessAuth extends AlfrescoApiClient {\n\n    ticket: string;\n    storage: Storage;\n\n    authentications: Authentication = {\n        'basicAuth': { ticket: '' }, type: 'activiti'\n    };\n\n    constructor(config: AlfrescoApiConfig) {\n        super();\n        this.storage = new Storage();\n        this.storage.setDomainPrefix(config.domainPrefix);\n\n        this.className = 'ProcessAuth';\n\n        if (!this.isBrowser()) {\n            this.defaultHeaders = {\n                'user-agent': 'alfresco-js-api'\n            };\n        }\n\n        this.setConfig(config);\n    }\n\n    setConfig(config: AlfrescoApiConfig) {\n        this.config = config;\n        this.ticket = undefined;\n\n        this.basePath = config.hostBpm + '/' + this.config.contextRootBpm;   //Activiti Call\n\n        if (this.config.ticketBpm) {\n            this.setTicket(config.ticketBpm);\n        } else if (this.storage.getItem('ticket-BPM')) {\n            this.setTicket(this.storage.getItem('ticket-BPM'));\n        }\n\n    }\n\n    changeHost() {\n        this.basePath = this.config.hostBpm + '/' + this.config.contextRootBpm;    //Activiti Call\n        this.ticket = undefined;\n    }\n\n    changeCsrfConfig(disableCsrf: boolean) {\n        this.config.disableCsrf = disableCsrf;\n    }\n\n    saveUsername(username: string) {\n        if (this.storage.supportsStorage()) {\n            this.storage.setItem('APS_USERNAME', username);\n        }\n    }\n\n    /**\n     * login Activiti API\n     * @param  username:   // Username to login\n     * @param  password:   // Password to login\n     *\n     * @returns A promise that returns {new authentication ticket} if resolved and {error} if rejected.\n     * */\n    login(username: string, password: string): Promise<any> {\n        this.authentications.basicAuth.username = username;\n        this.authentications.basicAuth.password = password;\n\n        let postBody = {}, pathParams = {}, queryParams = {};\n\n        let headerParams = {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Cache-Control': 'no-cache'\n        };\n        let formParams = {\n            j_username:  this.authentications.basicAuth.username,\n            j_password:  this.authentications.basicAuth.password,\n            _spring_security_remember_me: true,\n            submit: 'Login'\n        };\n\n        let contentTypes = ['application/x-www-form-urlencoded'];\n        let accepts = ['application/json'];\n\n        let promise: any = new Promise((resolve, reject) => {\n            this.callApi(\n                '/app/authentication', 'POST',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                contentTypes, accepts\n            ).then(\n                () => {\n                    this.saveUsername(username);\n                    let ticket = this.basicAuth( this.authentications.basicAuth.username,  this.authentications.basicAuth.password);\n                    this.setTicket(ticket);\n                    promise.emit('success');\n                    this.emit('logged-in');\n                    resolve(ticket);\n                },\n                (error) => {\n                    this.saveUsername('');\n                    if (error.status === 401) {\n                        promise.emit('unauthorized');\n                    } else if (error.status === 403) {\n                        promise.emit('forbidden');\n                    } else {\n                        promise.emit('error');\n                    }\n                    reject(error);\n                });\n        });\n\n        ee(promise); // jshint ignore:line\n\n        return promise;\n    }\n\n    /**\n     * logout Alfresco API\n     *\n     * @returns {Promise} A promise that returns {new authentication ticket} if resolved and {error} if rejected.\n     * */\n    logout(): Promise<any> {\n        this.saveUsername('');\n        let postBody = {}, pathParams = {}, queryParams = {}, headerParams = {}, formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        let promise: any = new Promise((resolve, reject) => {\n            this.callApi(\n                '/app/logout', 'GET',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                contentTypes, accepts\n            ).then(\n                () => {\n                    this.invalidateSession();\n                    promise.emit('logout');\n                    resolve('logout');\n                },\n                (error) => {\n                    if (error.status === 401) {\n                        promise.emit('unauthorized');\n                    }\n                    promise.emit('error');\n                    reject(error);\n                });\n        });\n\n        ee(promise);\n\n        return promise;\n    }\n\n    /**\n     * Set the current Ticket\n     *\n     * @param  Ticket\n     * */\n    setTicket(ticket: string) {\n        this.authentications.basicAuth.ticket = ticket;\n        this.authentications.basicAuth.password = null;\n        this.config.ticketBpm = ticket;\n        this.storage.setItem('ticket-BPM', ticket);\n        this.ticket = ticket;\n    }\n\n    invalidateSession() {\n        this.storage.removeItem('ticket-BPM');\n        this.authentications.basicAuth.ticket = null;\n        this.authentications.basicAuth.password = null;\n        this.authentications.basicAuth.username = null;\n        this.config.ticketBpm = null;\n        this.ticket = null;\n    }\n\n    /**\n     * Get the current Ticket\n     * */\n    getTicket(): string {\n        return this.ticket;\n    }\n\n    /**\n     * If the client is logged in return true\n     */\n    isLoggedIn(): boolean {\n        return !!this.ticket;\n    }\n\n    /**\n     * return the Authentication\n     * */\n    getAuthentication(): any {\n        return  this.authentications;\n    }\n}\n"]}