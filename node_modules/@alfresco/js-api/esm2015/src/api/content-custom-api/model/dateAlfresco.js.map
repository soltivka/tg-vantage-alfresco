{"version":3,"file":"dateAlfresco.js","sourceRoot":"","sources":["dateAlfresco.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;AAEF,MAAM,OAAO,YAAa,SAAQ,IAAI;IAOlC,MAAM,CAAC,SAAS,CAAC,aAAkB;QAC/B,IAAI,aAAa,YAAY,IAAI,EAAE;YAC/B,OAAO,aAAa,CAAC;SACxB;aAAM,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;YAC1C,OAAO,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;SAClC;QAED,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,YAAY,GAAG,aAAa,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;QACrF,IAAI,OAAO,GAAG,YAAY,GAAG,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;QACnG,IAAI,KAAK,GAAG,YAAY,GAAG,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACnF,IAAI,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC7C,IAAI,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QACjD,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,YAAY,GAAG,KAAK,CAAC,CAAC;QAChE,OAAO,UAAU,CAAC;IACtB,CAAC;IAOD,MAAM,CAAC,aAAa,CAAC,aAAqB;QAKtC,IAAI,SAAS,GAAG,aAAa,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC;YACzD,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClK,CAAC;IAOD,MAAM,CAAC,iBAAiB,CAAC,aAAqB;QAC1C,IAAI,KAAK,GAAG,2BAA2B,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC5D,IAAI,KAAK,KAAK,IAAI,EAAE;YAChB,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;SAC9G;aAAM;YACH,OAAO,CAAC,CAAC;SACZ;IACL,CAAC;CAEJ","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nexport class DateAlfresco extends Date {\n\n    /**\n     * Parses an ISO-8601 string representation of a date value.\n     * @param  dateToConvert The date value as a string.\n     * @returns  The parsed date object.\n     */\n    static parseDate(dateToConvert: any): Date {\n        if (dateToConvert instanceof Date) {\n            return dateToConvert;\n        } else if (typeof dateToConvert === 'number') {\n            return new Date(dateToConvert);\n        }\n\n        let dateLength = 10;\n        let separatorPos = dateToConvert.substring(dateLength).search(/[\\+\\-]/) + dateLength;\n        let dateStr = separatorPos > dateLength ? dateToConvert.substring(0, separatorPos) : dateToConvert;\n        let tzStr = separatorPos > dateLength ? dateToConvert.substring(separatorPos) : '';\n        let parsedDate = this.parseDateTime(dateStr);\n        let tzOffsetMins = this.parseDateTimeZone(tzStr);\n        parsedDate.setTime(parsedDate.getTime() + tzOffsetMins * 60000);\n        return parsedDate;\n    }\n\n    /**\n     * Parses the date component of a ISO-8601 string representation of a date value.\n     * @param dateToConvert The date value as a string.\n     * @returns The parsed date object.\n     */\n    static parseDateTime(dateToConvert: string): Date {\n        // TODO: review when Safari 10 is released\n        // return new Date(str.replace(/T/i, ' '));\n\n        // Compatible with Safari 9.1.2\n        let dateParts = dateToConvert.split(/[^0-9]/).map(function (s) {\n            return parseInt(s, 10);\n        });\n        return new Date(Date.UTC(dateParts[0], dateParts[1] - 1 || 0, dateParts[2] || 1, dateParts[3] || 0, dateParts[4] || 0, dateParts[5] || 0, dateParts[6] || 0));\n    }\n\n    /**\n     * Parses the timezone component of a ISO-8601 string representation of a date value.\n     * @param dateToConvert The timezone offset as a string, e.g. '+0000', '+2000' or '-0500'.\n     * @returns The number of minutes offset from UTC.\n     */\n    static parseDateTimeZone(dateToConvert: string): number {\n        let match = /([\\+\\-])(\\d{2}):?(\\d{2})?/.exec(dateToConvert);\n        if (match !== null) {\n            return (parseInt(match[1] + '1', 10) * -1 * (parseInt(match[2], 10) * 60) + parseInt(match[3] || '0', 10));\n        } else {\n            return 0;\n        }\n    }\n\n}\n"]}