{"version":3,"file":"declassificationExemptions.api.js","sourceRoot":"","sources":["declassificationExemptions.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { DeclassificationExemptionBody } from '../model/declassificationExemptionBody';\nimport { DeclassificationExemptionEntry } from '../model/declassificationExemptionEntry';\nimport { DeclassificationExemptionsPaging } from '../model/declassificationExemptionsPaging';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Declassificationexemptions service.\n* @module DeclassificationExemptionsApi\n*/\nexport class DeclassificationExemptionsApi extends BaseApi {\n    /**\n    * Create a declassification exemption\n    *\n    * Creates a new declassification exemption.\n\n**Note:** You can create more than one exemption by specifying a list of exemptions in the JSON body.\nFor example, the following JSON body creates two declassification exemptions:\nJSON\n[\n  {\n    \\\"code\\\":\\\"My Code1\\\",\n    \\\"description\\\":\\\"My Description1\\\"\n  },\n  {\n    \\\"code\\\":\\\"My Code2\\\",\n    \\\"description\\\":\\\"My Description2\\\"\n  }\n]\n\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 2,\n      \\\"hasMoreItems\\\": false,\n      \\\"totalItems\\\": 2,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 100\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n\n    *\n    * @param declassificationExemption Declassification exemption\n    * @return Promise<DeclassificationExemptionEntry>\n    */\n    createDeclassificationExemption(declassificationExemption: DeclassificationExemptionBody): Promise<DeclassificationExemptionEntry> {\n        throwIfNotDefined(declassificationExemption, 'declassificationExemption');\n\n        let postBody = declassificationExemption;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/declassification-exemptions', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, DeclassificationExemptionEntry);\n    }\n    /**\n        * Delete a declassification exemption\n        *\n        * Deletes the declassification exemption with id **declassificationExemptionId**. You can't delete a classification exemption that is being used to classify content.\n        *\n        * @param declassificationExemptionId The identifier for the declassification exemption\n        * @return Promise<{}>\n        */\n    deleteDeclassificationExemption(declassificationExemptionId: string): Promise<any> {\n        throwIfNotDefined(declassificationExemptionId, 'declassificationExemptionId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'declassificationExemptionId': declassificationExemptionId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/declassification-exemptions/{declassificationExemptionId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * List all declassification exemptions\n        *\n        * Gets all declassification exemptions.\n        *\n        * @param opts Optional parameters\n        * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\n        * @param opts.maxItems The maximum number of items to return in the list.\n        * @return Promise<DeclassificationExemptionsPaging>\n        */\n    listDeclassificationExemptions(opts?: any): Promise<DeclassificationExemptionsPaging> {\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/declassification-exemptions', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, DeclassificationExemptionsPaging);\n    }\n    /**\n        * Get declassification exemption information\n        *\n        * Gets the declassification exemption with id **declassificationExemptionId**.\n        *\n        * @param declassificationExemptionId The identifier for the declassification exemption\n        * @return Promise<DeclassificationExemptionEntry>\n        */\n    showDeclassificationExemptionById(declassificationExemptionId: string): Promise<DeclassificationExemptionEntry> {\n        throwIfNotDefined(declassificationExemptionId, 'declassificationExemptionId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'declassificationExemptionId': declassificationExemptionId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/declassification-exemptions/{declassificationExemptionId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, DeclassificationExemptionEntry);\n    }\n    /**\n        * Update a declassification exemption\n        *\n        * Updates the declassification exemption with id **declassificationExemptionId**. For example, you can rename a declassification exemption.\n        *\n        * @param declassificationExemptionId The identifier for the declassification exemption\n        * @param declassificationExemption Declassification exemption\n        * @return Promise<DeclassificationExemptionEntry>\n        */\n    updateDeclassificationExemption(declassificationExemptionId: string, declassificationExemption: DeclassificationExemptionBody): Promise<DeclassificationExemptionEntry> {\n        throwIfNotDefined(declassificationExemptionId, 'declassificationExemptionId');\n        throwIfNotDefined(declassificationExemption, 'declassificationExemption');\n\n        let postBody = declassificationExemption;\n\n        let pathParams = {\n            'declassificationExemptionId': declassificationExemptionId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/declassification-exemptions/{declassificationExemptionId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, DeclassificationExemptionEntry);\n    }\n\n}\n"]}