/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { FavoriteEntry } from '../model/favoriteEntry';
import { FavoritePaging } from '../model/favoritePaging';
import { FavoriteSiteEntry } from '../model/favoriteSiteEntry';
import { SiteEntry } from '../model/siteEntry';
import { SitePaging } from '../model/sitePaging';
import { BaseApi } from './base.api';
import { throwIfNotDefined } from '../../../assert';
import { buildCollectionParam } from '../../../alfrescoApiClient';
export class FavoritesApi extends BaseApi {
    createFavorite(personId, favoriteBodyCreate, opts) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(favoriteBodyCreate, 'favoriteBodyCreate');
        opts = opts || {};
        const postBody = favoriteBodyCreate;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoriteEntry);
    }
    createSiteFavorite(personId, favoriteSiteBodyCreate, opts) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(favoriteSiteBodyCreate, 'favoriteSiteBodyCreate');
        opts = opts || {};
        const postBody = favoriteSiteBodyCreate;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorite-sites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoriteSiteEntry);
    }
    deleteFavorite(personId, favoriteId) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(favoriteId, 'favoriteId');
        const postBody = null;
        const pathParams = {
            'personId': personId, 'favoriteId': favoriteId
        };
        const queryParams = {};
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorites/{favoriteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteSiteFavorite(personId, siteId) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(siteId, 'siteId');
        const postBody = null;
        const pathParams = {
            'personId': personId, 'siteId': siteId
        };
        const queryParams = {};
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorite-sites/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getFavorite(personId, favoriteId, opts) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(favoriteId, 'favoriteId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'personId': personId, 'favoriteId': favoriteId
        };
        const queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorites/{favoriteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoriteEntry);
    }
    getFavoriteSite(personId, siteId, opts) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(siteId, 'siteId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'personId': personId, 'siteId': siteId
        };
        const queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorite-sites/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
    }
    listFavoriteSitesForPerson(personId, opts) {
        throwIfNotDefined(personId, 'personId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorite-sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SitePaging);
    }
    listFavorites(personId, opts) {
        throwIfNotDefined(personId, 'personId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
            'where': opts['where'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoritePaging);
    }
}
//# sourceMappingURL=../../../../../../src/api/content-rest-api/api/favorites.api.js.map