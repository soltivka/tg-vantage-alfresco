{"version":3,"file":"nodes.api.js","sourceRoot":"","sources":["nodes.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { AssociationBody } from '../model/associationBody';\nimport { AssociationEntry } from '../model/associationEntry';\nimport { ChildAssociationBody } from '../model/childAssociationBody';\nimport { ChildAssociationEntry } from '../model/childAssociationEntry';\nimport { DirectAccessUrlEntry } from '../model/directAccessUrlEntry';\nimport { NodeAssociationPaging } from '../model/nodeAssociationPaging';\nimport { NodeBodyCopy } from '../model/nodeBodyCopy';\nimport { NodeBodyCreate } from '../model/nodeBodyCreate';\nimport { NodeBodyLock } from '../model/nodeBodyLock';\nimport { NodeBodyMove } from '../model/nodeBodyMove';\nimport { NodeBodyUpdate } from '../model/nodeBodyUpdate';\nimport { NodeChildAssociationPaging } from '../model/nodeChildAssociationPaging';\nimport { NodeEntry } from '../model/nodeEntry';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\n\n/**\n* Nodes service.\n* @module NodesApi\n*/\nexport class NodesApi extends BaseApi {\n    /**\n    * Copy a node\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nCopies the node **nodeId** to the parent folder node **targetParentId**. You specify the **targetParentId** in the request body.\n\nThe new node has the same name as the source node unless you specify a new **name** in the request body.\n\nIf the source **nodeId** is a folder, then all of its children are also copied.\n\nIf the source **nodeId** is a file, it's properties, aspects and tags are copied, it's ratings, comments and locks are not.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param nodeBodyCopy The targetParentId and, optionally, a new name which should include the file extension.\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<NodeEntry>\n    */\n    copyNode(nodeId: string, nodeBodyCopy: NodeBodyCopy, opts?: any): Promise<NodeEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(nodeBodyCopy, 'nodeBodyCopy');\n\n        opts = opts || {};\n        const postBody = nodeBodyCopy;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/copy', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , NodeEntry);\n    }\n/**\n    * Create node association\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nCreate an association, with the given association type, between the source **nodeId** and a target node.\n\n**Note:** You can create more than one association by\nspecifying a list of associations in the JSON body like this:\n\nJSON\n[\n  {\n     \\\"targetId\\\": \\\"string\\\",\n     \\\"assocType\\\": \\\"string\\\"\n  },\n  {\n    \\\"targetId\\\": \\\"string\\\",\n    \\\"assocType\\\": \\\"string\\\"\n  }\n]\n\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 2,\n      \\\"hasMoreItems\\\": false,\n      \\\"totalItems\\\": 2,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 100\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n\n    *\n    * @param nodeId The identifier of a source node.\n    * @param associationBodyCreate The target node id and assoc type.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<AssociationEntry>\n    */\n    createAssociation(nodeId: string, associationBodyCreate: AssociationBody, opts?: any): Promise<AssociationEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(associationBodyCreate, 'associationBodyCreate');\n\n        opts = opts || {};\n        const postBody = associationBodyCreate;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/targets', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , AssociationEntry);\n    }\n/**\n    * Create a node\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nCreate a node and add it as a primary child of node **nodeId**.\n\nThis endpoint supports both JSON and multipart/form-data (file upload).\n\n**Using multipart/form-data**\n\nUse the **filedata** field to represent the content to upload, for example, the following curl command will\ncreate a node with the contents of test.txt in the test user's home folder.\n\ncurl -utest:test -X POST host:port/alfresco/api/-default-/public/alfresco/versions/1/nodes/-my-/children -F filedata=@test.txt\n\nYou can use the **name** field to give an alternative name for the new file.\n\nYou can use the **nodeType** field to create a specific type. The default is cm:content.\n\nYou can use the **renditions** field to create renditions (e.g. doclib) asynchronously upon upload.\nAlso, as requesting rendition is a background process,\nany rendition failure (e.g. No transformer is currently available) will not fail the whole upload and has the potential to silently fail.\n\nUse **overwrite** to overwrite an existing file, matched by name. If the file is versionable,\nthe existing content is replaced.\n\nWhen you overwrite existing content, you can set the **majorVersion** boolean field to **true** to indicate a major version\nshould be created. The default for **majorVersion** is **false**.\nSetting  **majorVersion** enables versioning of the node, if it is not already versioned.\n\nWhen you overwrite existing content, you can use the **comment** field to add a version comment that appears in the\nversion history. This also enables versioning of this node, if it is not already versioned.\n\nYou can set the **autoRename** boolean field to automatically resolve name clashes. If there is a name clash, then\nthe API method tries to create a unique name using an integer suffix.\n\nYou can use the **relativePath** field to specify the folder structure to create relative to the node **nodeId**.\nFolders in the **relativePath** that do not exist are created before the node is created.\n\nAny other field provided will be treated as a property to set on the newly created node.\n\n**Note:** setting properties of type d:content and d:category are not supported.\n\n**Using JSON**\n\nYou must specify at least a **name** and **nodeType**. For example, to create a folder:\nJSON\n{\n  \\\"name\\\":\\\"My Folder\\\",\n  \\\"nodeType\\\":\\\"cm:folder\\\"\n}\n\nYou can create an empty file like this:\nJSON\n{\n  \\\"name\\\":\\\"My text file.txt\\\",\n  \\\"nodeType\\\":\\\"cm:content\\\"\n}\n\nYou can update binary content using the PUT /nodes/{nodeId} API method.\n\nYou can create a folder, or other node, inside a folder hierarchy:\nJSON\n{\n  \\\"name\\\":\\\"My Special Folder\\\",\n  \\\"nodeType\\\":\\\"cm:folder\\\",\n  \\\"relativePath\\\":\\\"X/Y/Z\\\"\n}\n\nThe **relativePath** specifies the folder structure to create relative to the node **nodeId**. Folders in the\n**relativePath** that do not exist are created before the node is created.\n\nYou can set properties when you create a new node:\nJSON\n{\n  \\\"name\\\":\\\"My Other Folder\\\",\n  \\\"nodeType\\\":\\\"cm:folder\\\",\n  \\\"properties\\\":\n  {\n    \\\"cm:title\\\":\\\"Folder title\\\",\n    \\\"cm:description\\\":\\\"This is an important folder\\\"\n  }\n}\n\nYou can set multi-value properties when you create a new node which supports properties of type multiple.\n JSON\n{\n  \\\"name\\\":\\\"My Other Folder\\\",\n  \\\"nodeType\\\":\\\"custom:destination\\\",\n  \\\"properties\\\":\n  {\n    \\\"cm:title\\\":\\\"Folder title\\\",\n    \\\"cm:description\\\":\\\"This is an important folder\\\",\n    \\\"custom:locations\\\": [\n                         \\\"location X\\\",\n                         \\\"location Y\\\"\n                        ]\n  }\n}\n\nAny missing aspects are applied automatically. For example, **cm:titled** in the JSON shown above. You can set aspects\nexplicitly, if needed, using an **aspectNames** field.\n\n**Note:** setting properties of type d:content and d:category are not supported.\n\nYou can also optionally disable (or enable) inherited permissions via *isInheritanceEnabled* flag:\nJSON\n{\n  \\\"permissions\\\":\n    {\n      \\\"isInheritanceEnabled\\\": false,\n      \\\"locallySet\\\":\n        [\n          {\\\"authorityId\\\": \\\"GROUP_special\\\", \\\"name\\\": \\\"Read\\\", \\\"accessStatus\\\":\\\"DENIED\\\"},\n          {\\\"authorityId\\\": \\\"testuser\\\", \\\"name\\\": \\\"Contributor\\\", \\\"accessStatus\\\":\\\"ALLOWED\\\"}\n        ]\n    }\n}\n\nTypically, for files and folders, the primary children are created within the parent folder using the default \\\"cm:contains\\\" assocType.\nIf the content model allows then it is also possible to create primary children with a different assoc type. For example:\nJSON\n{\n  \\\"name\\\":\\\"My Node\\\",\n  \\\"nodeType\\\":\\\"my:specialNodeType\\\",\n  \\\"association\\\":\n  {\n    \\\"assocType\\\":\\\"my:specialAssocType\\\"\n  }\n}\n\nAdditional associations can be added after creating a node. You can also add associations at the time the node is created. This is\nrequired, for example, if the content model specifies that a node has mandatory associations to one or more existing nodes. You can optionally\nspecify an array of **secondaryChildren** to create one or more secondary child associations, such that the newly created node acts as a parent node.\nYou can optionally specify an array of **targets** to create one or more peer associations such that the newly created node acts as a source node.\nFor example, to associate one or more secondary children at time of creation:\nJSON\n{\n  \\\"name\\\":\\\"My Folder\\\",\n  \\\"nodeType\\\":\\\"cm:folder\\\",\n  \\\"secondaryChildren\\\":\n    [ {\\\"childId\\\":\\\"abcde-01234-...\\\", \\\"assocType\\\":\\\"my:specialChildAssocType\\\"} ]\n}\n\nFor example, to associate one or more targets at time of creation:\nJSON\n{\n  \\\"name\\\":\\\"My Folder\\\",\n  \\\"nodeType\\\":\\\"cm:folder\\\",\n  \\\"targets\\\":\n    [ {\\\"targetId\\\":\\\"abcde-01234-...\\\", \\\"assocType\\\":\\\"my:specialPeerAssocType\\\"} ]\n}\n\n**Note:** You can create more than one child by\nspecifying a list of nodes in the JSON body. For example, the following JSON\nbody creates two folders inside the specified **nodeId**, if the **nodeId** identifies\na folder:\n\nJSON\n[\n  {\n    \\\"name\\\":\\\"My Folder 1\\\",\n    \\\"nodeType\\\":\\\"cm:folder\\\"\n  },\n  {\n    \\\"name\\\":\\\"My Folder 2\\\",\n    \\\"nodeType\\\":\\\"cm:folder\\\"\n  }\n]\n\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 2,\n      \\\"hasMoreItems\\\": false,\n      \\\"totalItems\\\": 2,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 100\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n\n    *\n    * @param nodeId The identifier of a node. You can also use one of these well-known aliases:\n* -my-\n* -shared-\n* -root-\n\n    * @param nodeBodyCreate The node information to create.\n    * @param opts Optional parameters\n    * @param opts.autoRename If true, then  a name clash will cause an attempt to auto rename by finding a unique name using an integer suffix.\n    * @param opts.include Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<NodeEntry>\n    */\n    createNode(nodeId: string, nodeBodyCreate: NodeBodyCreate, opts?: any, formParams?: any): Promise<NodeEntry| any> {\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(nodeBodyCreate, 'nodeBodyCreate');\n\n        opts = opts || {};\n        let postBody = nodeBodyCreate;\n\n        let pathParams = {\n            'nodeId': nodeId\n        };\n\n        let queryParams = {\n            'autoRename': opts['autoRename'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {};\n        formParams = formParams || {};\n\n        let contentTypes, returnType = null;\n\n        if (formParams.filedata) {\n            contentTypes = ['multipart/form-data'];\n        } else {\n            contentTypes = ['application/json'];\n            returnType = NodeEntry;\n        }\n\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/children', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, returnType);\n    }\n/**\n    * Create secondary child\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nCreate a secondary child association, with the given association type, between the parent **nodeId** and a child node.\n\n**Note:** You can create more than one secondary child association by\nspecifying a list of associations in the JSON body like this:\n\nJSON\n[\n  {\n    \\\"childId\\\": \\\"string\\\",\n    \\\"assocType\\\": \\\"string\\\"\n  },\n  {\n    \\\"childId\\\": \\\"string\\\",\n    \\\"assocType\\\": \\\"string\\\"\n  }\n]\n\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 2,\n      \\\"hasMoreItems\\\": false,\n      \\\"totalItems\\\": 2,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 100\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n\n    *\n    * @param nodeId The identifier of a parent node.\n    * @param secondaryChildAssociationBodyCreate The child node id and assoc type.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<ChildAssociationEntry>\n    */\n    createSecondaryChildAssociation(nodeId: string, secondaryChildAssociationBodyCreate: ChildAssociationBody, opts?: any): Promise<ChildAssociationEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(secondaryChildAssociationBodyCreate, 'secondaryChildAssociationBodyCreate');\n\n        opts = opts || {};\n        const postBody = secondaryChildAssociationBodyCreate;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/secondary-children', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , ChildAssociationEntry);\n    }\n/**\n    * Delete node association(s)\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nDelete an association, or associations, from the source **nodeId* to a target node for the given association type.\n\nIf the association type is **not** specified, then all peer associations, of any type, in the direction\nfrom source to target, are deleted.\n\n**Note:** After removal of the peer association, or associations, from source to target, the two nodes may still have peer associations\nin the other direction.\n\n    *\n    * @param nodeId The identifier of a source node.\n    * @param targetId The identifier of a target node.\n    * @param opts Optional parameters\n    * @param opts.assocType Only delete associations of this type.\n    * @return Promise<{}>\n    */\n    deleteAssociation(nodeId: string, targetId: string, opts?: any): Promise<any> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(targetId, 'targetId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId,            'targetId': targetId\n        };\n\n        const queryParams = {\n            'assocType': opts['assocType']\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/targets/{targetId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Delete a node\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nDeletes the node **nodeId**.\n\nIf **nodeId** is a folder, then its children are also deleted.\n\nDeleted nodes move to the trashcan unless the **permanent** query parameter is **true** and the current user is the owner of the node or an admin.\n\nDeleting a node deletes it from its primary parent and also from any secondary parents. Peer associations are also deleted, where the deleted\nnode is either a source or target of an association. This applies recursively to any hierarchy of primary children of the deleted node.\n\n**Note:** If the node is not permanently deleted, and is later successfully restored to its former primary parent, then the primary\nchild association is restored. This applies recursively for any primary children. No other secondary child associations or\npeer associations are restored for any of the nodes in the primary parent-child hierarchy of restored nodes, regardless of whether the original\nassociations were to nodes inside or outside the restored hierarchy.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param opts Optional parameters\n    * @param opts.permanent If **true** then the node is deleted permanently, without moving to the trashcan.\nOnly the owner of the node or an admin can permanently delete the node.\n (default to false)\n    * @return Promise<{}>\n    */\n    deleteNode(nodeId: string, opts?: any): Promise<any> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'permanent': opts['permanent']\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Delete secondary child or children\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nDelete secondary child associations between the parent **nodeId** and child nodes for the given association type.\n\nIf the association type is **not** specified, then all secondary child associations, of any type in the direction\nfrom parent to secondary child, will be deleted. The child will still have a primary parent and may still be\nassociated as a secondary child with other secondary parents.\n\n    *\n    * @param nodeId The identifier of a parent node.\n    * @param childId The identifier of a child node.\n    * @param opts Optional parameters\n    * @param opts.assocType Only delete associations of this type.\n    * @return Promise<{}>\n    */\n    deleteSecondaryChildAssociation(nodeId: string, childId: string, opts?: any): Promise<any> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(childId, 'childId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId,            'childId': childId\n        };\n\n        const queryParams = {\n            'assocType': opts['assocType']\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/secondary-children/{childId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Get a node\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGet information for node **nodeId**.\n\nYou can use the **include** parameter to return additional information.\n\n    *\n    * @param nodeId The identifier of a node. You can also use one of these well-known aliases:\n* -my-\n* -shared-\n* -root-\n\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n\n    * @param opts.relativePath A path relative to the **nodeId**. If you set this,\ninformation is returned on the node resolved by this path.\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<NodeEntry>\n    */\n    getNode(nodeId: string, opts?: any): Promise<NodeEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'relativePath': opts['relativePath'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , NodeEntry);\n    }\n/**\n    * Get node content\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the content of the node with identifier **nodeId**.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param opts Optional parameters\n    * @param opts.attachment **true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n (default to true)\n    * @param opts.ifModifiedSince Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, Wed, 09 Mar 2016 16:56:34 GMT.\n\n    * @param opts.range The Range header indicates the part of a document that the server should return.\nSingle part request supported, for example: bytes=1-10.\n\n    * @return Promise<Blob>\n    */\n    getNodeContent(nodeId: string, opts?: any): Promise<Blob> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'attachment': opts['attachment']\n        };\n\n        const headerParams = {\n            'If-Modified-Since': opts['ifModifiedSince'],            'Range': opts['range']\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/octet-stream'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/content', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , 'blob');\n    }\n/**\n    * List node children\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of children of the parent node **nodeId**.\n\nMinimal information for each child is returned by default.\n\nYou can use the **include** parameter to return additional information.\n\nThe list of child nodes includes primary children and secondary children, if there are any.\n\nYou can use the **include** parameter (include=association) to return child association details\nfor each child, including the **assocTyp**e and the **isPrimary** flag.\n\nThe default sort order for the returned list is for folders to be sorted before files, and by ascending name.\n\nYou can override the default using **orderBy** to specify one or more fields to sort by. The default order is always ascending, but\nyou can use an optional **ASC** or **DESC** modifier to specify an ascending or descending sort order.\n\nFor example, specifying orderBy=name DESC returns a mixed folder/file list in descending **name** order.\n\nYou can use any of the following fields to order the results:\n* isFolder\n* name\n* mimeType\n* nodeType\n* sizeInBytes\n* modifiedAt\n* createdAt\n* modifiedByUser\n* createdByUser\n\n    *\n    * @param nodeId The identifier of a node. You can also use one of these well-known aliases:\n* -my-\n* -shared-\n* -root-\n\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n    * @param opts.where Optionally filter the list. Here are some examples:\n\n*   where=(isFolder=true)\n\n*   where=(isFile=true)\n\n*   where=(nodeType='my:specialNodeType')\n\n*   where=(nodeType='my:specialNodeType INCLUDESUBTYPES')\n\n*   where=(isPrimary=true)\n\n*   where=(assocType='my:specialAssocType')\n\n*   where=(isPrimary=false and assocType='my:specialAssocType')\n\n    * @param opts.include Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* aspectNames\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* properties\n* permissions\n\n    * @param opts.relativePath Return information on children in the folder resolved by this path. The path is relative to **nodeId**.\n    * @param opts.includeSource Also include **source** in addition to **entries** with folder information on the parent node – either the specified parent **nodeId**, or as resolved by **relativePath**.\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<NodeChildAssociationPaging>\n    */\n    listNodeChildren(nodeId: string, opts?: any): Promise<NodeChildAssociationPaging> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),\n            'where': opts['where'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'relativePath': opts['relativePath'],\n            'includeSource': opts['includeSource'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/children', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , NodeChildAssociationPaging);\n    }\n/**\n    * List parents\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of parent nodes that are associated with the current child **nodeId**.\n\nThe list includes both the primary parent and any secondary parents.\n\n    *\n    * @param nodeId The identifier of a child node. You can also use one of these well-known aliases:\n* -my-\n* -shared-\n* -root-\n\n    * @param opts Optional parameters\n    * @param opts.where Optionally filter the list by **assocType** and/or **isPrimary**. Here are some example filters:\n\n*   where=(assocType='my:specialAssocType')\n\n*   where=(isPrimary=true)\n\n*   where=(isPrimary=false and assocType='my:specialAssocType')\n\n    * @param opts.include Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* aspectNames\n* isLink\n* isFavorite\n* isLocked\n* path\n* properties\n\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.includeSource Also include **source** (in addition to **entries**) with folder information on **nodeId**\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<NodeAssociationPaging>\n    */\n    listParents(nodeId: string, opts?: any): Promise<NodeAssociationPaging> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'where': opts['where'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'includeSource': opts['includeSource'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/parents', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , NodeAssociationPaging);\n    }\n/**\n    * List secondary children\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of secondary child nodes that are associated with the current parent **nodeId**, via a secondary child association.\n\n    *\n    * @param nodeId The identifier of a parent node. You can also use one of these well-known aliases:\n* -my-\n* -shared-\n* -root-\n\n    * @param opts Optional parameters\n    * @param opts.where Optionally filter the list by assocType. Here's an example:\n\n*   where=(assocType='my:specialAssocType')\n\n    * @param opts.include Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* aspectNames\n* isLink\n* isFavorite\n* isLocked\n* path\n* properties\n\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.includeSource Also include **source** (in addition to **entries**) with folder information on **nodeId**\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<NodeChildAssociationPaging>\n    */\n    listSecondaryChildren(nodeId: string, opts?: any): Promise<NodeChildAssociationPaging> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'where': opts['where'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'includeSource': opts['includeSource'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/secondary-children', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , NodeChildAssociationPaging);\n    }\n/**\n    * List source associations\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of source nodes that are associated with the current target **nodeId**.\n\n    *\n    * @param nodeId The identifier of a target node.\n    * @param opts Optional parameters\n    * @param opts.where Optionally filter the list by **assocType**. Here's an example:\n\n*   where=(assocType='my:specialAssocType')\n\n    * @param opts.include Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* aspectNames\n* isLink\n* isFavorite\n* isLocked\n* path\n* properties\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<NodeAssociationPaging>\n    */\n    listSourceAssociations(nodeId: string, opts?: any): Promise<NodeAssociationPaging> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'where': opts['where'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/sources', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , NodeAssociationPaging);\n    }\n/**\n    * List target associations\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of target nodes that are associated with the current source **nodeId**.\n\n    *\n    * @param nodeId The identifier of a source node.\n    * @param opts Optional parameters\n    * @param opts.where Optionally filter the list by **assocType**. Here's an example:\n\n*   where=(assocType='my:specialAssocType')\n\n    * @param opts.include Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* aspectNames\n* isLink\n* isFavorite\n* isLocked\n* path\n* properties\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<NodeAssociationPaging>\n    */\n    listTargetAssociations(nodeId: string, opts?: any): Promise<NodeAssociationPaging> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'where': opts['where'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/targets', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , NodeAssociationPaging);\n    }\n/**\n    * Lock a node\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nPlaces a lock on node **nodeId**.\n\n**Note:** you can only lock files. More specifically, a node can only be locked if it is\nof type cm:content or a subtype of cm:content.\n\nThe lock is owned by the current user, and prevents other users or processes from making updates to the node until the lock is released.\n\nIf the **timeToExpire** is not set or is zero, then the lock never expires.  Otherwise, the **timeToExpire** is the number of seconds before the lock expires.\n\nWhen a lock expires, the lock is released.\n\nIf the node is already locked, and the user is the lock owner, then the lock is renewed with the new **timeToExpire**.\n\nBy default, a lock is applied that allows the owner to update or delete the node.\nYou can use **type** to change the lock type to one of the following:\n* **ALLOW_OWNER_CHANGES** (default) changes to the node can be made only by the lock owner. This enum is the same value as the deprecated WRITE_LOCK described in org.alfresco.service.cmr.lock.LockType in the Alfresco Public Java API. This is the default value.\n* **FULL** no changes by any user are allowed. This enum is the same value as the deprecated READ_ONLY_LOCK described in org.alfresco.service.cmr.lock.LockType in the Alfresco Public Java API.\n\nBy default, a lock is persisted in the database. You can create a volatile in-memory lock by setting the **lifetime** property to EPHEMERAL.\nYou might choose use EPHEMERAL locks, for example, if you are taking frequent short-term locks that you don't need\nto be kept over a restart of the repository. In this case you don't need the\noverhead of writing the locks to the database.\n\nIf a lock on the node cannot be taken, then an error is returned.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param nodeBodyLock Lock details.\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<NodeEntry>\n    */\n    lockNode(nodeId: string, nodeBodyLock: NodeBodyLock, opts?: any): Promise<NodeEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(nodeBodyLock, 'nodeBodyLock');\n\n        opts = opts || {};\n        const postBody = nodeBodyLock;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/lock', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , NodeEntry);\n    }\n/**\n    * Move a node\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nMove the node **nodeId** to the parent folder node **targetParentId**.\n\nThe **targetParentId** is specified in the in request body.\n\nThe moved node retains its name unless you specify a new **name** in the request body.\n\nIf the source **nodeId** is a folder, then its children are also moved.\n\nThe move will effectively change the primary parent.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param nodeBodyMove The targetParentId and, optionally, a new name which should include the file extension.\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<NodeEntry>\n    */\n    moveNode(nodeId: string, nodeBodyMove: NodeBodyMove, opts?: any): Promise<NodeEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(nodeBodyMove, 'nodeBodyMove');\n\n        opts = opts || {};\n        const postBody = nodeBodyMove;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/move', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , NodeEntry);\n    }\n\n/**\n    * Unlock a node\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nDeletes a lock on node **nodeId**.\n\nThe current user must be the owner of the locks or have admin rights, otherwise an error is returned.\n\nIf a lock on the node cannot be released, then an error is returned.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<NodeEntry>\n    */\n    unlockNode(nodeId: string, opts?: any): Promise<NodeEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/unlock', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , NodeEntry);\n    }\n/**\n    * Update a node\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nUpdates the node **nodeId**. For example, you can rename a file or folder:\nJSON\n{\n  \\\"name\\\":\\\"My new name\\\"\n}\n\nYou can also set or update one or more properties:\nJSON\n{\n  \\\"properties\\\":\n  {\n    \\\"cm:title\\\":\\\"Folder title\\\"\n  }\n}\n\nYou can update multi-value properties of a node which supports properties of type multiple.\n JSON\n{\n  \\\"name\\\":\\\"My Other Folder\\\",\n  \\\"nodeType\\\":\\\"custom:destination\\\",\n  \\\"properties\\\":\n  {\n    \\\"cm:title\\\":\\\"Folder title\\\",\n    \\\"cm:description\\\":\\\"This is an important folder\\\",\n    \\\"custom:locations\\\": [\n                         \\\"location NewX\\\",\n                         \\\"location NewY\\\"\n                        ]\n  }\n}\n\n**Note:** setting properties of type d:content and d:category are not supported.\n\n**Note:** if you want to add or remove aspects, then you must use **GET /nodes/{nodeId}** first to get the complete set of *aspectNames*.\n\nYou can add (or remove) *locallySet* permissions, if any, in addition to any inherited permissions.\nYou can also optionally disable (or re-enable) inherited permissions via *isInheritanceEnabled* flag:\nJSON\n{\n  \\\"permissions\\\":\n    {\n      \\\"isInheritanceEnabled\\\": false,\n      \\\"locallySet\\\":\n        [\n          {\\\"authorityId\\\": \\\"GROUP_special\\\", \\\"name\\\": \\\"Read\\\", \\\"accessStatus\\\":\\\"DENIED\\\"},\n          {\\\"authorityId\\\": \\\"testuser\\\", \\\"name\\\": \\\"Contributor\\\", \\\"accessStatus\\\":\\\"ALLOWED\\\"}\n        ]\n    }\n}\n\n**Note:** if you want to add or remove locally set permissions then you must use **GET /nodes/{nodeId}** first to get the complete set of *locallySet* permissions.\n\n**Note:** Currently there is no optimistic locking for updates, so they are applied in \\\"last one wins\\\" order.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param nodeBodyUpdate The node information to update.\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<NodeEntry>\n    */\n    updateNode(nodeId: string, nodeBodyUpdate: NodeBodyUpdate, opts?: any): Promise<NodeEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(nodeBodyUpdate, 'nodeBodyUpdate');\n\n        opts = opts || {};\n        const postBody = nodeBodyUpdate;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , NodeEntry);\n    }\n/**\n    * Update node content\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nUpdates the content of the node with identifier **nodeId**.\n\nThe request body for this endpoint can be any text or binary stream.\n\nThe **majorVersion** and **comment** parameters can be used to control versioning behaviour. If the content is versionable,\na new minor version is created by default.\n\nOptionally a new **name** parameter can also be specified that must be unique within the parent folder. If specified and valid then this\nwill rename the node. If invalid then an error is returned and the content is not updated.\n\n**Note:** This API method accepts any content type, but for testing with this tool text based content can be provided.\nThis is because the OpenAPI Specification does not allow a wildcard to be provided or the ability for\ntooling to accept an arbitrary file.\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param contentBodyUpdate The binary content\n    * @param opts Optional parameters\n    * @param opts.majorVersion If **true**, create a major version.\nSetting this parameter also enables versioning of this node, if it is not already versioned.\n (default to false)\n    * @param opts.comment Add a version comment which will appear in version history.\nSetting this parameter also enables versioning of this node, if it is not already versioned.\n\n    * @param opts.name Optional new name. This should include the file extension.\nThe name must not contain spaces or the following special characters: * \\\" < > \\\\ / ? : and |.\nThe character . must not be used at the end of the name.\n\n    * @param opts.include Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<NodeEntry>\n    */\n    updateNodeContent(nodeId: string, contentBodyUpdate: string, opts?: any): Promise<NodeEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(contentBodyUpdate, 'contentBodyUpdate');\n\n        opts = opts || {};\n        const postBody = contentBodyUpdate;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'majorVersion': opts['majorVersion'],\n            'comment': opts['comment'],\n            'name': opts['name'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/octet-stream'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/content', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , NodeEntry);\n    }\n\n    /**\n     * Generate a direct access content url for a given node\n     *\n     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions.\n     *\n     * @param nodeId The identifier of a node.\n     * @return Promise<DirectAccessUrlEntry>\n     */\n    requestDirectAccessUrl(nodeId: string): Promise<DirectAccessUrlEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/request-direct-access-url', 'POST',\n            pathParams, {}, {}, {}, null,\n            contentTypes, accepts , DirectAccessUrlEntry);\n    }\n\n}\n"]}