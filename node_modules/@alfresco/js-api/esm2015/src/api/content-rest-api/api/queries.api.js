/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { NodePaging } from '../model/nodePaging';
import { PersonPaging } from '../model/personPaging';
import { SitePaging } from '../model/sitePaging';
import { BaseApi } from './base.api';
import { throwIfNotDefined } from '../../../assert';
import { buildCollectionParam } from '../../../alfrescoApiClient';
export class QueriesApi extends BaseApi {
    findNodes(term, opts) {
        throwIfNotDefined(term, 'term');
        opts = opts || {};
        const postBody = null;
        const pathParams = {};
        const queryParams = {
            'term': term,
            'rootNodeId': opts['rootNodeId'],
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'nodeType': opts['nodeType'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/queries/nodes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodePaging);
    }
    findPeople(term, opts) {
        throwIfNotDefined(term, 'term');
        opts = opts || {};
        const postBody = null;
        const pathParams = {};
        const queryParams = {
            'term': term,
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': buildCollectionParam(opts['fields'], 'csv'),
            'orderBy': buildCollectionParam(opts['orderBy'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/queries/people', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonPaging);
    }
    findSites(term, opts) {
        throwIfNotDefined(term, 'term');
        opts = opts || {};
        const postBody = null;
        const pathParams = {};
        const queryParams = {
            'term': term,
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/queries/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SitePaging);
    }
}
//# sourceMappingURL=../../../../../../src/api/content-rest-api/api/queries.api.js.map