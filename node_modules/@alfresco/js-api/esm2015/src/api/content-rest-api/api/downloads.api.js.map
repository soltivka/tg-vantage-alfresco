{"version":3,"file":"downloads.api.js","sourceRoot":"","sources":["downloads.api.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;AAGF,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AACvD,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AACpD,OAAO,EAAE,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AAMlE,MAAM,OAAO,YAAa,SAAQ,OAAO;IAoBrC,cAAc,CAAC,UAAkB;QAE7B,iBAAiB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QAE5C,MAAM,QAAQ,GAAS,IAAI,CAAC;QAE5B,MAAM,UAAU,GAAG;YACf,YAAY,EAAE,UAAU;SAC3B,CAAC;QAEF,MAAM,WAAW,GAAG,EACnB,CAAC;QAEF,MAAM,YAAY,GAAG,EAEpB,CAAC;QACF,MAAM,UAAU,GAAG,EAClB,CAAC;QAEF,MAAM,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC1C,MAAM,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,yBAAyB,EAAE,QAAQ,EACnC,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,CAAE,CAAC;IAChC,CAAC;IAoCD,cAAc,CAAC,kBAAsC,EAAE,IAAU;QAE7D,iBAAiB,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;QAE5D,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,MAAM,QAAQ,GAAG,kBAAkB,CAAC;QAEpC,MAAM,UAAU,GAAG,EAElB,CAAC;QAEF,MAAM,WAAW,GAAG;YAChB,QAAQ,EAAE,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC;SACxD,CAAC;QAEF,MAAM,YAAY,GAAG,EAEpB,CAAC;QACF,MAAM,UAAU,GAAG,EAClB,CAAC;QAEF,MAAM,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC1C,MAAM,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,YAAY,EAAE,MAAM,EACpB,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAG,aAAa,CAAC,CAAC;IAC/C,CAAC;IAyBD,WAAW,CAAC,UAAkB,EAAE,IAAU;QAEtC,iBAAiB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QAE5C,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,MAAM,QAAQ,GAAS,IAAI,CAAC;QAE5B,MAAM,UAAU,GAAG;YACf,YAAY,EAAE,UAAU;SAC3B,CAAC;QAEF,MAAM,WAAW,GAAG;YAChB,QAAQ,EAAE,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC;SACxD,CAAC;QAEF,MAAM,YAAY,GAAG,EAEpB,CAAC;QACF,MAAM,UAAU,GAAG,EAClB,CAAC;QAEF,MAAM,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC1C,MAAM,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,yBAAyB,EAAE,KAAK,EAChC,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAG,aAAa,CAAC,CAAC;IAC/C,CAAC;CAEJ","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { DownloadBodyCreate } from '../model/downloadBodyCreate';\nimport { DownloadEntry } from '../model/downloadEntry';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\n\n/**\n* Downloads service.\n* @module DownloadsApi\n*/\nexport class DownloadsApi extends BaseApi {\n    /**\n    * Cancel a download\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nCancels the creation of a download request.\n\n**Note:** The download node can be deleted using the **DELETE /nodes/{downloadId}** endpoint\n\nBy default, if the download node is not deleted it will be picked up by a cleaner job which removes download nodes older than a configurable amount of time (default is 1 hour)\n\nInformation about the existing progress at the time of cancelling can be retrieved by calling the **GET /downloads/{downloadId}** endpoint\n\nThe cancel operation is done asynchronously.\n\n    *\n    * @param downloadId The identifier of a download node.\n    * @return Promise<{}>\n    */\n    cancelDownload(downloadId: string): Promise<any> {\n\n        throwIfNotDefined(downloadId, 'downloadId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'downloadId': downloadId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/downloads/{downloadId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Create a new download\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nCreates a new download node asynchronously, the content of which will be the zipped content of the **nodeIds** specified in the JSON body like this:\n\nJSON\n{\n    \\\"nodeIds\\\":\n     [\n       \\\"c8bb482a-ff3c-4704-a3a3-de1c83ccd84c\\\",\n       \\\"cffa62db-aa01-493d-9594-058bc058eeb1\\\"\n     ]\n}\n\n**Note:** The content of the download node can be obtained using the **GET /nodes/{downloadId}/content** endpoint\n\n    *\n    * @param downloadBodyCreate The nodeIds the content of which will be zipped, which zip will be set as the content of our download node.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<DownloadEntry>\n    */\n    createDownload(downloadBodyCreate: DownloadBodyCreate, opts?: any): Promise<DownloadEntry> {\n\n        throwIfNotDefined(downloadBodyCreate, 'downloadBodyCreate');\n\n        opts = opts || {};\n        const postBody = downloadBodyCreate;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/downloads', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , DownloadEntry);\n    }\n/**\n    * Get a download\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nRetrieve status information for download node **downloadId**\n\n    *\n    * @param downloadId The identifier of a download node.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<DownloadEntry>\n    */\n    getDownload(downloadId: string, opts?: any): Promise<DownloadEntry> {\n\n        throwIfNotDefined(downloadId, 'downloadId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'downloadId': downloadId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/downloads/{downloadId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , DownloadEntry);\n    }\n\n}\n"]}