/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { CommentEntry } from '../model/commentEntry';
import { CommentPaging } from '../model/commentPaging';
import { BaseApi } from './base.api';
import { throwIfNotDefined } from '../../../assert';
import { buildCollectionParam } from '../../../alfrescoApiClient';
export class CommentsApi extends BaseApi {
    createComment(nodeId, commentBodyCreate, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(commentBodyCreate, 'commentBodyCreate');
        opts = opts || {};
        const postBody = commentBodyCreate;
        const pathParams = {
            'nodeId': nodeId
        };
        const queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/comments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CommentEntry);
    }
    deleteComment(nodeId, commentId) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(commentId, 'commentId');
        const postBody = null;
        const pathParams = {
            'nodeId': nodeId, 'commentId': commentId
        };
        const queryParams = {};
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/comments/{commentId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    listComments(nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'nodeId': nodeId
        };
        const queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/comments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CommentPaging);
    }
    updateComment(nodeId, commentId, commentBodyUpdate, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(commentId, 'commentId');
        throwIfNotDefined(commentBodyUpdate, 'commentBodyUpdate');
        opts = opts || {};
        const postBody = commentBodyUpdate;
        const pathParams = {
            'nodeId': nodeId, 'commentId': commentId
        };
        const queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/comments/{commentId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CommentEntry);
    }
}
//# sourceMappingURL=../../../../../../src/api/content-rest-api/api/comments.api.js.map