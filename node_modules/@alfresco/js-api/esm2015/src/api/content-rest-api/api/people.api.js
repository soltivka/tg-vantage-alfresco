/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { PersonEntry } from '../model/personEntry';
import { PersonPaging } from '../model/personPaging';
import { BaseApi } from './base.api';
import { throwIfNotDefined } from '../../../assert';
import { buildCollectionParam } from '../../../alfrescoApiClient';
export class PeopleApi extends BaseApi {
    createPerson(personBodyCreate, opts) {
        throwIfNotDefined(personBodyCreate, 'personBodyCreate');
        opts = opts || {};
        const postBody = personBodyCreate;
        const pathParams = {};
        const queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonEntry);
    }
    deleteAvatarImage(personId) {
        throwIfNotDefined(personId, 'personId');
        const postBody = null;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {};
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/avatar', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getAvatarImage(personId, opts) {
        throwIfNotDefined(personId, 'personId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {
            'attachment': opts['attachment'],
            'placeholder': opts['placeholder']
        };
        const headerParams = {
            'If-Modified-Since': opts['ifModifiedSince']
        };
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/octet-stream'];
        return this.apiClient.callApi('/people/{personId}/avatar', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, 'blob');
    }
    getPerson(personId, opts) {
        throwIfNotDefined(personId, 'personId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonEntry);
    }
    listPeople(opts) {
        opts = opts || {};
        const postBody = null;
        const pathParams = {};
        const queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonPaging);
    }
    requestPasswordReset(personId, clientBody) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(clientBody, 'clientBody');
        const postBody = clientBody;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {};
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/request-password-reset', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    resetPassword(personId, passwordResetBody) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(passwordResetBody, 'passwordResetBody');
        const postBody = passwordResetBody;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {};
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/reset-password', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    updateAvatarImage(personId, contentBodyUpdate) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(contentBodyUpdate, 'contentBodyUpdate');
        const postBody = contentBodyUpdate;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {};
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/octet-stream'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/avatar', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    updatePerson(personId, personBodyUpdate, opts) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(personBodyUpdate, 'personBodyUpdate');
        opts = opts || {};
        const postBody = personBodyUpdate;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonEntry);
    }
}
//# sourceMappingURL=../../../../../../src/api/content-rest-api/api/people.api.js.map