/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { DeletedNodeEntry } from '../model/deletedNodeEntry';
import { DeletedNodesPaging } from '../model/deletedNodesPaging';
import { DirectAccessUrlEntry } from '../model/directAccessUrlEntry';
import { NodeEntry } from '../model/nodeEntry';
import { RenditionEntry } from '../model/renditionEntry';
import { RenditionPaging } from '../model/renditionPaging';
import { BaseApi } from './base.api';
import { throwIfNotDefined } from '../../../assert';
import { buildCollectionParam } from '../../../alfrescoApiClient';
export class TrashcanApi extends BaseApi {
    deleteDeletedNode(nodeId) {
        throwIfNotDefined(nodeId, 'nodeId');
        const postBody = null;
        const pathParams = {
            'nodeId': nodeId
        };
        const queryParams = {};
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getArchivedNodeRendition(nodeId, renditionId) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(renditionId, 'renditionId');
        const postBody = null;
        const pathParams = {
            'nodeId': nodeId, 'renditionId': renditionId
        };
        const queryParams = {};
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions/{renditionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionEntry);
    }
    getArchivedNodeRenditionContent(nodeId, renditionId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(renditionId, 'renditionId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'nodeId': nodeId, 'renditionId': renditionId
        };
        const queryParams = {
            'attachment': opts['attachment'],
            'placeholder': opts['placeholder']
        };
        const headerParams = {
            'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
        };
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/octet-stream'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions/{renditionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, 'blob');
    }
    getDeletedNode(nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'nodeId': nodeId
        };
        const queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeletedNodeEntry);
    }
    getDeletedNodeContent(nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'nodeId': nodeId
        };
        const queryParams = {
            'attachment': opts['attachment']
        };
        const headerParams = {
            'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
        };
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/octet-stream'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, 'blob');
    }
    listDeletedNodeRenditions(nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'nodeId': nodeId
        };
        const queryParams = {
            'where': opts['where']
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionPaging);
    }
    listDeletedNodes(opts) {
        opts = opts || {};
        const postBody = null;
        const pathParams = {};
        const queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'include': buildCollectionParam(opts['include'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeletedNodesPaging);
    }
    restoreDeletedNode(nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        const postBody = opts['deletedNodeBodyRestore'];
        const pathParams = {
            'nodeId': nodeId
        };
        const queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/restore', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
    }
    requestDirectAccessUrl(nodeId) {
        throwIfNotDefined(nodeId, 'nodeId');
        const pathParams = {
            'nodeId': nodeId
        };
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/request-direct-access-url', 'POST', pathParams, {}, {}, {}, null, contentTypes, accepts, DirectAccessUrlEntry);
    }
    requestRenditionDirectAccessUrl(nodeId, renditionId) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(renditionId, 'renditionId');
        const pathParams = {
            'nodeId': nodeId,
            'renditionId': renditionId
        };
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions/{renditionId}/request-direct-access-url', 'POST', pathParams, {}, {}, {}, null, contentTypes, accepts, DirectAccessUrlEntry);
    }
}
//# sourceMappingURL=../../../../../../src/api/content-rest-api/api/trashcan.api.js.map