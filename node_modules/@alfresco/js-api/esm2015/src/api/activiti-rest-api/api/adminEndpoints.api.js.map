{"version":3,"file":"adminEndpoints.api.js","sourceRoot":"","sources":["adminEndpoints.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { CreateEndpointBasicAuthRepresentation } from '../model/createEndpointBasicAuthRepresentation';\nimport { EndpointBasicAuthRepresentation } from '../model/endpointBasicAuthRepresentation';\nimport { EndpointConfigurationRepresentation } from '../model/endpointConfigurationRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Adminendpoints service.\n* @module AdminendpointsApi\n*/\nexport class AdminEndpointsApi extends BaseApi {\n    /**\n    * Add an endpoint authorization\n    *\n    *\n    *\n    * @param createRepresentation createRepresentation\n    * @return Promise<EndpointBasicAuthRepresentation>\n    */\n    createBasicAuthConfiguration(createRepresentation: CreateEndpointBasicAuthRepresentation): Promise<EndpointBasicAuthRepresentation> {\n        throwIfNotDefined(createRepresentation, 'createRepresentation');\n        let postBody = createRepresentation;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/basic-auths', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, EndpointBasicAuthRepresentation);\n    }\n    /**\n        * Create an endpoint\n        *\n        *\n        *\n        * @param representation representation\n        * @return Promise<EndpointConfigurationRepresentation>\n        */\n    createEndpointConfiguration(representation: EndpointConfigurationRepresentation): Promise<EndpointConfigurationRepresentation> {\n        throwIfNotDefined(representation, 'representation');\n        let postBody = representation;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/endpoints', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, EndpointConfigurationRepresentation);\n    }\n    /**\n        * Get an endpoint authorization\n        *\n        *\n        *\n        * @param basicAuthId basicAuthId\n        * @param tenantId tenantId\n        * @return Promise<EndpointBasicAuthRepresentation>\n        */\n    getBasicAuthConfiguration(basicAuthId: number, tenantId: number): Promise<EndpointBasicAuthRepresentation> {\n        throwIfNotDefined(basicAuthId, 'basicAuthId');\n        throwIfNotDefined(tenantId, 'tenantId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'basicAuthId': basicAuthId\n        };\n\n        let queryParams = {\n            'tenantId': tenantId\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/basic-auths/{basicAuthId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, EndpointBasicAuthRepresentation);\n    }\n    /**\n        * List endpoint authorizations\n        *\n        *\n        *\n        * @param tenantId tenantId\n        * @return Promise<EndpointBasicAuthRepresentation>\n        */\n    getBasicAuthConfigurations(tenantId: number): Promise<EndpointBasicAuthRepresentation> {\n        throwIfNotDefined(tenantId, 'tenantId');\n\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'tenantId': tenantId\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/basic-auths', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, EndpointBasicAuthRepresentation);\n    }\n    /**\n        * Get an endpoint\n        *\n        *\n        *\n        * @param endpointConfigurationId endpointConfigurationId\n        * @param tenantId tenantId\n        * @return Promise<EndpointConfigurationRepresentation>\n        */\n    getEndpointConfiguration(endpointConfigurationId: number, tenantId: number): Promise<EndpointConfigurationRepresentation> {\n        throwIfNotDefined(endpointConfigurationId, 'endpointConfigurationId');\n        throwIfNotDefined(tenantId, 'tenantId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'endpointConfigurationId': endpointConfigurationId\n        };\n\n        let queryParams = {\n            'tenantId': tenantId\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/endpoints/{endpointConfigurationId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, EndpointConfigurationRepresentation);\n    }\n    /**\n        * List endpoints\n        *\n        *\n        *\n        * @param tenantId tenantId\n        * @return Promise<EndpointConfigurationRepresentation>\n        */\n    getEndpointConfigurations(tenantId: number): Promise<EndpointConfigurationRepresentation> {\n        throwIfNotDefined(tenantId, 'tenantId');\n\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'tenantId': tenantId\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/endpoints', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, EndpointConfigurationRepresentation);\n    }\n    /**\n        * Delete an endpoint authorization\n        *\n        *\n        *\n        * @param basicAuthId basicAuthId\n        * @param tenantId tenantId\n        * @return Promise<{}>\n        */\n    removeBasicAuthConfiguration(basicAuthId: number, tenantId: number): Promise<any> {\n        throwIfNotDefined(basicAuthId, 'basicAuthId');\n        throwIfNotDefined(tenantId, 'tenantId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'basicAuthId': basicAuthId\n        };\n\n        let queryParams = {\n            'tenantId': tenantId\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/basic-auths/{basicAuthId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Delete an endpoint\n        *\n        *\n        *\n        * @param endpointConfigurationId endpointConfigurationId\n        * @param tenantId tenantId\n        * @return Promise<{}>\n        */\n    removeEndpointConfiguration(endpointConfigurationId: number, tenantId: number): Promise<any> {\n        throwIfNotDefined(endpointConfigurationId, 'endpointConfigurationId');\n        throwIfNotDefined(tenantId, 'tenantId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'endpointConfigurationId': endpointConfigurationId\n        };\n\n        let queryParams = {\n            'tenantId': tenantId\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/endpoints/{endpointConfigurationId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Update an endpoint authorization\n        *\n        *\n        *\n        * @param basicAuthId basicAuthId\n        * @param createRepresentation createRepresentation\n        * @return Promise<EndpointBasicAuthRepresentation>\n        */\n    updateBasicAuthConfiguration(basicAuthId: number, createRepresentation: CreateEndpointBasicAuthRepresentation): Promise<EndpointBasicAuthRepresentation> {\n        throwIfNotDefined(basicAuthId, 'basicAuthId');\n        throwIfNotDefined(createRepresentation, 'createRepresentation');\n\n        let postBody = createRepresentation;\n\n        let pathParams = {\n            'basicAuthId': basicAuthId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/basic-auths/{basicAuthId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, EndpointBasicAuthRepresentation);\n    }\n    /**\n        * Update an endpoint\n        *\n        *\n        *\n        * @param endpointConfigurationId endpointConfigurationId\n        * @param representation representation\n        * @return Promise<EndpointConfigurationRepresentation>\n        */\n    updateEndpointConfiguration(endpointConfigurationId: number, representation: EndpointConfigurationRepresentation): Promise<EndpointConfigurationRepresentation> {\n        throwIfNotDefined(endpointConfigurationId, 'endpointConfigurationId');\n        throwIfNotDefined(representation, 'representation');\n\n        let postBody = representation;\n\n        let pathParams = {\n            'endpointConfigurationId': endpointConfigurationId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/endpoints/{endpointConfigurationId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, EndpointConfigurationRepresentation);\n    }\n\n}\n"]}