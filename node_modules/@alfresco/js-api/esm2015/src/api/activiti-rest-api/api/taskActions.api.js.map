{"version":3,"file":"taskActions.api.js","sourceRoot":"","sources":["taskActions.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { AssigneeIdentifierRepresentation } from '../model/assigneeIdentifierRepresentation';\nimport { FormIdentifierRepresentation } from '../model/formIdentifierRepresentation';\nimport { TaskRepresentation } from '../model/taskRepresentation';\nimport { UserIdentifierRepresentation } from '../model/userIdentifierRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n * Taskactions service.\n * @module TaskactionsApi\n */\nexport class TaskActionsApi extends BaseApi {\n    /**\n     * Assign a task to a user\n     *\n     *\n     *\n     * @param taskId taskId\n     * @param userIdentifier userIdentifier\n     * @return Promise<TaskRepresentation>\n     */\n    assignTask(taskId: string, userIdentifier: AssigneeIdentifierRepresentation): Promise<TaskRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(userIdentifier, 'userIdentifier');\n\n        let postBody = userIdentifier;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/action/assign', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TaskRepresentation);\n    }\n\n    /**\n     * Attach a form to a task\n     *\n     *\n     *\n     * @param taskId taskId\n     * @param formIdentifier formIdentifier\n     * @return Promise<{}>\n     */\n    attachForm(taskId: string, formIdentifier: FormIdentifierRepresentation): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(formIdentifier, 'formIdentifier');\n\n        let postBody = formIdentifier;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/action/attach-form', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n\n    /**\n     * Claim a task\n     *\n     * To claim a task (in case the task is assigned to a group)\n     *\n     * @param taskId taskId\n     * @return Promise<{}>\n     */\n    claimTask(taskId: string): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/action/claim', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n\n    /**\n     * Complete a task\n     *\n     * Use this endpoint to complete a standalone task or task without a form\n     *\n     * @param taskId taskId\n     * @return Promise<{}>\n     */\n    completeTask(taskId: string): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/action/complete', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n\n    /**\n     * Delegate a task\n     *\n     *\n     *\n     * @param taskId taskId\n     * @param userIdentifier userIdentifier\n     * @return Promise<{}>\n     */\n    delegateTask(taskId: string, userIdentifier: UserIdentifierRepresentation): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(userIdentifier, 'userIdentifier');\n\n        let postBody = userIdentifier;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/action/delegate', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n\n    /**\n     * Involve a group with a task\n     *\n     *\n     *\n     * @param taskId taskId\n     * @param groupId groupId\n     * @return Promise<{}>\n     */\n    involveGroup(taskId: string, groupId: string): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(groupId, 'groupId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId, 'groupId': groupId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/groups/{groupId}', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n\n    /**\n     * Involve a user with a task\n     *\n     *\n     *\n     * @param taskId taskId\n     * @param userIdentifier userIdentifier\n     * @return Promise<{}>\n     */\n    involveUser(taskId: string, userIdentifier: UserIdentifierRepresentation): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(userIdentifier, 'userIdentifier');\n\n        let postBody = userIdentifier;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/action/involve', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n\n    /**\n     * Remove a form from a task\n     *\n     *\n     *\n     * @param taskId taskId\n     * @return Promise<{}>\n     */\n    removeForm(taskId: string): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/action/remove-form', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n\n    /**\n     * Remove an involved group from a task\n     *\n     *\n     *\n     * @param taskId taskId\n     * @param groupId groupId\n     * @return Promise<{}>\n     */\n    removeInvolvedUser(taskId: string, identifier: string | UserIdentifierRepresentation): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(identifier, 'identifier');\n\n        let pathParams = {\n            'taskId': taskId, 'groupId': identifier\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        if (identifier instanceof String) {\n            let postBody = null;\n\n            return this.apiClient.callApi(\n                '/api/enterprise/tasks/{taskId}/groups/{groupId}', 'DELETE',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                contentTypes, accepts);\n        } else {\n\n            let postBody = identifier;\n\n            return this.apiClient.callApi(\n                '/api/enterprise/tasks/{taskId}/action/remove-involved', 'PUT',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                contentTypes, accepts);\n        }\n    }\n\n    /**\n     * Resolve a task\n     *\n     *\n     *\n     * @param taskId taskId\n     * @return Promise<{}>\n     */\n    resolveTask(taskId: string): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/action/resolve', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n\n    /**\n     * Unclaim a task\n     *\n     * To unclaim a task (in case the task was assigned to a group)\n     *\n     * @param taskId taskId\n     * @return Promise<{}>\n     */\n    unclaimTask(taskId: string): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/action/unclaim', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n\n}\n"]}