{"version":3,"file":"adminGroups.api.js","sourceRoot":"","sources":["adminGroups.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { AbstractGroupRepresentation } from '../model/abstractGroupRepresentation';\nimport { AddGroupCapabilitiesRepresentation } from '../model/addGroupCapabilitiesRepresentation';\nimport { GroupRepresentation } from '../model/groupRepresentation';\nimport { LightGroupRepresentation } from '../model/lightGroupRepresentation';\nimport { ResultListDataRepresentationLightUserRepresentation } from '../model/resultListDataRepresentationLightUserRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Admingroups service.\n* @module AdmingroupsApi\n*/\nexport class AdminGroupsApi extends BaseApi {\n    /**\n    * Activate a group\n    *\n    *\n    *\n    * @param groupId groupId\n    * @return Promise<{}>\n    */\n    activate(groupId: number): Promise<any> {\n        throwIfNotDefined(groupId, 'groupId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'groupId': groupId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups/{groupId}/action/activate', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Add users to a group\n        *\n        *\n        *\n        * @param groupId groupId\n        * @return Promise<{}>\n        */\n    addAllUsersToGroup(groupId: number): Promise<any> {\n        throwIfNotDefined(groupId, 'groupId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'groupId': groupId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups/{groupId}/add-all-users', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Add capabilities to a group\n        *\n        *\n        *\n        * @param groupId groupId\n        * @param addGroupCapabilitiesRepresentation addGroupCapabilitiesRepresentation\n        * @return Promise<{}>\n        */\n    addGroupCapabilities(groupId: number, addGroupCapabilitiesRepresentation: AddGroupCapabilitiesRepresentation): Promise<any> {\n        throwIfNotDefined(groupId, 'groupId');\n        throwIfNotDefined(addGroupCapabilitiesRepresentation, 'addGroupCapabilitiesRepresentation');\n\n        let postBody = addGroupCapabilitiesRepresentation;\n\n        let pathParams = {\n            'groupId': groupId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups/{groupId}/capabilities', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Add a user to a group\n        *\n        *\n        *\n        * @param groupId groupId\n        * @param userId userId\n        * @return Promise<{}>\n        */\n    addGroupMember(groupId: number, userId: number): Promise<any> {\n        throwIfNotDefined(groupId, 'groupId');\n        throwIfNotDefined(userId, 'userId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'groupId': groupId, 'userId': userId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups/{groupId}/members/{userId}', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Get a related group\n        *\n        *\n        *\n        * @param groupId groupId\n        * @param relatedGroupId relatedGroupId\n        * @param type type\n        * @return Promise<{}>\n        */\n    addRelatedGroup(groupId: number, relatedGroupId: number, type: string): Promise<any> {\n        throwIfNotDefined(groupId, 'groupId');\n        throwIfNotDefined(relatedGroupId, 'relatedGroupId');\n        throwIfNotDefined(type, 'type');\n\n        let postBody = null;\n\n        let pathParams = {\n            'groupId': groupId, 'relatedGroupId': relatedGroupId\n        };\n\n        let queryParams = {\n            'type': type\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups/{groupId}/related-groups/{relatedGroupId}', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Create a group\n        *\n        *\n        *\n        * @param groupRepresentation groupRepresentation\n        * @return Promise<GroupRepresentation>\n        */\n    createNewGroup(groupRepresentation: GroupRepresentation): Promise<GroupRepresentation> {\n        throwIfNotDefined(groupRepresentation, 'groupRepresentation');\n\n        let postBody = groupRepresentation;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, GroupRepresentation);\n    }\n    /**\n        * Remove a capability from a group\n        *\n        *\n        *\n        * @param groupId groupId\n        * @param groupCapabilityId groupCapabilityId\n        * @return Promise<{}>\n        */\n    deleteGroupCapability(groupId: number, groupCapabilityId: number): Promise<any> {\n        throwIfNotDefined(groupId, 'groupId');\n        throwIfNotDefined(groupCapabilityId, 'groupCapabilityId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'groupId': groupId, 'groupCapabilityId': groupCapabilityId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups/{groupId}/capabilities/{groupCapabilityId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Delete a member from a group\n        *\n        *\n        *\n        * @param groupId groupId\n        * @param userId userId\n        * @return Promise<{}>\n        */\n    deleteGroupMember(groupId: number, userId: number): Promise<any> {\n        throwIfNotDefined(groupId, 'groupId');\n        throwIfNotDefined(userId, 'userId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'groupId': groupId, 'userId': userId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups/{groupId}/members/{userId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Delete a group\n        *\n        *\n        *\n        * @param groupId groupId\n        * @return Promise<{}>\n        */\n    deleteGroup(groupId: number): Promise<any> {\n        throwIfNotDefined(groupId, 'groupId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'groupId': groupId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups/{groupId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Delete a related group\n        *\n        *\n        *\n        * @param groupId groupId\n        * @param relatedGroupId relatedGroupId\n        * @return Promise<{}>\n        */\n    deleteRelatedGroup(groupId: number, relatedGroupId: number): Promise<any> {\n        throwIfNotDefined(groupId, 'groupId');\n        throwIfNotDefined(relatedGroupId, 'relatedGroupId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'groupId': groupId, 'relatedGroupId': relatedGroupId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups/{groupId}/related-groups/{relatedGroupId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * List group capabilities\n        *\n        *\n        *\n        * @param groupId groupId\n        * @return Promise<string>\n        */\n    getCapabilities(groupId: number): Promise<string> {\n        throwIfNotDefined(groupId, 'groupId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'groupId': groupId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups/{groupId}/potential-capabilities', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Get group members\n        *\n        *\n        *\n        * @param groupId groupId\n        * @param opts Optional parameters\n        * @param opts.filter filter\n        * @param opts.page page\n        * @param opts.pageSize pageSize\n        * @return Promise<ResultListDataRepresentationLightUserRepresentation>\n        */\n    getGroupUsers(groupId: number, opts?: any): Promise<ResultListDataRepresentationLightUserRepresentation> {\n        throwIfNotDefined(groupId, 'groupId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'groupId': groupId\n        };\n\n        let queryParams = {\n            'filter': opts['filter'],\n            'page': opts['page'],\n            'pageSize': opts['pageSize']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups/{groupId}/users', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationLightUserRepresentation);\n    }\n    /**\n        * Get a group\n        *\n        *\n        *\n        * @param groupId groupId\n        * @param opts Optional parameters\n        * @param opts.includeAllUsers includeAllUsers\n        * @param opts.summary summary\n        * @return Promise<AbstractGroupRepresentation>\n        */\n    getGroup(groupId: number, opts?: any): Promise<AbstractGroupRepresentation> {\n        throwIfNotDefined(groupId, 'groupId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'groupId': groupId\n        };\n\n        let queryParams = {\n            'includeAllUsers': opts['includeAllUsers'],\n            'summary': opts['summary']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups/{groupId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, AbstractGroupRepresentation);\n    }\n    /**\n        * Query groups\n        *\n        *\n        *\n        * @param opts Optional parameters\n        * @param opts.tenantId tenantId\n        * @param opts.functional functional\n        * @param opts.summary summary\n        * @return Promise<LightGroupRepresentation>\n        */\n    getGroups(opts?: any): Promise<LightGroupRepresentation> {\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'tenantId': opts['tenantId'],\n            'functional': opts['functional'],\n            'summary': opts['summary']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, LightGroupRepresentation);\n    }\n    /**\n        * Get related groups\n        *\n        *\n        *\n        * @param groupId groupId\n        * @return Promise<LightGroupRepresentation>\n        */\n    getRelatedGroups(groupId: number): Promise<LightGroupRepresentation> {\n        throwIfNotDefined(groupId, 'groupId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'groupId': groupId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups/{groupId}/related-groups', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, LightGroupRepresentation);\n    }\n    /**\n        * Update a group\n        *\n        *\n        *\n        * @param groupId groupId\n        * @param groupRepresentation groupRepresentation\n        * @return Promise<GroupRepresentation>\n        */\n    updateGroup(groupId: number, groupRepresentation: GroupRepresentation): Promise<GroupRepresentation> {\n        throwIfNotDefined(groupId, 'groupId');\n        throwIfNotDefined(groupRepresentation, 'groupRepresentation');\n\n        let postBody = groupRepresentation;\n\n        let pathParams = {\n            'groupId': groupId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/groups/{groupId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, GroupRepresentation);\n    }\n\n}\n"]}