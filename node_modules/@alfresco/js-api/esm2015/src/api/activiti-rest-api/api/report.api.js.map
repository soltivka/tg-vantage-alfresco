{"version":3,"file":"report.api.js","sourceRoot":"","sources":["report.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/*!\n    * @license\n    * Copyright 2018 Alfresco Software, Ltd.\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *     http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n\nimport { BaseApi } from './base.api';\n\nexport class ReportApi extends BaseApi {\n\n    /**\n     * Create the default reports\n     */\n    createDefaultReports() {\n        let postBody = null;\n\n        let pathParams = {};\n        let queryParams = {};\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/app/rest/reporting/default-reports', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts\n        );\n    }\n\n    getTasksByProcessDefinitionId(reportId: string, processDefinitionId: string) {\n        let postBody = null;\n\n        if (reportId === undefined || reportId === null) {\n            throw \"Missing param 'reportId' in getTasksByProcessDefinitionId\";\n        }\n\n        if (processDefinitionId === undefined || processDefinitionId === null) {\n            throw \"Missing param 'processDefinitionId' in getTasksByProcessDefinitionId\";\n        }\n\n        let pathParams = {\n            'reportId': reportId\n        };\n        let queryParams = {\n            'processDefinitionId': processDefinitionId\n        };\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/app/rest/reporting/report-params/{reportId}/tasks', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts\n        );\n    }\n\n    getReportsByParams(reportId: string, paramsQuery: any) {\n        let postBody = paramsQuery;\n\n        if (reportId === undefined || reportId === null) {\n            throw \"Missing param 'reportId' in getReportsByParams\";\n        }\n\n        let pathParams = {\n            'reportId': reportId\n        };\n        let queryParams = {};\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/app/rest/reporting/report-params/{reportId}', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts\n        );\n    }\n\n    getProcessDefinitions() {\n        let postBody = null;\n\n        let pathParams = {};\n        let queryParams = {};\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/app/rest/reporting/process-definitions', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts\n        );\n    }\n\n    getReportParams(reportId: string) {\n        let postBody = null;\n\n        if (reportId === undefined || reportId === null) {\n            throw \"Missing param 'reportId' in getReportParams\";\n        }\n\n        let pathParams = {\n            'reportId': reportId\n        };\n        let queryParams = {};\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/app/rest/reporting/report-params/{reportId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts\n        );\n    }\n\n    getReportList() {\n        let postBody = null;\n\n        let pathParams = {};\n        let queryParams = {};\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/app/rest/reporting/reports', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts\n        );\n    }\n\n    updateReport(reportId: string, name: string) {\n        let postBody = {\n            'name': name\n        };\n\n        if (reportId === undefined || reportId === null) {\n            throw \"Missing param 'reportId' in updateReport\";\n        }\n\n        let pathParams = {\n            'reportId': reportId\n        };\n        let queryParams = {};\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/app/rest/reporting/reports/{reportId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts\n        );\n    }\n\n    /**\n     * Function to export a report\n     */\n\n    /**\n     * Export a report\n     * @param {string} reportId\n     * @param {module:model/ReportExportQueryRepresentation} queryParams\n     */\n    exportToCsv(reportId: string, queryParams: { reportName?: string }) {\n        let postBody = queryParams;\n\n        if (reportId === undefined || reportId === null) {\n            throw \"Missing param 'reportId' in exportToCsv\";\n        }\n\n        if (queryParams === undefined || queryParams === null) {\n            throw \"Missing param 'queryParams' in exportToCsv\";\n        }\n\n        if (queryParams.reportName === undefined || queryParams.reportName === null) {\n            throw \"Missing param 'reportName' in exportToCsv\";\n        }\n\n        let pathParams = {\n            'reportId': reportId\n        };\n        let headerParams = {};\n        let formParams = {};\n        queryParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/app/rest/reporting/reports/{reportId}/export-to-csv', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts\n        );\n    }\n\n    /**\n     * Function to save a report\n     */\n\n    /**\n     * Save a report\n     * @param {string} reportId\n     * @param {module:model/ReportSaveQueryRepresentation} queryParams\n     */\n    saveReport(reportId: string, queryParams: { reportName?: string, __reportName?: string }) {\n        let postBody = queryParams;\n\n        if (reportId === undefined || reportId === null) {\n            throw \"Missing param 'reportId' in saveReport\";\n        }\n\n        if (queryParams === undefined || queryParams === null) {\n            throw \"Missing param 'queryParams' in queryParams\";\n        }\n\n        if (queryParams.reportName === undefined || queryParams.reportName === null) {\n            throw \"Missing param 'reportName' in exportToCsv\";\n        }\n\n        queryParams.__reportName = queryParams.reportName;\n\n        let pathParams = {\n            'reportId': reportId\n        };\n        let headerParams = {};\n        let formParams = {};\n        queryParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/app/rest/reporting/reports/{reportId}', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts\n        );\n    }\n\n    /**\n     * Function to delete a report\n     */\n\n    /**\n     * Save a report\n     * @param {string} reportId\n     */\n    deleteReport(reportId: string) {\n        let postBody = null;\n\n        if (reportId === undefined || reportId === null) {\n            throw \"Missing param 'reportId' in delete\";\n        }\n\n        let pathParams = {\n            'reportId': reportId\n        };\n        let queryParams = {};\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/app/rest/reporting/reports/{reportId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts\n        );\n    }\n\n}\n"]}