{"version":3,"file":"groups.api.js","sourceRoot":"","sources":["groups.api.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;AAEF,OAAO,EAAE,oDAAoD,EAAE,MAAM,+DAA+D,CAAC;AACrI,OAAO,EAAE,mDAAmD,EAAE,MAAM,8DAA8D,CAAC;AACnI,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AAMpD,MAAM,OAAO,iBAAkB,SAAQ,OAAO;IAc1C,SAAS,CAAC,IAAU;QAChB,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG,EAEhB,CAAC;QAEF,IAAI,WAAW,GAAG;YACd,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC;YACxB,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC;YAC1B,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC;YAChC,2BAA2B,EAAE,IAAI,CAAC,2BAA2B,CAAC;YAC9D,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC;SAC/B,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,wBAAwB,EAAE,KAAK,EAC/B,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,oDAAoD,CAAC,CAAC;IACrF,CAAC;IASD,gBAAgB,CAAC,OAAe;QAC5B,iBAAiB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAErC,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,SAAS,EAAE,OAAO;SACrB,CAAC;QAEF,IAAI,WAAW,GAAG,EACjB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,wCAAwC,EAAE,KAAK,EAC/C,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,mDAAmD,CAAC,CAAC;IACpF,CAAC;CAEJ","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ResultListDataRepresentationLightGroupRepresentation } from '../model/resultListDataRepresentationLightGroupRepresentation';\nimport { ResultListDataRepresentationLightUserRepresentation } from '../model/resultListDataRepresentationLightUserRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Groups service.\n* @module GroupsApi\n*/\nexport class ActivitiGroupsApi extends BaseApi {\n    /**\n    * Query groups\n    *\n    *\n    *\n    * @param opts Optional parameters\n    * @param opts.filter filter\n    * @param opts.groupId groupId\n    * @param opts.externalId externalId\n    * @param opts.externalIdCaseInsensitive externalIdCaseInsensitive\n    * @param opts.tenantId tenantId\n    * @return Promise<ResultListDataRepresentationLightGroupRepresentation>\n    */\n    getGroups(opts?: any): Promise<ResultListDataRepresentationLightGroupRepresentation> {\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'filter': opts['filter'],\n            'groupId': opts['groupId'],\n            'externalId': opts['externalId'],\n            'externalIdCaseInsensitive': opts['externalIdCaseInsensitive'],\n            'tenantId': opts['tenantId']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/groups', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationLightGroupRepresentation);\n    }\n    /**\n        * List members of a group\n        *\n        *\n        *\n        * @param groupId groupId\n        * @return Promise<ResultListDataRepresentationLightUserRepresentation>\n        */\n    getUsersForGroup(groupId: number): Promise<ResultListDataRepresentationLightUserRepresentation> {\n        throwIfNotDefined(groupId, 'formId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'groupId': groupId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/groups/{groupId}/users', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationLightUserRepresentation);\n    }\n\n}\n"]}