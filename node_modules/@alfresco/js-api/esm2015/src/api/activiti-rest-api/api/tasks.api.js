/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { IdentityLinkRepresentation } from '../model/identityLinkRepresentation';
import { ResultListDataRepresentationTaskRepresentation } from '../model/resultListDataRepresentationTaskRepresentation';
import { TaskAuditInfoRepresentation } from '../model/taskAuditInfoRepresentation';
import { TaskRepresentation } from '../model/taskRepresentation';
import { BaseApi } from './base.api';
import { throwIfNotDefined } from '../../../assert';
export class TasksApi extends BaseApi {
    createIdentityLink(taskId, identityLinkRepresentation) {
        throwIfNotDefined(taskId, 'taskId');
        throwIfNotDefined(identityLinkRepresentation, 'identityLinkRepresentation');
        let postBody = identityLinkRepresentation;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    }
    createNewTask(taskRepresentation) {
        throwIfNotDefined(taskRepresentation, 'taskRepresentation');
        let postBody = taskRepresentation;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
    }
    deleteIdentityLink(taskId, family, identityId, type) {
        throwIfNotDefined(taskId, 'taskId');
        throwIfNotDefined(family, 'family');
        throwIfNotDefined(identityId, 'identityId');
        throwIfNotDefined(type, 'type');
        let postBody = null;
        let pathParams = {
            'taskId': taskId, 'family': family, 'identityId': identityId, 'type': type
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteTask(taskId) {
        throwIfNotDefined(taskId, 'taskId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    filterTasks(tasksFilter) {
        throwIfNotDefined(tasksFilter, 'tasksFilter');
        let postBody = tasksFilter;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/filter', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);
    }
    getIdentityLinkType(taskId, family, identityId, type) {
        throwIfNotDefined(taskId, 'taskId');
        throwIfNotDefined(family, 'family');
        throwIfNotDefined(identityId, 'identityId');
        throwIfNotDefined(type, 'type');
        let postBody = null;
        let pathParams = {
            'taskId': taskId, 'family': family, 'identityId': identityId, 'type': type
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    }
    getIdentityLinksForFamily(taskId, family) {
        throwIfNotDefined(taskId, 'taskId');
        throwIfNotDefined(family, 'family');
        let postBody = null;
        let pathParams = {
            'taskId': taskId, 'family': family
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks/{family}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    }
    getIdentityLinks(taskId) {
        throwIfNotDefined(taskId, 'taskId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    }
    getTaskAuditLog(taskId) {
        throwIfNotDefined(taskId, 'taskId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/audit', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskAuditInfoRepresentation);
    }
    getTaskAuditPdf(taskId) {
        throwIfNotDefined(taskId, 'taskId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let responseType = 'blob';
        return this.apiClient.callApi('app/rest/tasks/{taskId}/audit', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, responseType);
    }
    getTask(taskId) {
        throwIfNotDefined(taskId, 'taskId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
    }
    listHistoricTasks(queryRequest) {
        throwIfNotDefined(queryRequest, 'queryRequest');
        let postBody = queryRequest;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/historic-tasks/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);
    }
    listTasks(tasksQuery) {
        throwIfNotDefined(tasksQuery, 'tasksQuery');
        let postBody = tasksQuery;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);
    }
    updateTask(taskId, updated) {
        throwIfNotDefined(taskId, 'taskId');
        throwIfNotDefined(updated, 'updated');
        let postBody = updated;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
    }
}
//# sourceMappingURL=../../../../../../src/api/activiti-rest-api/api/tasks.api.js.map