{"version":3,"file":"users.api.js","sourceRoot":"","sources":["users.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ResetPasswordRepresentation } from '../model/resetPasswordRepresentation';\nimport { ResultListDataRepresentationLightUserRepresentation } from '../model/resultListDataRepresentationLightUserRepresentation';\nimport { UserActionRepresentation } from '../model/userActionRepresentation';\nimport { UserRepresentation } from '../model/userRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Users service.\n* @module UsersApi\n*/\nexport class UsersApi extends BaseApi {\n    /**\n    * Execute an action for a specific user\n    *\n    * Typical action is updating/reset password\n    *\n    * @param userId userId\n    * @param actionRequest actionRequest\n    * @return Promise<{}>\n    */\n    executeAction(userId: number, actionRequest: UserActionRepresentation): Promise<any> {\n        throwIfNotDefined(userId, 'userId');\n        throwIfNotDefined(actionRequest, 'actionRequest');\n\n        let postBody = actionRequest;\n\n        let pathParams = {\n            'userId': userId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/users/{userId}', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Stream user profile picture\n        *\n        *\n        *\n        * @param userId userId\n        * @return Promise<{}>\n        */\n    getUserProfilePictureUrl(userId: string): string {\n        return this.apiClient.basePath + '/app/rest/users/' + userId + '/picture';\n    }\n\n    /**\n        * Get a user\n        *\n        *\n        *\n        * @param userId userId\n        * @return Promise<UserRepresentation>\n        */\n    getUser(userId: number): Promise<UserRepresentation> {\n        throwIfNotDefined(userId, 'userId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'userId': userId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/users/{userId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, UserRepresentation);\n    }\n    /**\n        * Query users\n        *\n        * A common use case is that a user wants to select another user (eg. when assigning a task) or group.\n        *\n        * @param opts Optional parameters\n        * @param opts.filter filter\n        * @param opts.email email\n        * @param opts.externalId externalId\n        * @param opts.externalIdCaseInsensitive externalIdCaseInsensitive\n        * @param opts.excludeTaskId excludeTaskId\n        * @param opts.excludeProcessId excludeProcessId\n        * @param opts.groupId groupId\n        * @param opts.tenantId tenantId\n        * @return Promise<ResultListDataRepresentationLightUserRepresentation>\n        */\n    getUsers(opts?: any): Promise<ResultListDataRepresentationLightUserRepresentation> {\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'filter': opts['filter'],\n            'email': opts['email'],\n            'externalId': opts['externalId'],\n            'externalIdCaseInsensitive': opts['externalIdCaseInsensitive'],\n            'excludeTaskId': opts['excludeTaskId'],\n            'excludeProcessId': opts['excludeProcessId'],\n            'groupId': opts['groupId'],\n            'tenantId': opts['tenantId']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/users', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationLightUserRepresentation);\n    }\n    /**\n        * Request a password reset\n        *\n        *\n        *\n        * @param resetPassword resetPassword\n        * @return Promise<{}>\n        */\n    requestPasswordReset(resetPassword: ResetPasswordRepresentation): Promise<any> {\n        throwIfNotDefined(resetPassword, 'resetPassword');\n\n        let postBody = resetPassword;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/idm/passwords', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Update a user\n        *\n        *\n        *\n        * @param userId userId\n        * @param userRequest userRequest\n        * @return Promise<UserRepresentation>\n        */\n    updateUser(userId: number, userRequest: UserRepresentation): Promise<UserRepresentation> {\n        throwIfNotDefined(userId, 'userId');\n        throwIfNotDefined(userRequest, 'userRequest');\n\n        let postBody = userRequest;\n\n        let pathParams = {\n            'userId': userId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/users/{userId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, UserRepresentation);\n    }\n\n}\n"]}