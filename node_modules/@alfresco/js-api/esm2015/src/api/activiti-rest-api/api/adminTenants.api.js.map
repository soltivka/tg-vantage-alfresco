{"version":3,"file":"adminTenants.api.js","sourceRoot":"","sources":["adminTenants.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { CreateTenantRepresentation } from '../model/createTenantRepresentation';\nimport { ImageUploadRepresentation } from '../model/imageUploadRepresentation';\nimport { LightTenantRepresentation } from '../model/lightTenantRepresentation';\nimport { TenantEvent } from '../model/tenantEvent';\nimport { TenantRepresentation } from '../model/tenantRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Admintenants service.\n* @module AdmintenantsApi\n*/\nexport class AdminTenantsApi extends BaseApi {\n    /**\n    * Create a tenant\n    *\n    * Only a tenant manager may access this endpoint\n    *\n    * @param createTenantRepresentation createTenantRepresentation\n    * @return Promise<LightTenantRepresentation>\n    */\n    createTenant(createTenantRepresentation: CreateTenantRepresentation): Promise<LightTenantRepresentation> {\n        throwIfNotDefined(createTenantRepresentation, 'groupId');\n\n        let postBody = createTenantRepresentation;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/tenants', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, LightTenantRepresentation);\n    }\n    /**\n        * Delete a tenant\n        *\n        *\n        *\n        * @param tenantId tenantId\n        * @return Promise<{}>\n        */\n    deleteTenant(tenantId: number): Promise<any> {\n        throwIfNotDefined(tenantId, 'tenantId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'tenantId': tenantId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/tenants/{tenantId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Get tenant events\n        *\n        *\n        *\n        * @param tenantId tenantId\n        * @return Promise<TenantEvent>\n        */\n    getTenantEvents(tenantId: number): Promise<TenantEvent> {\n        throwIfNotDefined(tenantId, 'tenantId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'tenantId': tenantId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/tenants/{tenantId}/events', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TenantEvent);\n    }\n    /**\n        * Get a tenant's logo\n        *\n        *\n        *\n        * @param tenantId tenantId\n        * @return Promise<{}>\n        */\n    getTenantLogo(tenantId: number): Promise<any> {\n        throwIfNotDefined(tenantId, 'tenantId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'tenantId': tenantId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/tenants/{tenantId}/logo', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Get a tenant\n        *\n        *\n        *\n        * @param tenantId tenantId\n        * @return Promise<TenantRepresentation>\n        */\n    getTenant(tenantId: number): Promise<TenantRepresentation> {\n        throwIfNotDefined(tenantId, 'tenantId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'tenantId': tenantId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/tenants/{tenantId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TenantRepresentation);\n    }\n    /**\n        * List tenants\n        *\n        * Only a tenant manager may access this endpoint\n        *\n        * @return Promise<LightTenantRepresentation>\n        */\n    getTenants(): Promise<LightTenantRepresentation> {\n\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/tenants', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, LightTenantRepresentation);\n    }\n    /**\n        * Update a tenant\n        *\n        *\n        *\n        * @param tenantId tenantId\n        * @param createTenantRepresentation createTenantRepresentation\n        * @return Promise<TenantRepresentation>\n        */\n    update(tenantId: number, createTenantRepresentation: CreateTenantRepresentation): Promise<TenantRepresentation> {\n        throwIfNotDefined(tenantId, 'tenantId');\n        throwIfNotDefined(createTenantRepresentation, 'createTenantRepresentation');\n\n        let postBody = createTenantRepresentation;\n\n        let pathParams = {\n            'tenantId': tenantId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/tenants/{tenantId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TenantRepresentation);\n    }\n    /**\n        * Update a tenant's logo\n        *\n        *\n        *\n        * @param tenantId tenantId\n        * @param file file\n        * @return Promise<ImageUploadRepresentation>\n        */\n    uploadTenantLogo(tenantId: number, file: any): Promise<ImageUploadRepresentation> {\n        throwIfNotDefined(tenantId, 'tenantId');\n        throwIfNotDefined(file, 'file');\n\n        let postBody = null;\n\n        let pathParams = {\n            'tenantId': tenantId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n            'file': file\n        };\n\n        let contentTypes = ['multipart/form-data'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/tenants/{tenantId}/logo', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ImageUploadRepresentation);\n    }\n\n}\n"]}