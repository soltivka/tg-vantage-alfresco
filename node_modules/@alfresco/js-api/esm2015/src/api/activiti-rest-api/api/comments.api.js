/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { CommentRepresentation } from '../model/commentRepresentation';
import { ResultListDataRepresentationCommentRepresentation } from '../model/resultListDataRepresentationCommentRepresentation';
import { BaseApi } from './base.api';
import { throwIfNotDefined } from '../../../assert';
export class ActivitiCommentsApi extends BaseApi {
    addProcessInstanceComment(commentRequest, processInstanceId) {
        throwIfNotDefined(commentRequest, 'commentRequest');
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        let postBody = commentRequest;
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/comments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CommentRepresentation);
    }
    addTaskComment(commentRequest, taskId) {
        throwIfNotDefined(commentRequest, 'commentRequest');
        throwIfNotDefined(taskId, 'taskId');
        let postBody = commentRequest;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/comments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CommentRepresentation);
    }
    getProcessInstanceComments(processInstanceId, opts) {
        throwIfNotDefined(processInstanceId, 'processInstanceId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {
            'latestFirst': opts['latestFirst']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/comments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationCommentRepresentation);
    }
    getTaskComments(taskId, opts) {
        throwIfNotDefined(taskId, 'taskId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {
            'latestFirst': opts['latestFirst']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/comments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationCommentRepresentation);
    }
}
//# sourceMappingURL=../../../../../../src/api/activiti-rest-api/api/comments.api.js.map