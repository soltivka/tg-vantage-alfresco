{"version":3,"file":"content.api.js","sourceRoot":"","sources":["content.api.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;AAEF,OAAO,EAAE,4BAA4B,EAAE,MAAM,uCAAuC,CAAC;AACrF,OAAO,EAAE,wDAAwD,EAAE,MAAM,mEAAmE,CAAC;AAC7I,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AAMpD,MAAM,OAAO,UAAW,SAAQ,OAAO;IAYnC,qCAAqC,CAAC,iBAAyB,EAAE,cAAkD,EAAE,IAAU;QAC3H,iBAAiB,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,CAAC;QAC1D,iBAAiB,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QAEpD,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAElB,IAAI,UAAU,GAAG;YACb,mBAAmB,EAAE,iBAAiB;SACzC,CAAC;QAEF,IAAI,WAAW,GAAG;YACd,kBAAkB,EAAE,IAAI,CAAC,kBAAkB,CAAC;SAC/C,CAAC;QAEF,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,IAAI,cAAc,YAAY,4BAA4B,EAAE;YACxD,IAAI,QAAQ,GAAG,cAAc,CAAC;YAC9B,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;YACxC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,+DAA+D,EAAE,MAAM,EACvE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,4BAA4B,CAAC,CAAC;SAC5D;aAAM;YACH,IAAI,QAAQ,GAAG,IAAI,CAAC;YACpB,UAAU,GAAG;gBACT,MAAM,EAAE,cAAc;aACzB,CAAC;YACF,IAAI,YAAY,GAAG,CAAC,qBAAqB,CAAC,CAAC;YAC3C,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,mEAAmE,EAAE,MAAM,EAC3E,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,4BAA4B,CAAC,CAAC;SAC5D;IACL,CAAC;IAaD,0BAA0B,CAAC,MAAc,EAAE,cAAkD,EAAE,IAAU;QACrG,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACpC,iBAAiB,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QAEpD,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAElB,IAAI,UAAU,GAAG;YACb,QAAQ,EAAE,MAAM;SACnB,CAAC;QAEF,IAAI,WAAW,GAAG;YACd,kBAAkB,EAAE,IAAI,CAAC,kBAAkB,CAAC;SAC/C,CAAC;QAEF,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,IAAI,cAAc,YAAY,4BAA4B,EAAE;YACxD,IAAI,QAAQ,GAAG,cAAc,CAAC;YAC9B,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;YACxC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,wCAAwC,EAAE,MAAM,EAChD,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,4BAA4B,CAAC,CAAC;SAE5D;aAAM;YACH,IAAI,QAAQ,GAAG,IAAI,CAAC;YACpB,UAAU,GAAG;gBACT,MAAM,EAAE,cAAc;aACzB,CAAC;YACF,IAAI,YAAY,GAAG,CAAC,qBAAqB,CAAC,CAAC;YAC3C,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,4CAA4C,EAAE,MAAM,EACpD,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,4BAA4B,CAAC,CAAC;SAC5D;IACL,CAAC;IAUD,gCAAgC,CAAC,IAAS;QACtC,iBAAiB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAEhC,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,IAAI,WAAW,GAAG,EAAE,CAAC;QAErB,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG;YACb,MAAM,EAAE,IAAI;SACf,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAC3C,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,6BAA6B,EAAE,MAAM,EACrC,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,4BAA4B,CAAC,CAAC;IAC7D,CAAC;IAUD,6BAA6B,CAAC,cAA4C;QACtE,iBAAiB,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QAEpD,IAAI,QAAQ,GAAG,cAAc,CAAC;QAE9B,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,IAAI,WAAW,GAAG,EAAE,CAAC;QAErB,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,yBAAyB,EAAE,MAAM,EACjC,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,4BAA4B,CAAC,CAAC;IAC7D,CAAC;IAUD,aAAa,CAAC,SAAiB;QAC3B,iBAAiB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAE1C,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,WAAW,EAAE,SAAS;SACzB,CAAC;QAEF,IAAI,WAAW,GAAG,EAAE,CAAC;QAErB,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,qCAAqC,EAAE,QAAQ,EAC/C,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC;IAUD,UAAU,CAAC,SAAiB;QACxB,iBAAiB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAE1C,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,WAAW,EAAE,SAAS;SACzB,CAAC;QAEF,IAAI,WAAW,GAAG,EAAE,CAAC;QAErB,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,qCAAqC,EAAE,KAAK,EAC5C,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,4BAA4B,CAAC,CAAC;IAC7D,CAAC;IAMD,gBAAgB,CAAC,SAAiB;QAC9B,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,2BAA2B,SAAS,MAAM,CAAC;IAChF,CAAC;IAWD,aAAa,CAAC,SAAiB,EAAE,aAAsB;QACnD,iBAAiB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAE1C,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,WAAW,GAAG,EAAE,CAAC;QAErB,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,IAAI,aAAa,EAAE;YACf,MAAM,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;YAC1C,MAAM,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;YAErC,IAAI,UAAU,GAAG;gBACb,WAAW,EAAE,SAAS;gBACtB,eAAe,EAAE,aAAa;aACjC,CAAC;YACF,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,+DAA+D,EAAE,KAAK,EACtE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;SACtC;aAAM;YACH,MAAM,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;YAC1C,MAAM,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;YAErC,IAAI,UAAU,GAAG;gBACb,WAAW,EAAE,SAAS;aACzB,CAAC;YAEF,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,yCAAyC,EAAE,KAAK,EAChD,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,EAAG,MAAM,CAAC,CAAC;SAC1D;IACL,CAAC;IAYD,mCAAmC,CAAC,iBAAyB,EAAE,IAAU;QACrE,iBAAiB,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,CAAC;QAE1D,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,mBAAmB,EAAE,iBAAiB;SACzC,CAAC;QAEF,IAAI,WAAW,GAAG;YACd,kBAAkB,EAAE,IAAI,CAAC,kBAAkB,CAAC;SAC/C,CAAC;QAEF,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,+DAA+D,EAAE,KAAK,EACtE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,wDAAwD,CAAC,CAAC;IACzF,CAAC;IAYD,wBAAwB,CAAC,MAAc,EAAE,IAAU;QAC/C,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEpC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,QAAQ,EAAE,MAAM;SACnB,CAAC;QAEF,IAAI,WAAW,GAAG;YACd,kBAAkB,EAAE,IAAI,CAAC,kBAAkB,CAAC;SAC/C,CAAC;QAEF,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,wCAAwC,EAAE,KAAK,EAC/C,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,wDAAwD,CAAC,CAAC;IACzF,CAAC;CAEJ","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { RelatedContentRepresentation } from '../model/relatedContentRepresentation';\nimport { ResultListDataRepresentationRelatedContentRepresentation } from '../model/resultListDataRepresentationRelatedContentRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n * Content service.\n * @module ContentApi\n */\nexport class ContentApi extends BaseApi {\n    /**\n     * Attach existing content to a process instance\n     *\n     *\n     *\n     * @param processInstanceId processInstanceId\n     * @param relatedContent relatedContent\n     * @param opts Optional parameters\n     * @param opts.isRelatedContent isRelatedContent\n     * @return Promise<RelatedContentRepresentation>\n     */\n    createRelatedContentOnProcessInstance(processInstanceId: string, relatedContent: RelatedContentRepresentation | any, opts?: any): Promise<RelatedContentRepresentation> {\n        throwIfNotDefined(processInstanceId, 'processInstanceId');\n        throwIfNotDefined(relatedContent, 'relatedContent');\n\n        opts = opts || {};\n\n        let pathParams = {\n            'processInstanceId': processInstanceId\n        };\n\n        let queryParams = {\n            'isRelatedContent': opts['isRelatedContent']\n        };\n\n        let headerParams = {};\n        let formParams = {};\n\n        let accepts = ['application/json'];\n\n        if (relatedContent instanceof RelatedContentRepresentation) {\n            let postBody = relatedContent;\n            let contentTypes = ['application/json'];\n            return this.apiClient.callApi(\n                '/api/enterprise/process-instances/{processInstanceId}/content', 'POST',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                contentTypes, accepts, RelatedContentRepresentation);\n        } else {\n            let postBody = null;\n            formParams = {\n                'file': relatedContent\n            };\n            let contentTypes = ['multipart/form-data'];\n            return this.apiClient.callApi(\n                '/api/enterprise/process-instances/{processInstanceId}/raw-content', 'POST',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                contentTypes, accepts, RelatedContentRepresentation);\n        }\n    }\n\n    /**\n     * Attach existing content to a task\n     *\n     *\n     *\n     * @param taskId taskId\n     * @param relatedContent relatedContent\n     * @param opts Optional parameters\n     * @param opts.isRelatedContent isRelatedContent\n     * @return Promise<RelatedContentRepresentation>\n     */\n    createRelatedContentOnTask(taskId: string, relatedContent: RelatedContentRepresentation | any, opts?: any): Promise<RelatedContentRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(relatedContent, 'relatedContent');\n\n        opts = opts || {};\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n            'isRelatedContent': opts['isRelatedContent']\n        };\n\n        let headerParams = {};\n        let formParams = {};\n\n        let accepts = ['application/json'];\n\n        if (relatedContent instanceof RelatedContentRepresentation) {\n            let postBody = relatedContent;\n            let contentTypes = ['application/json'];\n            return this.apiClient.callApi(\n                '/api/enterprise/tasks/{taskId}/content', 'POST',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                contentTypes, accepts, RelatedContentRepresentation);\n\n        } else {\n            let postBody = null;\n            formParams = {\n                'file': relatedContent\n            };\n            let contentTypes = ['multipart/form-data'];\n            return this.apiClient.callApi(\n                '/api/enterprise/tasks/{taskId}/raw-content', 'POST',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                contentTypes, accepts, RelatedContentRepresentation);\n        }\n    }\n\n    /**\n     * Upload content and create a local representation\n     *\n     *\n     *\n     * @param file file\n     * @return Promise<RelatedContentRepresentation>\n     */\n    createTemporaryRawRelatedContent(file: any): Promise<RelatedContentRepresentation> {\n        throwIfNotDefined(file, 'file');\n\n        let postBody = null;\n\n        let pathParams = {};\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {\n            'file': file\n        };\n\n        let contentTypes = ['multipart/form-data'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/content/raw', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RelatedContentRepresentation);\n    }\n\n    /**\n     * Create a local representation of content from a remote repository\n     *\n     *\n     *\n     * @param relatedContent relatedContent\n     * @return Promise<RelatedContentRepresentation>\n     */\n    createTemporaryRelatedContent(relatedContent: RelatedContentRepresentation): Promise<RelatedContentRepresentation> {\n        throwIfNotDefined(relatedContent, 'relatedContent');\n\n        let postBody = relatedContent;\n\n        let pathParams = {};\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/content', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RelatedContentRepresentation);\n    }\n\n    /**\n     * Remove a local content representation\n     *\n     *\n     *\n     * @param contentId contentId\n     * @return Promise<{}>\n     */\n    deleteContent(contentId: number): Promise<any> {\n        throwIfNotDefined(contentId, 'contentId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'contentId': contentId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/content/{contentId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n\n    /**\n     * Get a local content representation\n     *\n     *\n     *\n     * @param contentId contentId\n     * @return Promise<RelatedContentRepresentation>\n     */\n    getContent(contentId: number): Promise<RelatedContentRepresentation> {\n        throwIfNotDefined(contentId, 'contentId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'contentId': contentId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/content/{contentId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RelatedContentRepresentation);\n    }\n\n    /**\n     * Get content Raw URL for the given contentId\n     * @param contentId contentId\n     */\n    getRawContentUrl(contentId: number) {\n        return `${this.apiClient.basePath}/api/enterprise/content/${contentId}/raw`;\n    }\n\n    /**\n     * Stream content rendition\n     *\n     *\n     *\n     * @param contentId contentId\n     * @param renditionType renditionType\n     * @return Promise<{}>\n     */\n    getRawContent(contentId: number, renditionType?: string): Promise<any> {\n        throwIfNotDefined(contentId, 'contentId');\n\n        let postBody = null;\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        if (renditionType) {\n            const contentTypes = ['application/json'];\n            const accepts = ['application/json'];\n\n            let pathParams = {\n                'contentId': contentId,\n                'renditionType': renditionType\n            };\n            return this.apiClient.callApi(\n                '/api/enterprise/content/{contentId}/rendition/{renditionType}', 'GET',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                contentTypes, accepts, 'blob');\n        } else {\n            const contentTypes = ['application/json'];\n            const accepts = ['application/json'];\n\n            let pathParams = {\n                'contentId': contentId\n            };\n\n            return this.apiClient.callApi(\n                '/api/enterprise/content/{contentId}/raw', 'GET',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                contentTypes, accepts, 'blob', undefined,  'blob');\n        }\n    }\n\n    /**\n     * List content attached to a process instance\n     *\n     *\n     *\n     * @param processInstanceId processInstanceId\n     * @param opts Optional parameters\n     * @param opts.isRelatedContent isRelatedContent\n     * @return Promise<ResultListDataRepresentationRelatedContentRepresentation>\n     */\n    getRelatedContentForProcessInstance(processInstanceId: string, opts?: any): Promise<ResultListDataRepresentationRelatedContentRepresentation> {\n        throwIfNotDefined(processInstanceId, 'processInstanceId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'processInstanceId': processInstanceId\n        };\n\n        let queryParams = {\n            'isRelatedContent': opts['isRelatedContent']\n        };\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-instances/{processInstanceId}/content', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationRelatedContentRepresentation);\n    }\n\n    /**\n     * List content attached to a task\n     *\n     *\n     *\n     * @param taskId taskId\n     * @param opts Optional parameters\n     * @param opts.isRelatedContent isRelatedContent\n     * @return Promise<ResultListDataRepresentationRelatedContentRepresentation>\n     */\n    getRelatedContentForTask(taskId: string, opts?: any): Promise<ResultListDataRepresentationRelatedContentRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n            'isRelatedContent': opts['isRelatedContent']\n        };\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/content', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationRelatedContentRepresentation);\n    }\n\n}\n"]}