/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { TaskRepresentation } from '../model/taskRepresentation';
import { BaseApi } from './base.api';
import { throwIfNotDefined } from '../../../assert';
export class TaskActionsApi extends BaseApi {
    assignTask(taskId, userIdentifier) {
        throwIfNotDefined(taskId, 'taskId');
        throwIfNotDefined(userIdentifier, 'userIdentifier');
        let postBody = userIdentifier;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/assign', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
    }
    attachForm(taskId, formIdentifier) {
        throwIfNotDefined(taskId, 'taskId');
        throwIfNotDefined(formIdentifier, 'formIdentifier');
        let postBody = formIdentifier;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/attach-form', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    claimTask(taskId) {
        throwIfNotDefined(taskId, 'taskId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/claim', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    completeTask(taskId) {
        throwIfNotDefined(taskId, 'taskId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/complete', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    delegateTask(taskId, userIdentifier) {
        throwIfNotDefined(taskId, 'taskId');
        throwIfNotDefined(userIdentifier, 'userIdentifier');
        let postBody = userIdentifier;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/delegate', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    involveGroup(taskId, groupId) {
        throwIfNotDefined(taskId, 'taskId');
        throwIfNotDefined(groupId, 'groupId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId, 'groupId': groupId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/groups/{groupId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    involveUser(taskId, userIdentifier) {
        throwIfNotDefined(taskId, 'taskId');
        throwIfNotDefined(userIdentifier, 'userIdentifier');
        let postBody = userIdentifier;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/involve', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    removeForm(taskId) {
        throwIfNotDefined(taskId, 'taskId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/remove-form', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    removeInvolvedUser(taskId, identifier) {
        throwIfNotDefined(taskId, 'taskId');
        throwIfNotDefined(identifier, 'identifier');
        let pathParams = {
            'taskId': taskId, 'groupId': identifier
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        if (identifier instanceof String) {
            let postBody = null;
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/groups/{groupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        }
        else {
            let postBody = identifier;
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/remove-involved', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        }
    }
    resolveTask(taskId) {
        throwIfNotDefined(taskId, 'taskId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/resolve', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    unclaimTask(taskId) {
        throwIfNotDefined(taskId, 'taskId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/unclaim', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
}
//# sourceMappingURL=../../../../../../src/api/activiti-rest-api/api/taskActions.api.js.map