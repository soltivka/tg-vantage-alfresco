{"version":3,"file":"taskVariables.api.js","sourceRoot":"","sources":["taskVariables.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { } from '../model/';\nimport { RestVariable } from '../model/restVariable';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Taskvariables service.\n* @module TaskvariablesApi\n*/\nexport class TaskVariablesApi extends BaseApi {\n    /**\n    * Create variables\n    *\n    *\n    *\n    * @param taskId taskId\n    * @param restVariables restVariables\n    * @return Promise<RestVariable>\n    */\n    createTaskVariable(taskId: string, restVariables: RestVariable): Promise<RestVariable> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(restVariables, 'restVariables');\n\n        let postBody = restVariables;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/variables', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RestVariable);\n    }\n    /**\n        * Create or update variables\n        *\n        *\n        *\n        * @param taskId taskId\n        * @return Promise<{}>\n        */\n    deleteAllLocalTaskVariables(taskId: string): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/variables', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Delete a variable\n        *\n        *\n        *\n        * @param taskId taskId\n        * @param variableName variableName\n        * @param opts Optional parameters\n        * @param opts.scope scope\n        * @return Promise<{}>\n        */\n    deleteVariable(taskId: string, variableName: string, opts?: any): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(variableName, 'variableName');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId, 'variableName': variableName\n        };\n\n        let queryParams = {\n            'scope': opts['scope']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/variables/{variableName}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Get a variable\n        *\n        *\n        *\n        * @param taskId taskId\n        * @param variableName variableName\n        * @param opts Optional parameters\n        * @param opts.scope scope\n        * @return Promise<RestVariable>\n        */\n    getVariable(taskId: string, variableName: string, opts?: any): Promise<RestVariable> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(variableName, 'variableName');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId, 'variableName': variableName\n        };\n\n        let queryParams = {\n            'scope': opts['scope']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/variables/{variableName}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RestVariable);\n    }\n    /**\n        * List variables\n        *\n        *\n        *\n        * @param taskId taskId\n        * @param opts Optional parameters\n        * @param opts.scope scope\n        * @return Promise<RestVariable>\n        */\n    getVariables(taskId: string, opts?: any): Promise<RestVariable> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n            'scope': opts['scope']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/variables', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RestVariable);\n    }\n    /**\n        * Update a variable\n        *\n        *\n        *\n        * @param taskId taskId\n        * @param variableName variableName\n        * @param restVariable restVariable\n        * @return Promise<RestVariable>\n        */\n    updateVariable(taskId: string, variableName: string, restVariable: RestVariable): Promise<RestVariable> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(variableName, 'variableName');\n        throwIfNotDefined(restVariable, 'restVariable');\n\n        let postBody = restVariable;\n\n        let pathParams = {\n            'taskId': taskId, 'variableName': variableName\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/variables/{variableName}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RestVariable);\n    }\n\n}\n"]}