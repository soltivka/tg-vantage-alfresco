{"version":3,"file":"integrationBox.api.js","sourceRoot":"","sources":["integrationBox.api.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;AAEF,OAAO,EAAE,sCAAsC,EAAE,MAAM,iDAAiD,CAAC;AAEzG,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AAMpD,MAAM,OAAO,iBAAkB,SAAQ,OAAO;IAQ1C,oBAAoB;QAEhB,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG,EAEhB,CAAC;QAEF,IAAI,WAAW,GAAG,EACjB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,WAAW,CAAC,CAAC;QAE5B,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,sDAAsD,EAAE,KAAK,EAC7D,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC;IAUD,uBAAuB,CAAC,MAAc,EAAE,WAAiD;QACrF,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACpC,iBAAiB,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;QAE9C,IAAI,QAAQ,GAAG,WAAW,CAAC;QAE3B,IAAI,UAAU,GAAG;YACb,QAAQ,EAAE,MAAM;SACnB,CAAC;QAEF,IAAI,WAAW,GAAG,EACjB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC;QAEtB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,kDAAkD,EAAE,MAAM,EAC1D,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC;IASD,uBAAuB,CAAC,MAAc;QAClC,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEpC,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,QAAQ,EAAE,MAAM;SACnB,CAAC;QAEF,IAAI,WAAW,GAAG,EACjB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC;QAEtB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,kDAAkD,EAAE,QAAQ,EAC5D,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC;IAQD,kBAAkB;QAEd,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG,EAEhB,CAAC;QAEF,IAAI,WAAW,GAAG,EACjB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC;QAEtB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,wCAAwC,EAAE,KAAK,EAC/C,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC;IAWD,QAAQ,CAAC,IAAU;QACf,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG,EAEhB,CAAC;QAEF,IAAI,WAAW,GAAG;YACd,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC;YACxB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC;SAC3B,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC;QAEtB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,uCAAuC,EAAE,KAAK,EAC9C,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,sCAAsC,CAAC,CAAC;IACvE,CAAC;IASD,oBAAoB,CAAC,MAAc;QAC/B,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEpC,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,QAAQ,EAAE,MAAM;SACnB,CAAC;QAEF,IAAI,WAAW,GAAG,EACjB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC;QAEtB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,kDAAkD,EAAE,KAAK,EACzD,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC;IAUD,uBAAuB,CAAC,MAAc,EAAE,WAAiD;QACrF,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACpC,iBAAiB,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;QAE9C,IAAI,QAAQ,GAAG,WAAW,CAAC;QAE3B,IAAI,UAAU,GAAG;YACb,QAAQ,EAAE,MAAM;SACnB,CAAC;QAEF,IAAI,WAAW,GAAG,EACjB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC;QAEtB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,kDAAkD,EAAE,KAAK,EACzD,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC;CAEJ","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ResultListDataRepresentationBoxContent } from '../model/resultListDataRepresentationBoxContent';\nimport { UserAccountCredentialsRepresentation } from '../model/userAccountCredentialsRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Integrationbox service.\n* @module IntegrationboxApi\n*/\nexport class IntegrationBoxApi extends BaseApi {\n    /**\n    * Box Authorization\n    *\n    * Returns Box OAuth HTML Page\n    *\n    * @return Promise<{}>\n    */\n    confirmAuthorisation(): Promise<any> {\n\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['text/html'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/box/confirm-auth-request', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Add Box account\n        *\n        *\n        *\n        * @param userId userId\n        * @param credentials credentials\n        * @return Promise<{}>\n        */\n    createRepositoryAccount(userId: number, credentials: UserAccountCredentialsRepresentation): Promise<any> {\n        throwIfNotDefined(userId, 'userId');\n        throwIfNotDefined(credentials, 'credentials');\n\n        let postBody = credentials;\n\n        let pathParams = {\n            'userId': userId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['*/*'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/box/{userId}/account', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Delete account information\n        *\n        *\n        *\n        * @param userId userId\n        * @return Promise<{}>\n        */\n    deleteRepositoryAccount(userId: number): Promise<any> {\n        throwIfNotDefined(userId, 'userId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'userId': userId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['*/*'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/box/{userId}/account', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Get status information\n        *\n        *\n        *\n        * @return Promise<boolean>\n        */\n    getBoxPluginStatus(): Promise<boolean> {\n\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['*/*'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/box/status', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * List file and folders\n        *\n        *\n        *\n        * @param opts Optional parameters\n        * @param opts.filter filter\n        * @param opts.parent parent\n        * @return Promise<ResultListDataRepresentationBoxContent>\n        */\n    getFiles(opts?: any): Promise<ResultListDataRepresentationBoxContent> {\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'filter': opts['filter'],\n            'parent': opts['parent']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['*/*'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/box/files', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationBoxContent);\n    }\n    /**\n        * Get account information\n        *\n        *\n        *\n        * @param userId userId\n        * @return Promise<{}>\n        */\n    getRepositoryAccount(userId: number): Promise<any> {\n        throwIfNotDefined(userId, 'userId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'userId': userId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['*/*'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/box/{userId}/account', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Update account information\n        *\n        *\n        *\n        * @param userId userId\n        * @param credentials credentials\n        * @return Promise<{}>\n        */\n    updateRepositoryAccount(userId: number, credentials: UserAccountCredentialsRepresentation): Promise<any> {\n        throwIfNotDefined(userId, 'userId');\n        throwIfNotDefined(credentials, 'credentials');\n\n        let postBody = credentials;\n\n        let pathParams = {\n            'userId': userId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['*/*'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/box/{userId}/account', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n\n}\n"]}