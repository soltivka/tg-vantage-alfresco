{"version":3,"file":"formFieldRepresentation.js","sourceRoot":"","sources":["formFieldRepresentation.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;AAEF,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACpE,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAE9D,MAAM,OAAO,uBAAuB;IAkChC,YAAY,KAAW;QAEnB,IAAI,KAAK,EAAE;YACP,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC3B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,oBAAoB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YAChF,IAAI,KAAK,CAAC,OAAO,EAAE;gBACf,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE;oBAC3C,OAAO,IAAI,oBAAoB,CAAC,IAAI,CAAC,CAAC;gBAC1C,CAAC,CAAC,CAAC;aACN;YACD,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,uBAAuB,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;SAC7H;IACL,CAAC;CAEJ","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ConditionRepresentation } from './conditionRepresentation';\nimport { LayoutRepresentation } from './layoutRepresentation';\nimport { OptionRepresentation } from './optionRepresentation';\n\nexport class FormFieldRepresentation {\n    fieldType?: string;\n    className?: string;\n    col?: number;\n    colspan?: number;\n    dateDisplayFormat?: string;\n    hasEmptyValue?: boolean;\n    id?: string;\n    layout?: LayoutRepresentation;\n    maxLength?: number;\n    maxValue?: string;\n    minLength?: number;\n    minValue?: string;\n    name?: string;\n    optionType?: string;\n    options?: OptionRepresentation[];\n    overrideId?: boolean;\n    params?: any;\n    placeholder?: string;\n    readOnly?: boolean;\n    regexPattern?: string;\n    required?: boolean;\n    restIdProperty?: string;\n    restLabelProperty?: string;\n    restResponsePath?: string;\n    restUrl?: string;\n    row?: number;\n    sizeX?: number;\n    sizeY?: number;\n    tab?: string;\n    type?: string;\n    value?: any;\n    visibilityCondition?: ConditionRepresentation;\n\n    constructor(input?: any) {\n\n        if (input) {\n            Object.assign(this, input);\n            this.layout = input.layout ? new LayoutRepresentation(input.layout) : undefined;\n            if (input.options) {\n                this.options = input.options.map((item: any) => {\n                    return new OptionRepresentation(item);\n                });\n            }\n            this.visibilityCondition = input.visibilityCondition ? new ConditionRepresentation(input.visibilityCondition) : undefined;\n        }\n    }\n\n}\n"]}