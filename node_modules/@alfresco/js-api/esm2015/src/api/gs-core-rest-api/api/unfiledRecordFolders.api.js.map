{"version":3,"file":"unfiledRecordFolders.api.js","sourceRoot":"","sources":["unfiledRecordFolders.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { RMNodeBodyCreateWithRelativePath } from '../model/rMNodeBodyCreateWithRelativePath';\nimport { UnfiledRecordFolderAssociationPaging } from '../model/unfiledRecordFolderAssociationPaging';\nimport { UnfiledRecordFolderBodyUpdate } from '../model/unfiledRecordFolderBodyUpdate';\nimport { UnfiledRecordFolderEntry } from '../model/unfiledRecordFolderEntry';\nimport { BaseApi } from './base.api';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Unfiledrecordfolders service.\n* @module UnfiledRecordFoldersApi\n*/\nexport class UnfiledRecordFoldersApi extends BaseApi {\n    /**\n    * Create a record or an unfiled record folder\n    *\n    * Create a record or an unfiled record folder as a primary child of **unfiledRecordFolderId**.\n\nYou can set the **autoRename** boolean field to automatically resolve name clashes. If there is a name clash, then\nthe API method tries to create a unique name using an integer suffix.\n\nThis endpoint supports both JSON and multipart/form-data (file upload).\n\n**Using multipart/form-data**\n\nUse the **filedata** field to represent the content to upload, for example, the following curl command will\ncreate a node with the contents of test.txt in the test user's home folder.\n\ncurl -utest:test -X POST host:port/alfresco/api/-default-/public/gs/versions/1/unfiled-record-folders/{unfiledRecordFolderId}/children -F filedata=@test.txt\n\nThis API method also supports record and unfiled record folder creation using application/json.\n\nYou must specify at least a **name** and **nodeType**.\n\nYou can create a non-electronic record like this:\nJSON\n{\n  \\\"name\\\":\\\"My Non-electronic Record\\\",\n  \\\"nodeType\\\":\\\"rma:nonElectronicDocument\\\",\n  \\\"properties\\\":\n    {\n      \\\"cm:description\\\":\\\"My Non-electronic Record Description\\\",\n      \\\"cm:title\\\":\\\"My Non-electronic Record Title\\\",\n      \\\"rma:box\\\":\\\"My Non-electronic Record Box\\\",\n      \\\"rma:file\\\":\\\"My Non-electronic Record File\\\",\n      \\\"rma:numberOfCopies\\\":1,\n      \\\"rma:physicalSize\\\":30,\n      \\\"rma:shelf\\\":\\\"My Non-electronic Record Shelf\\\",\n      \\\"rma:storageLocation\\\":\\\"My Non-electronic Record Location\\\"\n    }\n}\n\nYou can create an empty electronic record like this:\nJSON\n{\n  \\\"name\\\":\\\"My Electronic Record\\\",\n  \\\"nodeType\\\":\\\"cm:content\\\"\n}\n\nYou can create an unfiled record folder like this:\nJSON\n{\n  \\\"name\\\": \\\"My Unfiled Record Folder\\\",\n  \\\"nodeType\\\": \\\"rma:unfiledRecordFolder\\\",\n  \\\"properties\\\":\n  {\n    \\\"cm:title\\\": \\\"My Unfiled Record Folder Title\\\"\n  }\n}\n\nAny missing aspects are applied automatically. You can set aspects explicitly, if needed, using an **aspectNames** field.\n\n**Note:** You can create more than one child by\nspecifying a list of nodes in the JSON body. For example, the following JSON\nbody creates a record and an unfiled record folder inside the specified **unfiledRecordFolderId**:\nJSON\n[\n  {\n    \\\"name\\\":\\\"My Record\\\",\n    \\\"nodeType\\\":\\\"cm:content\\\"\n  },\n  {\n    \\\"name\\\":\\\"My Unfiled Record Folder\\\",\n    \\\"nodeType\\\":\\\"rma:unfiledRecordFolder\\\"\n  }\n]\n\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 2,\n      \\\"hasMoreItems\\\": false,\n      \\\"totalItems\\\": 2,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 100\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n\n    *\n    * @param unfiledRecordFolderId The identifier of an unfiled record folder.\n    * @param nodeBodyCreate The node information to create.\n    * @param opts Optional parameters\n    * @param opts.autoRename If true, then  a name clash will cause an attempt to auto rename by finding a unique name using an integer suffix.\n\n    * @param opts.include Returns additional information about the unfiled records container's children. Any optional field from the response model can be requested. For example:\n* allowableOperations\n* path\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<UnfiledRecordFolderAssociationPaging>\n    */\n    createUnfiledRecordFolderChildren(unfiledRecordFolderId: string, nodeBodyCreate: RMNodeBodyCreateWithRelativePath, opts?: any): Promise<UnfiledRecordFolderAssociationPaging> {\n        throwIfNotDefined(unfiledRecordFolderId, 'unfiledRecordFolderId');\n        throwIfNotDefined(nodeBodyCreate, 'nodeBodyCreate');\n\n        opts = opts || {};\n        let postBody = nodeBodyCreate;\n\n        let pathParams = {\n            'unfiledRecordFolderId': unfiledRecordFolderId\n        };\n\n        let queryParams = {\n            'autoRename': opts['autoRename'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json', 'multipart/form-data'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/unfiled-record-folders/{unfiledRecordFolderId}/children', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, UnfiledRecordFolderAssociationPaging);\n    }\n    /**\n        * Delete an unfiled record folder. Deleted file plan components cannot be recovered, they are deleted permanently.\n        *\n        * Deletes the unfiled record folder **unfiledRecordFolderId**.\n\n        *\n        * @param unfiledRecordFolderId The identifier of an unfiled record folder.\n        * @return Promise<{}>\n        */\n    deleteUnfiledRecordFolder(unfiledRecordFolderId: string): Promise<any> {\n        throwIfNotDefined(unfiledRecordFolderId, 'unfiledRecordFolderId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'unfiledRecordFolderId': unfiledRecordFolderId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/unfiled-record-folders/{unfiledRecordFolderId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Get the unfiled record folder\n        *\n        * Gets information for unfiled record folder id **unfiledRecordFolderId**\n\n    Mandatory fields and the unfiled record folder's aspects and properties are returned by default.\n\n    You can use the **include** parameter (include=allowableOperations) to return additional information.\n\n        *\n        * @param unfiledRecordFolderId The identifier of an unfiled record folder.\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the unfiled records container's children. Any optional field from the response model can be requested. For example:\n    * allowableOperations\n    * path\n\n        * @param opts.relativePath Return information on children in the unfiled records container resolved by this path. The path is relative to **unfiledRecordFolderId**.\n\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @return Promise<UnfiledRecordFolderEntry>\n        */\n    getUnfiledRecordFolder(unfiledRecordFolderId: string, opts?: any): Promise<UnfiledRecordFolderEntry> {\n        throwIfNotDefined(unfiledRecordFolderId, 'unfiledRecordFolderId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'unfiledRecordFolderId': unfiledRecordFolderId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'relativePath': opts['relativePath'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/unfiled-record-folders/{unfiledRecordFolderId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, UnfiledRecordFolderEntry);\n    }\n    /**\n        * List unfiled record folder's children\n        *\n        * Returns a list of records or unfiled record folders.\n\n    Minimal information for each child is returned by default.\n\n    You can use the **include** parameter (include=allowableOperations) to return additional information.\n\n        *\n        * @param unfiledRecordFolderId The identifier of an unfiled record folder.\n        * @param opts Optional parameters\n        * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\n        * @param opts.maxItems The maximum number of items to return in the list.\n        * @param opts.where Optionally filter the list. Here are some examples:\n\n    *   where=(isRecord=true)\n\n    *   where=(isUnfiledRecordFolder=false)\n\n    *   where=(nodeType='cm:content INCLUDESUBTYPES')\n\n        * @param opts.include Returns additional information about the unfiled records container's children. Any optional field from the response model can be requested. For example:\n    * allowableOperations\n    * aspectNames\n    * association\n    * path\n    * properties\n\n        * @param opts.relativePath Return information on children in the unfiled records container resolved by this path. The path is relative to **unfiledRecordFolderId**.\n\n        * @param opts.includeSource Also include **source** (in addition to **entries**) with folder information on the parent node – either the specified parent **unfiledRecordFolderId**, or as resolved by **relativePath**.\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @return Promise<UnfiledRecordFolderAssociationPaging>\n        */\n    listUnfiledRecordFolderChildren(unfiledRecordFolderId: string, opts?: any): Promise<UnfiledRecordFolderAssociationPaging> {\n        throwIfNotDefined(unfiledRecordFolderId, 'unfiledRecordFolderId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'unfiledRecordFolderId': unfiledRecordFolderId\n        };\n\n        let queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'where': opts['where'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'relativePath': opts['relativePath'],\n            'includeSource': opts['includeSource'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/unfiled-record-folders/{unfiledRecordFolderId}/children', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, UnfiledRecordFolderAssociationPaging);\n    }\n    /**\n        * Update an unfiled record folder\n        *\n        * Updates unfiled record folder **unfiledRecordFolderId**. For example, you can rename a record folder:\n    JSON\n    {\n      \\\"name\\\":\\\"My new name\\\"\n    }\n\n    You can also set or update one or more properties:\n    JSON\n    {\n      \\\"properties\\\":\n        {\n           \\\"cm:title\\\":\\\"New title\\\",\n           \\\"cm:description\\\":\\\"New description\\\"\n        }\n    }\n\n    **Note:** if you want to add or remove aspects, then you must use **GET /unfiled-record-folders/{unfiledRecordFolderId}** first to get the complete set of *aspectNames*.\n\n    **Note:** Currently there is no optimistic locking for updates, so they are applied in \\\"last one wins\\\" order.\n\n        *\n        * @param unfiledRecordFolderId The identifier of an unfiled record folder.\n        * @param unfiledRecordFolderBodyUpdate The record folder information to update.\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the unfiled records container's children. Any optional field from the response model can be requested. For example:\n    * allowableOperations\n    * path\n\n        * @param opts.includeSource Also include **source** (in addition to **entries**) with folder information on the parent node – either the specified parent **unfiledRecordFolderId**, or as resolved by **relativePath**.\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @return Promise<UnfiledRecordFolderEntry>\n        */\n    updateUnfiledRecordFolder(unfiledRecordFolderId: string, unfiledRecordFolderBodyUpdate: UnfiledRecordFolderBodyUpdate, opts?: any): Promise<UnfiledRecordFolderEntry> {\n        throwIfNotDefined(unfiledRecordFolderId, 'unfiledRecordFolderId');\n        throwIfNotDefined(unfiledRecordFolderBodyUpdate, 'unfiledRecordFolderBodyUpdate');\n\n        opts = opts || {};\n        let postBody = unfiledRecordFolderBodyUpdate;\n\n        let pathParams = {\n            'unfiledRecordFolderId': unfiledRecordFolderId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'includeSource': opts['includeSource'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/unfiled-record-folders/{unfiledRecordFolderId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, UnfiledRecordFolderEntry);\n    }\n\n}\n"]}