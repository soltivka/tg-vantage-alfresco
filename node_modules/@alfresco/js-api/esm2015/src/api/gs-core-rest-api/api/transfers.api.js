/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { TransferAssociationPaging } from '../model/transferAssociationPaging';
import { TransferEntry } from '../model/transferEntry';
import { BaseApi } from './base.api';
import { buildCollectionParam } from '../../../alfrescoApiClient';
import { throwIfNotDefined } from '../../../assert';
export class TransfersApi extends BaseApi {
    getTransfer(transferId, opts) {
        throwIfNotDefined(transferId, 'transferId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'transferId': transferId
        };
        let queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/transfers/{transferId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TransferEntry);
    }
    listTransfersChildren(transferId, opts) {
        throwIfNotDefined(transferId, 'transferId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'transferId': transferId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'includeSource': opts['includeSource'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/transfers/{transferId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TransferAssociationPaging);
    }
}
//# sourceMappingURL=../../../../../../src/api/gs-core-rest-api/api/transfers.api.js.map