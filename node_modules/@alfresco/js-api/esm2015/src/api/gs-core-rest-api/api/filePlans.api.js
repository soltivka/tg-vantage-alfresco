/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { FilePlanEntry } from '../model/filePlanEntry';
import { RecordCategoryEntry } from '../model/recordCategoryEntry';
import { RecordCategoryPaging } from '../model/recordCategoryPaging';
import { BaseApi } from './base.api';
import { buildCollectionParam } from '../../../alfrescoApiClient';
import { throwIfNotDefined } from '../../../assert';
export class FilePlansApi extends BaseApi {
    createFilePlanCategories(filePlanId, nodeBodyCreate, opts) {
        throwIfNotDefined(filePlanId, 'filePlanId');
        throwIfNotDefined(nodeBodyCreate, 'nodeBodyCreate');
        opts = opts || {};
        let postBody = nodeBodyCreate;
        let pathParams = {
            'filePlanId': filePlanId
        };
        let queryParams = {
            'autoRename': opts['autoRename'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json', 'multipart/form-data'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/file-plans/{filePlanId}/categories', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryEntry);
    }
    getFilePlan(filePlanId, opts) {
        throwIfNotDefined(filePlanId, 'filePlanId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'filePlanId': filePlanId
        };
        let queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/file-plans/{filePlanId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FilePlanEntry);
    }
    getFilePlanCategories(filePlanId, opts) {
        throwIfNotDefined(filePlanId, 'filePlanId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'filePlanId': filePlanId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'includeSource': opts['includeSource'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/file-plans/{filePlanId}/categories', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryPaging);
    }
    updateFilePlan(filePlanId, filePlanBodyUpdate, opts) {
        throwIfNotDefined(filePlanId, 'filePlanId');
        throwIfNotDefined(filePlanBodyUpdate, 'filePlanBodyUpdate');
        opts = opts || {};
        let postBody = filePlanBodyUpdate;
        let pathParams = {
            'filePlanId': filePlanId
        };
        let queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/file-plans/{filePlanId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FilePlanEntry);
    }
}
//# sourceMappingURL=../../../../../../src/api/gs-core-rest-api/api/filePlans.api.js.map