{"version":3,"file":"peopleApi.js","sourceRoot":"","sources":["peopleApi.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { PeopleApi as PeopleApiNew } from '../../../../api/content-rest-api/api/people.api';\nimport { NetworksApi } from '../../../../api/content-rest-api/api/networks.api';\nimport { FavoritesApi } from '../../../../api/content-rest-api/api/favorites.api';\nimport { SitesApi } from '../../../../api/content-rest-api/api/sites.api';\nimport { PreferencesApi } from '../../../../api/content-rest-api/api/preferences.api';\nimport { ActivitiesApi } from '../../../../api/content-rest-api/api/activities.api';\nimport { AlfrescoApi } from '../../../../alfrescoApi';\nimport { GroupsApi } from '../../../../api/content-rest-api/api/groups.api';\nimport { FavoriteEntry } from '../../../../api/content-rest-api/model/favoriteEntry';\nimport { FavoriteBodyCreate } from '../../../../api/content-rest-api/model/favoriteBodyCreate';\nimport { SiteMembershipRequestBodyCreate } from '../../../../api/content-rest-api/model/siteMembershipRequestBodyCreate';\nimport { SiteMembershipRequestEntry } from '../../../../api/content-rest-api/model/siteMembershipRequestEntry';\nimport { FavoriteSiteBodyCreate } from '../../../../api/content-rest-api/model/favoriteSiteBodyCreate';\nimport { FavoriteSiteEntry } from '../../../../api/content-rest-api/model/favoriteSiteEntry';\nimport { ActivityPaging } from '../../../../api/content-rest-api/model/activityPaging';\nimport { SiteEntry } from '../../../../api/content-rest-api/model/siteEntry';\nimport { SitePaging } from '../../../../api/content-rest-api/model/sitePaging';\nimport { FavoritePaging } from '../../../../api/content-rest-api/model/favoritePaging';\nimport { PersonEntry } from '../../../../api/content-rest-api/model/personEntry';\nimport { PersonPaging } from '../../../../api/content-rest-api/model/personPaging';\nimport { PersonNetworkEntry } from '../../../../api/content-rest-api/model/personNetworkEntry';\nimport { PersonNetworkPaging } from '../../../../api/content-rest-api/model/personNetworkPaging';\nimport { PreferenceEntry } from '../../../../api/content-rest-api/model/preferenceEntry';\nimport { PreferencePaging } from '../../../../api/content-rest-api/model/preferencePaging';\nimport { GroupPaging } from '../../../../api/content-rest-api/model/groupPaging';\nimport { SiteMembershipRequestPaging } from '../../../../api/content-rest-api/model/siteMembershipRequestPaging';\nimport { SiteMembershipRequestBodyUpdate } from '../../../../api/content-rest-api/model/siteMembershipRequestBodyUpdate';\nimport { PersonBodyCreate } from '../../../../api/content-rest-api/model/personBodyCreate';\nimport { PersonBodyUpdate } from '../../../../api/content-rest-api/model/personBodyUpdate';\nimport { SiteRolePaging } from '../../../../api/content-rest-api/model/siteRolePaging';\n\n/**\n * @deprecated 3.0.0\n */\nexport class PeopleApi {\n\n    private networksApi: NetworksApi;\n    private peopleApiNew: PeopleApiNew;\n    private favoritesApi: FavoritesApi;\n    private sitesApi: SitesApi;\n    private activitiesApi: ActivitiesApi;\n    private preferencesApi: PreferencesApi;\n    private groupsApi: GroupsApi;\n\n    public init(alfrescoApi?: AlfrescoApi) {\n        this.networksApi = new NetworksApi(alfrescoApi);\n        this.peopleApiNew = new PeopleApiNew(alfrescoApi);\n        this.favoritesApi = new FavoritesApi(alfrescoApi);\n        this.sitesApi = new SitesApi(alfrescoApi);\n        this.activitiesApi = new ActivitiesApi(alfrescoApi);\n        this.preferencesApi = new PreferencesApi(alfrescoApi);\n        this.groupsApi = new GroupsApi(alfrescoApi);\n    }\n\n    /**\n     * People service.\n     * @module api/PeopleApi\n     * @version 0.1.0\n     */\n\n    /**\n     * Add a favorite\n     * Favorite a **site**, **file**, or **folder** in the repository.\n     * @param {String} personId The identifier of a person.\n     * @param {module:model/FavoriteBody} favoriteBody An object identifying the entity to be favorited. \\n\\nThe object consists of a single property which is an object with the name &#x60;site&#x60;, &#x60;file&#x60;, or &#x60;folder&#x60;. \\nThe content of that object is the &#x60;guid&#x60; of the target entity.\\n\\nFor example, to favorite a file the following body would be used:\\n\\n&#x60;&#x60;&#x60;JSON\\n{\\n   \\&quot;target\\&quot;: {\\n      \\&quot;file\\&quot;: {\\n         \\&quot;guid\\&quot;: \\&quot;abcde-01234\\&quot;\\n      }\\n   }\\n}\\n&#x60;&#x60;&#x60;\\n\n     * data is of type: {module:model/FavoriteEntry}\n     */\n    addFavorite(personId: string, favoriteBody: FavoriteBodyCreate): Promise<FavoriteEntry> {\n        return this.favoritesApi.createFavorite(personId, favoriteBody);\n    }\n\n    /**\n     * Create a site membership request\n     * Create a site membership request for **personId** and **siteId**. The **personId** will be invited to the site as a SiteConsumer.\n     * @param {String} personId The identifier of a person.\n     * @param {module:model/SiteMembershipBody} siteMembershipBody Site membership request details\n     * data is of type: {module:model/SiteMembershipRequestEntry}\n     */\n    addSiteMembershipRequest(personId: string, siteMembershipBody: SiteMembershipRequestBodyCreate): Promise<SiteMembershipRequestEntry> {\n        return this.sitesApi.createSiteMembershipRequestForPerson(personId, siteMembershipBody);\n    }\n\n    /**\n     * Delete favorite site\n     * Removes site **siteId** from the favorite site list of person **personId**.\\n\\n**Note This method is deprecated and will be removed in the future.**\\nUse &#x60;/people/{personId}/favorites/{favoriteId}&#x60; instead.\\n\n     * @param {String} personId The identifier of a person.\n     * @param {String} siteId The identifier of a site.\n     */\n    deleteFavoriteSite(personId: string, siteId: string): Promise<any> {\n        return this.favoritesApi.deleteSiteFavorite(personId, siteId);\n    }\n\n    /**\n     * Favorite a site\n     * Add a favorite site for person **personId**.\\n\\n**Note: that this method is deprecated and will be removed in the future**.\\nUse &#x60;/people/{personId}/favorites&#x60; instead.\\n\n     * @param {String} personId The identifier of a person.\n     * @param {module:model/FavoriteSiteBody} favoriteSiteBody The id of the site to favorite.\n     * data is of type: {module:model/InlineResponse201}\n     */\n    favoriteSite(personId: string, favoriteSiteBody: FavoriteSiteBodyCreate): Promise<FavoriteSiteEntry> {\n        return this.favoritesApi.createSiteFavorite(personId, favoriteSiteBody);\n    }\n\n    /**\n     * Get activities\n     * Returns a list of activities for person **personId**.\n     * @param {String} personId The identifier of a person.\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {String} opts.who A filter to include the user&#39;s activities only &#x60;-me-&#x60;, other user&#39;s activities only &#x60;-others-&#x60;&#39;\\n\n     * @param {String} opts.siteId Include only activity feed entries relating to this site.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/ActivityPaging}\n     */\n    getActivities(personId: string, opts?: any): Promise<ActivityPaging> {\n        return this.activitiesApi.listActivitiesForPerson(personId, opts);\n    }\n\n    /**\n     * Get a favorite\n     * Returns favorite **favoriteId** for person **personId**.\n     * @param {String} personId The identifier of a person.\n     * @param {String} favoriteId The identifier of a favorite.\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/FavoriteEntry}\n     */\n    getFavorite(personId: string, favoriteId: string, opts?: any): Promise<FavoriteEntry> {\n        return this.favoritesApi.getFavorite(personId, favoriteId, opts);\n    }\n\n    /**\n     * Get a favorite site\n     * Returns information on favorite site **siteId** of person **personId**.\\n\\n**Note: This method is deprecated and will be removed in the future.**\\nUse &#x60;/people/{personId}/favorites/{favoriteId}&#x60; instead.\\n\n     * @param {String} personId The identifier of a person.\n     * @param {String} siteId The identifier of a site.\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/SiteEntry}\n     */\n    getFavoriteSite(personId: string, siteId: string, opts?: any): Promise<SiteEntry> {\n        return this.favoritesApi.getFavoriteSite(personId, siteId, opts);\n    }\n\n    /**\n     * Get favorite sites\n     * Get a person&#39;s favorite sites.\\n\\n**Note: This method is deprecated and will be removed in the future**.\\nUse &#x60;/people/{personId}/favorites&#x60; instead.\\n\n     * @param {String} personId The identifier of a person.\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/SitePaging}\n     */\n    getFavoriteSites(personId: string, opts?: any): Promise<SitePaging> {\n        return this.favoritesApi.listFavoriteSitesForPerson(personId, opts);\n    }\n\n    /**\n     * Get favorites\n     * Returns a list of favorites for person **personId**.\\n\\nYou can us the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to get the favorites of the currently authenticated user.\\n\\nYou can use the **where** parameter to restrict the list in the response\\nto entries of a specific kind. The **where** parameter takes a value.\\nThe value is a single predicate that can include one or more **EXISTS**\\nconditions. The **EXISTS** condition uses a single operand to limit the\\nlist to include entries that include that one property. The property values are:\\n\\n*   &#x60;target/file&#x60;\\n*   &#x60;target/folder&#x60;\\n*   &#x60;target/site&#x60;\\n\\nFor example, the following **where** parameter restricts the returned list to the file favorites for a person:\\n\\n&#x60;&#x60;&#x60;SQL\\n(EXISTS(target/file))\\n&#x60;&#x60;&#x60;\\nYou can specify more than one condition using **OR**. The predicate must be enclosed in parentheses.\\n\\n\\nFor example, the following **where** parameter restricts the returned list to the file and folder favorites for a person:\\n\\n&#x60;&#x60;&#x60;SQL\\n(EXISTS(target/file) OR EXISTS(target/folder))\\n&#x60;&#x60;&#x60;\\n\n     * @param {String} personId The identifier of a person.\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {String} opts.where A string to restrict the returned objects by using a predicate.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/FavoritePaging}\n     */\n    getFavorites(personId: string, opts?: any): Promise<FavoritePaging> {\n        return this.favoritesApi.listFavorites(personId, opts);\n    }\n\n    /**\n     * Get a person\n     * Gets information for the person **personId**.\n     * @param {String} personId The identifier of a person.\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/PersonEntry}\n     */\n    getPerson(personId: string, opts?: any): Promise<PersonEntry> {\n        return this.peopleApiNew.getPerson(personId, opts);\n    }\n\n    /**\n     * List people.\n     * Gets information for the persons\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/PersonEntry}\n     */\n    getPersons(opts?: any): Promise<PersonPaging> {\n        return this.peopleApiNew.listPeople(opts);\n    }\n\n    /**\n     * Add a person\n     *If applicable, the given person's login access can also be optionally disabled. You must have admin rights to create a person. You can set custom properties when you create a person:\n     * @param {PersonBodyCreate} person The PersonBodyCreate object.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/PersonEntry}\n     */\n    addPerson(person: PersonBodyCreate): Promise<PersonEntry> {\n        return this.peopleApiNew.createPerson(person);\n    }\n\n    /**\n     * Update an existing user\n     * @param {String} personId The identifier of a user.\n     * @param {PersonBodyUpdate} personBodyUpdate The user details\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names. You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth. The list applies to a returned individual entity or entries within a collection. If the API method also supports the include parameter, then the fields specified in the include parameter are returned in addition to those specified in the fields parameter\\n\n     * data is of type: {module:model/PersonEntry}\n     */\n    updatePerson(personId: string, personBodyUpdate: PersonBodyUpdate, opts?: any): Promise<PersonEntry> {\n        return this.peopleApiNew.updatePerson(personId, personBodyUpdate, opts);\n    }\n\n    /**\n     * Get network information\n     * Returns network information on a single network specified by **networkId** for **personId**.\n     * @param {String} personId The identifier of a person.\n     * @param {String} networkId The identifier of a network.\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/PersonNetworkEntry}\n     */\n    getPersonNetwork(personId: string, networkId: string, opts?: any): Promise<PersonNetworkEntry> {\n        return this.networksApi.getNetworkForPerson(personId, networkId, opts);\n    }\n\n    /**\n     * Get network membership for a person\n     * Gets a list of network memberships for person **personId**.\n     * @param {String} personId The identifier of a person.\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/PersonNetworkPaging}\n     */\n    getPersonNetworks(personId: string, opts?: any): Promise<PersonNetworkPaging> {\n        return this.networksApi.listNetworksForPerson(personId, opts);\n    }\n\n    /**\n     * Get a preference\n     * Returns a specific preference for person **personId**.\n     * @param {String} personId The identifier of a person.\n     * @param {String} preferenceName The name of the preference.\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/PreferenceEntry}\n     */\n    getPreference(personId: string, preferenceName: string, opts?: any): Promise<PreferenceEntry> {\n        return this.preferencesApi.getPreference(personId, preferenceName, opts);\n    }\n\n    /**\n     * Get preferences\n     * Returns a list of preferences for person **personId**.\\n\\nEach preference consists of an **id** and a **value**.\\nThe **value** can be of any JSON type.\\n\n     * @param {String} personId The identifier of a person.\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/PreferencePaging}\n     */\n    getPreferences(personId: string, opts?: any): Promise<PreferencePaging> {\n        return this.preferencesApi.listPreferences(personId, opts);\n    }\n\n    /**\n     * Get site membership information\n     * Returns a list of site membership information for person **personId**.\\nYou can sort the list of sites using the **orderBy** parameter.\\n\\n**orderBy** specifies the name of one or more\\ncomma separated properties.\\nFor each property you can optionally specify the order direction.\\nBoth of the these **orderBy** examples retrieve sites ordered by ascending name:\\n\\n&#x60;&#x60;&#x60;\\nname\\nname ASC\\n&#x60;&#x60;&#x60;\\n\n     * @param {String} personId The identifier of a person.\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {String} opts.orderBy A string to control the order of the entities returned.\n     * @param {string[]} opts.relations Use the relations parameter to include one or more related entities in a single response.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/SitePaging}\n     */\n    getSiteMembership(personId: string, opts?: any): Promise<SiteRolePaging> {\n        return this.sitesApi.listSiteMembershipsForPerson(personId, opts);\n    }\n\n    /**\n     * Get groups membership information\n     * Returns a list of site membership information for person **personId**.\\nYou can sort the list of sites using the **orderBy** parameter.\\n\\n**orderBy** specifies the name of one or more\\ncomma separated properties.\\nFor each property you can optionally specify the order direction.\\nBoth of the these **orderBy** examples retrieve sites ordered by ascending name:\\n\\n&#x60;&#x60;&#x60;\\nname\\nname ASC\\n&#x60;&#x60;&#x60;\\n\n     * @param {String} personId The identifier of a person.\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {String} opts.orderBy A string to control the order of the entities returned.\n     * @param {String} opts.where A string to restrict the returned objects by using a predicate.\n     * @param {string[]} opts.include Use the include parameter to include one or more related entities in a single response. Possible values : parentIds and zones\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/GroupsPaging}\n     */\n    getGroupsMembership(personId: string, opts?: any): Promise<GroupPaging> {\n        return this.groupsApi.listGroupMembershipsForPerson(personId, opts);\n    }\n\n    /**\n     * Get a site membership request\n     * Returns the site membership request for site **siteId** for person **personId**, if one exists.\n     * @param {String} personId The identifier of a person.\n     * @param {String} siteId The identifier of a site.\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/SiteMembershipRequestEntry}\n     */\n    getSiteMembershipRequest(personId: string, siteId: string, opts?: any): Promise<SiteMembershipRequestEntry> {\n        return this.sitesApi.getSiteMembershipRequestForPerson(personId, siteId, opts);\n    }\n\n    /**\n     * Get site membership requests\n     * Returns the current site membership requests for person **personId**.\n     * @param {String} personId The identifier of a person.\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/SiteMembershipRequestPaging}\n     */\n    getSiteMembershipRequests(personId: string, opts?: any): Promise<SiteMembershipRequestPaging> {\n        return this.sitesApi.listSiteMembershipRequestsForPerson(personId, opts);\n    }\n\n    /**\n     * Delete a favorite\n     * Removes **favoriteId** as a favorite of person **personId**.\n     * @param {String} personId The identifier of a person.\n     * @param {String} favoriteId The identifier of a favorite.\n     */\n    removeFavoriteSite(personId: string, favoriteId: string): Promise<any> {\n        return this.favoritesApi.deleteSiteFavorite(personId, favoriteId);\n    }\n\n    listSiteMembershipsForPerson(personId: string, opts?: any): Promise<SiteRolePaging> {\n        return this.sitesApi.listSiteMembershipsForPerson(personId, opts);\n    }\n\n    /**\n     * Cancel a site membership\n     * Cancels the site membership request to site **siteId** for person **personId**.\n     * @param {String} personId The identifier of a person.\n     * @param {String} siteId The identifier of a site.\n     */\n    removeSiteMembershipRequest(personId: string, siteId: string): Promise<any> {\n        return this.sitesApi.deleteSiteMembershipRequestForPerson(personId, siteId);\n    }\n\n    /**\n     * Update a site membership request\n     * Updates the message for the site membership request to site **siteId** for person **personId**.\n     * @param {String} personId The identifier of a person.\n     * @param {String} siteId The identifier of a site.\n     * @param {module:model/SiteMembershipBody1} siteMembershipBody The new message to display\n     */\n    updateSiteMembershipRequest(personId: string, siteId: string, siteMembershipBody: SiteMembershipRequestBodyUpdate): Promise<SiteMembershipRequestEntry> {\n        return this.sitesApi.updateSiteMembershipRequestForPerson(personId, siteId, siteMembershipBody);\n    }\n}\n"]}