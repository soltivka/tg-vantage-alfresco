/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { NodesApi as NewNodesApi } from '../../../../api/content-rest-api/api/nodes.api';
import { TrashcanApi } from '../../../../api/content-rest-api';
export class NodesApi {
    init(alfrescoApi) {
        this.nodesApi = new NewNodesApi(alfrescoApi);
        this.trashcanApi = new TrashcanApi(alfrescoApi);
    }
    addNode(nodeId, nodeBody, opts) {
        return this.nodesApi.createNode(nodeId, nodeBody, opts);
    }
    copyNode(nodeId, copyBody, opts) {
        return this.nodesApi.copyNode(nodeId, copyBody, opts);
    }
    deleteNode(nodeId, opts) {
        return this.nodesApi.deleteNode(nodeId, opts);
    }
    getDeletedNode(nodeId, opts) {
        return this.trashcanApi.getDeletedNode(nodeId, opts);
    }
    getDeletedNodes(opts) {
        return this.trashcanApi.listDeletedNodes(opts);
    }
    getFileContent(nodeId, opts) {
        return this.nodesApi.getNodeContent(nodeId, opts);
    }
    getNode(nodeId, opts) {
        return this.nodesApi.getNode(nodeId, opts);
    }
    getNodeContent(nodeId, opts) {
        return this.nodesApi.getNodeContent(nodeId, opts);
    }
    getNodeChildren(nodeId, opts) {
        return this.nodesApi.listNodeChildren(nodeId, opts);
    }
    getParents(nodeId, opts) {
        return this.nodesApi.listParents(nodeId, opts);
    }
    getSecondaryChildren(nodeId, opts) {
        return this.nodesApi.listSecondaryChildren(nodeId, opts);
    }
    getSourceAssociations(nodeId, opts) {
        return this.nodesApi.listSourceAssociations(nodeId, opts);
    }
    getTargetAssociations(nodeId, opts) {
        return this.nodesApi.listTargetAssociations(nodeId, opts);
    }
    lockNode(nodeId, nodeBodyLock, opts) {
        return this.nodesApi.lockNode(nodeId, nodeBodyLock, opts);
    }
    unlockNode(nodeId, opts) {
        return this.nodesApi.unlockNode(nodeId, opts);
    }
    moveNode(nodeId, moveBody, opts) {
        return this.nodesApi.moveNode(nodeId, moveBody, opts);
    }
    purgeDeletedNode(nodeId) {
        return this.trashcanApi.deleteDeletedNode(nodeId);
    }
    restoreNode(nodeId) {
        return this.trashcanApi.restoreDeletedNode(nodeId);
    }
    updateFileContent(nodeId, contentBody, opts) {
        return this.nodesApi.updateNodeContent(nodeId, contentBody, opts);
    }
    updateNodeContent(nodeId, contentBody, opts) {
        return this.nodesApi.updateNodeContent(nodeId, contentBody, opts);
    }
    updateNode(nodeId, nodeBody, opts) {
        return this.nodesApi.updateNode(nodeId, nodeBody, opts);
    }
    getNodeInfo(nodeId, opts) {
        return new Promise((resolve, reject) => {
            this.getNode(nodeId, opts).then((nodeEntry) => {
                resolve(nodeEntry.entry);
            }, (error) => {
                reject(error);
            });
        });
    }
    deleteNodePermanent(nodeId) {
        return this.deleteNode(nodeId, { permanent: true });
    }
    createFolder(name, relativePath, nodeId, opts) {
        nodeId = nodeId || '-root-';
        let nodeBody = {
            'name': name,
            'nodeType': 'cm:folder',
            'relativePath': relativePath
        };
        return this.addNode(nodeId, nodeBody, opts);
    }
    createFolderAutoRename(name, relativePath, nodeId, opts) {
        let optAutoRename = { autoRename: true };
        opts = opts || {};
        opts = Object.assign(opts, optAutoRename);
        return this.createFolder(name, relativePath, nodeId, opts);
    }
}
//# sourceMappingURL=../../../../../../../src/api-legacy/content-rest-api/src/api/nodesApi.js.map