/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { NodesApi } from '../../../../api/content-rest-api/api/nodes.api';
import { SharedlinksApi } from '../../../../api/content-rest-api/api/sharedlinks.api';
import { RenditionsApi } from '../../../../api/content-rest-api/api/renditions.api';
import { SitesApi } from '../../../../api/content-rest-api/api/sites.api';
import { TrashcanApi } from '../../../../api/content-rest-api/api/trashcan.api';
export class ChangesApi {
    init(alfrescoApi) {
        this.nodesApi = new NodesApi(alfrescoApi);
        this.sharedlinksApi = new SharedlinksApi(alfrescoApi);
        this.renditionsApi = new RenditionsApi(alfrescoApi);
        this.sitesApi = new SitesApi(alfrescoApi);
        this.trashcanApi = new TrashcanApi(alfrescoApi);
    }
    addAssoc(sourceId, assocTargetBody) {
        return this.nodesApi.createAssociation(sourceId, assocTargetBody);
    }
    addNode(nodeId, nodeBody, opts) {
        return this.nodesApi.createNode(nodeId, nodeBody, opts);
    }
    addSecondaryChildAssoc(parentId, assocChildBody, opts) {
        return this.nodesApi.createSecondaryChildAssociation(parentId, assocChildBody, opts);
    }
    addSharedLink(sharedLinkBody, opts) {
        return this.sharedlinksApi.createSharedLink(sharedLinkBody, opts);
    }
    copyNode(nodeId, copyBody, opts) {
        return this.nodesApi.copyNode(nodeId, copyBody, opts);
    }
    createRendition(nodeId, renditionBody) {
        return this.renditionsApi.createRendition(nodeId, renditionBody);
    }
    createSite(siteBody, opts) {
        return this.sitesApi.createSite(siteBody, opts);
    }
    updateSite(siteId, siteBody, opts) {
        return this.sitesApi.updateSite(siteId, siteBody, opts);
    }
    deleteNode(nodeId, opts) {
        return this.nodesApi.deleteNode(nodeId, opts);
    }
    deleteSharedLink(sharedId) {
        return this.sharedlinksApi.deleteSharedLink(sharedId);
    }
    deleteSite(siteId, opts) {
        return this.sitesApi.deleteSite(siteId, opts);
    }
    emailSharedLink(sharedId, emailSharedLinkBody) {
        return this.sharedlinksApi.emailSharedLink(sharedId, emailSharedLinkBody);
    }
    findSharedLinks(opts) {
        return this.sharedlinksApi.listSharedLinks(opts);
    }
    getDeletedNode(nodeId, opts) {
        return this.trashcanApi.getDeletedNode(nodeId, opts);
    }
    getDeletedNodes(opts) {
        return this.trashcanApi.listDeletedNodes(opts);
    }
    getFileContent(nodeId, opts) {
        return this.nodesApi.getNodeContent(nodeId, opts);
    }
    getNode(nodeId, opts) {
        return this.nodesApi.getNode(nodeId, opts);
    }
    getNodeChildren(nodeId, opts) {
        return this.nodesApi.listNodeChildren(nodeId, opts);
    }
    getRendition(nodeId, renditionId) {
        return this.renditionsApi.getRendition(nodeId, renditionId);
    }
    getRenditionContent(nodeId, renditionId, opts) {
        return this.renditionsApi.getRenditionContent(nodeId, renditionId, opts);
    }
    getRenditions(nodeId) {
        return this.renditionsApi.listRenditions(nodeId);
    }
    getSharedLink(sharedId, opts) {
        return this.sharedlinksApi.getSharedLink(sharedId, opts);
    }
    getSharedLinkContent(sharedId, opts) {
        return this.sharedlinksApi.getSharedLinkContent(sharedId, opts);
    }
    getSharedLinkRenditionContent(sharedId, renditionId, opts) {
        return this.sharedlinksApi.getSharedLinkRenditionContent(sharedId, renditionId, opts);
    }
    getSharedLinkRenditions(sharedId) {
        return this.sharedlinksApi.listSharedLinkRenditions(sharedId);
    }
    listParents(childId, opts) {
        return this.nodesApi.listParents(childId, opts);
    }
    listSecondaryChildAssociations(parentId, opts) {
        return this.nodesApi.listSecondaryChildren(parentId, opts);
    }
    listSourceNodeAssociations(targetId, opts) {
        return this.nodesApi.listSourceAssociations(targetId, opts);
    }
    listTargetAssociations(sourceId, opts) {
        return this.nodesApi.listTargetAssociations(sourceId, opts);
    }
    moveNode(nodeId, moveBody, opts) {
        return this.nodesApi.moveNode(nodeId, moveBody, opts);
    }
    purgeDeletedNode(nodeId) {
        return this.trashcanApi.deleteDeletedNode(nodeId);
    }
    removeAssoc(sourceId, targetId, opts) {
        return this.nodesApi.deleteAssociation(sourceId, targetId, opts);
    }
    removeSecondaryChildAssoc(parentId, childId, opts) {
        return this.nodesApi.deleteSecondaryChildAssociation(parentId, childId, opts);
    }
    restoreNode(nodeId) {
        return this.trashcanApi.restoreDeletedNode(nodeId);
    }
    updateFileContent(nodeId, contentBody, opts) {
        return this.nodesApi.updateNodeContent(nodeId, contentBody, opts);
    }
    updateNode(nodeId, nodeBody, opts) {
        return this.nodesApi.updateNode(nodeId, nodeBody, opts);
    }
}
//# sourceMappingURL=../../../../../../../src/api-legacy/content-rest-api/src/api/changesApi.js.map