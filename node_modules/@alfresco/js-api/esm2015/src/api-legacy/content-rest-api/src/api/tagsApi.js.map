{"version":3,"file":"tagsApi.js","sourceRoot":"","sources":["tagsApi.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;AAGF,OAAO,EAAE,OAAO,IAAI,UAAU,EAAE,MAAM,+CAA+C,CAAC;AAQtF,MAAM,OAAO,OAAO;IAIT,IAAI,CAAC,WAAyB;QACjC,IAAI,CAAC,OAAO,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;IAC/C,CAAC;IASD,MAAM,CAAC,MAAc,EAAE,OAAkB;QACrC,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC1D,CAAC;IAYD,WAAW,CAAC,MAAc,EAAE,IAAU;QAClC,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACtD,CAAC;IAUD,MAAM,CAAC,KAAa,EAAE,IAAU;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IAWD,OAAO,CAAC,IAAU;QACd,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAQD,SAAS,CAAC,MAAc,EAAE,KAAa;QACnC,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC;IASD,SAAS,CAAC,KAAa,EAAE,OAAgB;QACrC,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;CACJ","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { AlfrescoApi } from '../../../../alfrescoApi';\nimport { TagsApi as NewTagsApi } from '../../../../api/content-rest-api/api/tags.api';\nimport { TagEntry } from '../../../../api/content-rest-api/model/tagEntry';\nimport { TagPaging } from '../../../../api/content-rest-api/model/tagPaging';\nimport { TagBody } from '../../../../api/content-rest-api/model/tagBody';\n\n/**\n * @deprecated 3.0.0\n */\nexport class TagsApi  {\n\n    private tagsApi: NewTagsApi;\n\n    public init(alfrescoApi?: AlfrescoApi) {\n        this.tagsApi = new NewTagsApi(alfrescoApi);\n    }\n\n    /**\n     * Add a tag\n     * Adds one or more tags to the node **nodeId**. You can create more than one tag by\\nspecifying a list of tags in the JSON body like this:\\n\\n&#x60;&#x60;&#x60;JSON\\n[\\n  {\\n    \\&quot;tag\\&quot;:\\&quot;test-tag-1\\&quot;\\n  },\\n  {\\n    \\&quot;tag\\&quot;:\\&quot;test-tag-2\\&quot;\\n  }\\n]\\n&#x60;&#x60;&#x60;\\n\n     * @param {String} nodeId The identifier of a node.\n     * @param {module:model/TagBody} tagBody The new tag\n     * data is of type: {module:model/TagEntry}\n     */\n    addTag(nodeId: string, tagBody: TagBody[]): Promise<TagEntry> {\n        return this.tagsApi.createTagForNode(nodeId, tagBody);\n    }\n\n    /**\n     * Get tags\n     * Returns a list of tags for node **nodeId**.\n     * @param {String} nodeId The identifier of a node.\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/TagPaging}\n     */\n    getNodeTags(nodeId: string, opts?: any): Promise<TagPaging> {\n        return this.tagsApi.listTagsForNode(nodeId, opts);\n    }\n\n    /**\n     * Get a tag\n     * Return a specific tag with **tagId**.\n     * @param {String} tagId The identifier of a tag.\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/TagEntry}\n     */\n    getTag(tagId: string, opts?: any): Promise<TagEntry> {\n        return this.tagsApi.getTag(tagId, opts);\n    }\n\n    /**\n     * Get tags\n     * Returns a list of tags in this repository.\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/TagPaging}\n     */\n    getTags(opts?: any): Promise<TagPaging> {\n        return this.tagsApi.listTags(opts);\n    }\n\n    /**\n     * Delete a tag\n     * Removes tag **tagId** from node **nodeId**.\n     * @param {String} nodeId The identifier of a node.\n     * @param {String} tagId The identifier of a tag.\n     */\n    removeTag(nodeId: string, tagId: string): Promise<any> {\n        return this.tagsApi.deleteTagFromNode(nodeId, tagId);\n    }\n\n    /**\n     * Update a tag\n     * Updates the tag **tagId**.\n     * @param {String} tagId The identifier of a tag.\n     * @param {module:model/TagBody1} tagBody The updated tag\n     * data is of type: {module:model/TagEntry}\n     */\n    updateTag(tagId: string, tagBody: TagBody): Promise<TagEntry> {\n        return this.tagsApi.updateTag(tagId, tagBody);\n    }\n}\n"]}