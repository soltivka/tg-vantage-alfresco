/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { PeopleApi as PeopleApiNew } from '../../../../api/content-rest-api/api/people.api';
import { NetworksApi } from '../../../../api/content-rest-api/api/networks.api';
import { FavoritesApi } from '../../../../api/content-rest-api/api/favorites.api';
import { SitesApi } from '../../../../api/content-rest-api/api/sites.api';
import { PreferencesApi } from '../../../../api/content-rest-api/api/preferences.api';
import { ActivitiesApi } from '../../../../api/content-rest-api/api/activities.api';
import { GroupsApi } from '../../../../api/content-rest-api/api/groups.api';
export class PeopleApi {
    init(alfrescoApi) {
        this.networksApi = new NetworksApi(alfrescoApi);
        this.peopleApiNew = new PeopleApiNew(alfrescoApi);
        this.favoritesApi = new FavoritesApi(alfrescoApi);
        this.sitesApi = new SitesApi(alfrescoApi);
        this.activitiesApi = new ActivitiesApi(alfrescoApi);
        this.preferencesApi = new PreferencesApi(alfrescoApi);
        this.groupsApi = new GroupsApi(alfrescoApi);
    }
    addFavorite(personId, favoriteBody) {
        return this.favoritesApi.createFavorite(personId, favoriteBody);
    }
    addSiteMembershipRequest(personId, siteMembershipBody) {
        return this.sitesApi.createSiteMembershipRequestForPerson(personId, siteMembershipBody);
    }
    deleteFavoriteSite(personId, siteId) {
        return this.favoritesApi.deleteSiteFavorite(personId, siteId);
    }
    favoriteSite(personId, favoriteSiteBody) {
        return this.favoritesApi.createSiteFavorite(personId, favoriteSiteBody);
    }
    getActivities(personId, opts) {
        return this.activitiesApi.listActivitiesForPerson(personId, opts);
    }
    getFavorite(personId, favoriteId, opts) {
        return this.favoritesApi.getFavorite(personId, favoriteId, opts);
    }
    getFavoriteSite(personId, siteId, opts) {
        return this.favoritesApi.getFavoriteSite(personId, siteId, opts);
    }
    getFavoriteSites(personId, opts) {
        return this.favoritesApi.listFavoriteSitesForPerson(personId, opts);
    }
    getFavorites(personId, opts) {
        return this.favoritesApi.listFavorites(personId, opts);
    }
    getPerson(personId, opts) {
        return this.peopleApiNew.getPerson(personId, opts);
    }
    getPersons(opts) {
        return this.peopleApiNew.listPeople(opts);
    }
    addPerson(person) {
        return this.peopleApiNew.createPerson(person);
    }
    updatePerson(personId, personBodyUpdate, opts) {
        return this.peopleApiNew.updatePerson(personId, personBodyUpdate, opts);
    }
    getPersonNetwork(personId, networkId, opts) {
        return this.networksApi.getNetworkForPerson(personId, networkId, opts);
    }
    getPersonNetworks(personId, opts) {
        return this.networksApi.listNetworksForPerson(personId, opts);
    }
    getPreference(personId, preferenceName, opts) {
        return this.preferencesApi.getPreference(personId, preferenceName, opts);
    }
    getPreferences(personId, opts) {
        return this.preferencesApi.listPreferences(personId, opts);
    }
    getSiteMembership(personId, opts) {
        return this.sitesApi.listSiteMembershipsForPerson(personId, opts);
    }
    getGroupsMembership(personId, opts) {
        return this.groupsApi.listGroupMembershipsForPerson(personId, opts);
    }
    getSiteMembershipRequest(personId, siteId, opts) {
        return this.sitesApi.getSiteMembershipRequestForPerson(personId, siteId, opts);
    }
    getSiteMembershipRequests(personId, opts) {
        return this.sitesApi.listSiteMembershipRequestsForPerson(personId, opts);
    }
    removeFavoriteSite(personId, favoriteId) {
        return this.favoritesApi.deleteSiteFavorite(personId, favoriteId);
    }
    listSiteMembershipsForPerson(personId, opts) {
        return this.sitesApi.listSiteMembershipsForPerson(personId, opts);
    }
    removeSiteMembershipRequest(personId, siteId) {
        return this.sitesApi.deleteSiteMembershipRequestForPerson(personId, siteId);
    }
    updateSiteMembershipRequest(personId, siteId, siteMembershipBody) {
        return this.sitesApi.updateSiteMembershipRequestForPerson(personId, siteId, siteMembershipBody);
    }
}
//# sourceMappingURL=../../../../../../../src/api-legacy/content-rest-api/src/api/peopleApi.js.map