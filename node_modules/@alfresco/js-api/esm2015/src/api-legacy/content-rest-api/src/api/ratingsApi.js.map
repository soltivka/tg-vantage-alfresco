{"version":3,"file":"ratingsApi.js","sourceRoot":"","sources":["ratingsApi.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;AAGF,OAAO,EAAE,UAAU,IAAI,aAAa,EAAE,MAAM,kDAAkD,CAAC;AAQ/F,MAAM,OAAO,UAAU;IAIZ,IAAI,CAAC,WAAyB;QACjC,IAAI,CAAC,UAAU,GAAG,IAAI,aAAa,CAAC,WAAW,CAAC,CAAC;IACrD,CAAC;IAWD,SAAS,CAAC,MAAc,EAAE,QAAgB,EAAE,IAAU;QACnD,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC5D,CAAC;IAYD,UAAU,CAAC,MAAc,EAAE,IAAU;QACjC,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACrD,CAAC;IASD,IAAI,CAAC,MAAc,EAAE,UAAsB;QACvC,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IAC5D,CAAC;IAQD,YAAY,CAAC,MAAc,EAAE,QAAgB;QACzC,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC1D,CAAC;CACJ","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { AlfrescoApi } from '../../../../alfrescoApi';\nimport { RatingsApi as NewRatingsApi } from '../../../../api/content-rest-api/api/ratings.api';\nimport { RatingEntry } from '../../../../api/content-rest-api/model/ratingEntry';\nimport { RatingPaging } from '../../../../api/content-rest-api/model/ratingPaging';\nimport { RatingBody } from '../../../../api/content-rest-api/model/ratingBody';\n\n/**\n * @deprecated 3.0.0\n */\nexport class RatingsApi  {\n\n    private ratingsApi: NewRatingsApi;\n\n    public init(alfrescoApi?: AlfrescoApi) {\n        this.ratingsApi = new NewRatingsApi(alfrescoApi);\n    }\n\n    /**\n     * Get a rating\n     * Get the specific rating **ratingId** on node **nodeId**.\n     * @param {String} nodeId The identifier of a node.\n     * @param {String} ratingId The identifier of a rating.\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/RatingEntry}\n     */\n    getRating(nodeId: string, ratingId: string, opts?: any): Promise<RatingEntry> {\n       return this.ratingsApi.getRating(nodeId, ratingId, opts);\n    }\n\n    /**\n     * Get ratings\n     * Get the ratings for node **nodeId**.\n     * @param {String} nodeId The identifier of a node.\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/RatingPaging}\n     */\n    getRatings(nodeId: string, opts?: any): Promise<RatingPaging> {\n        return this.ratingsApi.listRatings(nodeId, opts);\n    }\n\n    /**\n     * Rate\n     * Rate the node with identifier **nodeId**\n     * @param {String} nodeId The identifier of a node.\n     * @param {module:model/RatingBody} ratingBody For \\&quot;myRating\\&quot; the type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar.\\n\\nFor example, to \\&quot;like\\&quot; a file the following body would be used:\\n\\n  &#x60;&#x60;&#x60;JSON\\n    {\\n      \\&quot;id\\&quot;: \\&quot;likes\\&quot;,\\n      \\&quot;myRating\\&quot;: true\\n    }\\n  &#x60;&#x60;&#x60;\\n\n     * data is of type: {module:model/RatingEntry}\n     */\n    rate(nodeId: string, ratingBody: RatingBody): Promise<RatingEntry> {\n        return this.ratingsApi.createRating(nodeId, ratingBody);\n    }\n\n    /**\n     * Delete a rating\n     * Removes rating **ratingId** from node **nodeId**.\n     * @param {String} nodeId The identifier of a node.\n     * @param {String} ratingId The identifier of a rating.\n     */\n    removeRating(nodeId: string, ratingId: string): Promise<any> {\n        return this.ratingsApi.deleteRating(nodeId, ratingId);\n    }\n}\n"]}