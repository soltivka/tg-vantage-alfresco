{"version":3,"file":"integrationAlfrescoCloud.api.js","sourceRoot":"","sources":["integrationAlfrescoCloud.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ResultListDataRepresentationAlfrescoContentRepresentation } from '../model/resultListDataRepresentationAlfrescoContentRepresentation';\nimport { ResultListDataRepresentationAlfrescoNetworkRepresenation } from '../model/resultListDataRepresentationAlfrescoNetworkRepresenation';\nimport { ResultListDataRepresentationAlfrescoSiteRepresenation } from '../model/resultListDataRepresentationAlfrescoSiteRepresenation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Integrationalfrescocloud service.\n* @module IntegrationalfrescocloudApi\n*/\nexport class IntegrationAlfrescoCloudApi extends BaseApi {\n    /**\n    * Alfresco Cloud Authorization\n    *\n    * Returns Alfresco OAuth HTML Page\n    *\n    * @param code code\n    * @return Promise<{}>\n    */\n    confirmAuthorisation(code: string): Promise<any> {\n        throwIfNotDefined(code, 'code');\n\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'code': code\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['text/html'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/alfresco-cloud/confirm-auth-request', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * List Alfresco networks\n        *\n        *\n        *\n        * @return Promise<ResultListDataRepresentationAlfrescoNetworkRepresenation>\n        */\n    getAllNetworks(): Promise<ResultListDataRepresentationAlfrescoNetworkRepresenation> {\n\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/alfresco-cloud/networks', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationAlfrescoNetworkRepresenation);\n    }\n    /**\n        * List Alfresco sites\n        *\n        * Returns ALL Sites\n        *\n        * @param networkId networkId\n        * @return Promise<ResultListDataRepresentationAlfrescoSiteRepresenation>\n        */\n    getAllSites(networkId: string): Promise<ResultListDataRepresentationAlfrescoSiteRepresenation> {\n        throwIfNotDefined(networkId, 'networkId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'networkId': networkId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/alfresco-cloud/networks/{networkId}/sites', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationAlfrescoSiteRepresenation);\n    }\n    /**\n        * List files and folders inside a specific folder identified by path\n        *\n        *\n        *\n        * @param networkId networkId\n        * @param opts Optional parameters\n        * @param opts.siteId siteId\n        * @param opts.path path\n        * @return Promise<ResultListDataRepresentationAlfrescoContentRepresentation>\n        */\n    getContentInFolderPath(networkId: string, opts?: any): Promise<ResultListDataRepresentationAlfrescoContentRepresentation> {\n        throwIfNotDefined(networkId, 'networkId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'networkId': networkId\n        };\n\n        let queryParams = {\n            'siteId': opts['siteId'],\n            'path': opts['path']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/alfresco-cloud/networks/{networkId}/sites/{siteId}/folderpath/{folderPath}/content', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);\n    }\n    /**\n        * List files and folders inside a specific folder\n        *\n        *\n        *\n        * @param networkId networkId\n        * @param folderId folderId\n        * @return Promise<ResultListDataRepresentationAlfrescoContentRepresentation>\n        */\n    getContentInFolder(networkId: string, folderId: string): Promise<ResultListDataRepresentationAlfrescoContentRepresentation> {\n        throwIfNotDefined(networkId, 'networkId');\n        throwIfNotDefined(folderId, 'folderId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'networkId': networkId, 'folderId': folderId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/alfresco-cloud/networks/{networkId}/folders/{folderId}/content', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);\n    }\n    /**\n        * List files and folders inside a specific site\n        *\n        *\n        *\n        * @param networkId networkId\n        * @param siteId siteId\n        * @return Promise<ResultListDataRepresentationAlfrescoContentRepresentation>\n        */\n    getContentInSite(networkId: string, siteId: string): Promise<ResultListDataRepresentationAlfrescoContentRepresentation> {\n        throwIfNotDefined(networkId, 'networkId');\n        throwIfNotDefined(siteId, 'siteId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'networkId': networkId, 'siteId': siteId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/integration/alfresco-cloud/networks/{networkId}/sites/{siteId}/content', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);\n    }\n\n}\n"]}