"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.TasksApi = void 0;
const identityLinkRepresentation_1 = require("../model/identityLinkRepresentation");
const resultListDataRepresentationTaskRepresentation_1 = require("../model/resultListDataRepresentationTaskRepresentation");
const taskAuditInfoRepresentation_1 = require("../model/taskAuditInfoRepresentation");
const taskRepresentation_1 = require("../model/taskRepresentation");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
class TasksApi extends base_api_1.BaseApi {
    createIdentityLink(taskId, identityLinkRepresentation) {
        (0, assert_1.throwIfNotDefined)(taskId, 'taskId');
        (0, assert_1.throwIfNotDefined)(identityLinkRepresentation, 'identityLinkRepresentation');
        let postBody = identityLinkRepresentation;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, identityLinkRepresentation_1.IdentityLinkRepresentation);
    }
    createNewTask(taskRepresentation) {
        (0, assert_1.throwIfNotDefined)(taskRepresentation, 'taskRepresentation');
        let postBody = taskRepresentation;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, taskRepresentation_1.TaskRepresentation);
    }
    deleteIdentityLink(taskId, family, identityId, type) {
        (0, assert_1.throwIfNotDefined)(taskId, 'taskId');
        (0, assert_1.throwIfNotDefined)(family, 'family');
        (0, assert_1.throwIfNotDefined)(identityId, 'identityId');
        (0, assert_1.throwIfNotDefined)(type, 'type');
        let postBody = null;
        let pathParams = {
            'taskId': taskId, 'family': family, 'identityId': identityId, 'type': type
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteTask(taskId) {
        (0, assert_1.throwIfNotDefined)(taskId, 'taskId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    filterTasks(tasksFilter) {
        (0, assert_1.throwIfNotDefined)(tasksFilter, 'tasksFilter');
        let postBody = tasksFilter;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/filter', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationTaskRepresentation_1.ResultListDataRepresentationTaskRepresentation);
    }
    getIdentityLinkType(taskId, family, identityId, type) {
        (0, assert_1.throwIfNotDefined)(taskId, 'taskId');
        (0, assert_1.throwIfNotDefined)(family, 'family');
        (0, assert_1.throwIfNotDefined)(identityId, 'identityId');
        (0, assert_1.throwIfNotDefined)(type, 'type');
        let postBody = null;
        let pathParams = {
            'taskId': taskId, 'family': family, 'identityId': identityId, 'type': type
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, identityLinkRepresentation_1.IdentityLinkRepresentation);
    }
    getIdentityLinksForFamily(taskId, family) {
        (0, assert_1.throwIfNotDefined)(taskId, 'taskId');
        (0, assert_1.throwIfNotDefined)(family, 'family');
        let postBody = null;
        let pathParams = {
            'taskId': taskId, 'family': family
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks/{family}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, identityLinkRepresentation_1.IdentityLinkRepresentation);
    }
    getIdentityLinks(taskId) {
        (0, assert_1.throwIfNotDefined)(taskId, 'taskId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, identityLinkRepresentation_1.IdentityLinkRepresentation);
    }
    getTaskAuditLog(taskId) {
        (0, assert_1.throwIfNotDefined)(taskId, 'taskId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/audit', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, taskAuditInfoRepresentation_1.TaskAuditInfoRepresentation);
    }
    getTaskAuditPdf(taskId) {
        (0, assert_1.throwIfNotDefined)(taskId, 'taskId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let responseType = 'blob';
        return this.apiClient.callApi('app/rest/tasks/{taskId}/audit', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, responseType);
    }
    getTask(taskId) {
        (0, assert_1.throwIfNotDefined)(taskId, 'taskId');
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, taskRepresentation_1.TaskRepresentation);
    }
    listHistoricTasks(queryRequest) {
        (0, assert_1.throwIfNotDefined)(queryRequest, 'queryRequest');
        let postBody = queryRequest;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/historic-tasks/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationTaskRepresentation_1.ResultListDataRepresentationTaskRepresentation);
    }
    listTasks(tasksQuery) {
        (0, assert_1.throwIfNotDefined)(tasksQuery, 'tasksQuery');
        let postBody = tasksQuery;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationTaskRepresentation_1.ResultListDataRepresentationTaskRepresentation);
    }
    updateTask(taskId, updated) {
        (0, assert_1.throwIfNotDefined)(taskId, 'taskId');
        (0, assert_1.throwIfNotDefined)(updated, 'updated');
        let postBody = updated;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, taskRepresentation_1.TaskRepresentation);
    }
}
exports.TasksApi = TasksApi;
//# sourceMappingURL=../../../../../src/api/activiti-rest-api/api/tasks.api.js.map