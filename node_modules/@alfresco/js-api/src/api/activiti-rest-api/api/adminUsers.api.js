"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminUsersApi = void 0;
const abstractUserRepresentation_1 = require("../model/abstractUserRepresentation");
const resultListDataRepresentationAbstractUserRepresentation_1 = require("../model/resultListDataRepresentationAbstractUserRepresentation");
const userRepresentation_1 = require("../model/userRepresentation");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
class AdminUsersApi extends base_api_1.BaseApi {
    bulkUpdateUsers(update) {
        (0, assert_1.throwIfNotDefined)(update, 'update');
        let postBody = update;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/users', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    createNewUser(userRepresentation) {
        (0, assert_1.throwIfNotDefined)(userRepresentation, 'userRepresentation');
        let postBody = userRepresentation;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/users', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, userRepresentation_1.UserRepresentation);
    }
    getUser(userId, opts) {
        (0, assert_1.throwIfNotDefined)(userId, 'userId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'userId': userId
        };
        let queryParams = {
            'summary': opts['summary']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/users/{userId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, abstractUserRepresentation_1.AbstractUserRepresentation);
    }
    getUsers(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'filter': opts['filter'],
            'status': opts['status'],
            'accountType': opts['accountType'],
            'sort': opts['sort'],
            'company': opts['company'],
            'start': opts['start'],
            'page': opts['page'],
            'size': opts['size'],
            'groupId': opts['groupId'],
            'tenantId': opts['tenantId'],
            'summary': opts['summary']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/users', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationAbstractUserRepresentation_1.ResultListDataRepresentationAbstractUserRepresentation);
    }
    updateUserDetails(userId, userRepresentation) {
        (0, assert_1.throwIfNotDefined)(userId, 'userId');
        (0, assert_1.throwIfNotDefined)(userRepresentation, 'userRepresentation');
        let postBody = userRepresentation;
        let pathParams = {
            'userId': userId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/users/{userId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
}
exports.AdminUsersApi = AdminUsersApi;
//# sourceMappingURL=../../../../../src/api/activiti-rest-api/api/adminUsers.api.js.map