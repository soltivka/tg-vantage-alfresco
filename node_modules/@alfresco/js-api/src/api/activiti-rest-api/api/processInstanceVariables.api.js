"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessInstanceVariablesApi = void 0;
const restVariable_1 = require("../model/restVariable");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
class ProcessInstanceVariablesApi extends base_api_1.BaseApi {
    createOrUpdateProcessInstanceVariables(processInstanceId, restVariables) {
        (0, assert_1.throwIfNotDefined)(processInstanceId, 'processInstanceId');
        (0, assert_1.throwIfNotDefined)(restVariables, 'restVariables');
        let postBody = restVariables;
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    createProcessInstanceVariables(processInstanceId, restVariables) {
        (0, assert_1.throwIfNotDefined)(processInstanceId, 'processInstanceId');
        (0, assert_1.throwIfNotDefined)(restVariables, 'restVariables');
        let postBody = restVariables;
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteProcessInstanceVariable(processInstanceId, variableName) {
        (0, assert_1.throwIfNotDefined)(processInstanceId, 'processInstanceId');
        (0, assert_1.throwIfNotDefined)(variableName, 'variableName');
        let postBody = null;
        let pathParams = {
            'processInstanceId': processInstanceId, 'variableName': variableName
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables/{variableName}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getProcessInstanceVariable(processInstanceId, variableName) {
        (0, assert_1.throwIfNotDefined)(processInstanceId, 'processInstanceId');
        (0, assert_1.throwIfNotDefined)(variableName, 'variableName');
        let postBody = null;
        let pathParams = {
            'processInstanceId': processInstanceId, 'variableName': variableName
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables/{variableName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, restVariable_1.RestVariable);
    }
    getProcessInstanceVariables(processInstanceId) {
        (0, assert_1.throwIfNotDefined)(processInstanceId, 'processInstanceId');
        let postBody = null;
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    updateProcessInstanceVariable(processInstanceId, variableName, restVariable) {
        (0, assert_1.throwIfNotDefined)(processInstanceId, 'processInstanceId');
        (0, assert_1.throwIfNotDefined)(variableName, 'variableName');
        (0, assert_1.throwIfNotDefined)(restVariable, 'restVariable');
        let postBody = restVariable;
        let pathParams = {
            'processInstanceId': processInstanceId, 'variableName': variableName
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables/{variableName}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, restVariable_1.RestVariable);
    }
}
exports.ProcessInstanceVariablesApi = ProcessInstanceVariablesApi;
//# sourceMappingURL=../../../../../src/api/activiti-rest-api/api/processInstanceVariables.api.js.map