"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivitiCommentsApi = void 0;
const commentRepresentation_1 = require("../model/commentRepresentation");
const resultListDataRepresentationCommentRepresentation_1 = require("../model/resultListDataRepresentationCommentRepresentation");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
class ActivitiCommentsApi extends base_api_1.BaseApi {
    addProcessInstanceComment(commentRequest, processInstanceId) {
        (0, assert_1.throwIfNotDefined)(commentRequest, 'commentRequest');
        (0, assert_1.throwIfNotDefined)(processInstanceId, 'processInstanceId');
        let postBody = commentRequest;
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/comments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, commentRepresentation_1.CommentRepresentation);
    }
    addTaskComment(commentRequest, taskId) {
        (0, assert_1.throwIfNotDefined)(commentRequest, 'commentRequest');
        (0, assert_1.throwIfNotDefined)(taskId, 'taskId');
        let postBody = commentRequest;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/comments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, commentRepresentation_1.CommentRepresentation);
    }
    getProcessInstanceComments(processInstanceId, opts) {
        (0, assert_1.throwIfNotDefined)(processInstanceId, 'processInstanceId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {
            'latestFirst': opts['latestFirst']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/comments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationCommentRepresentation_1.ResultListDataRepresentationCommentRepresentation);
    }
    getTaskComments(taskId, opts) {
        (0, assert_1.throwIfNotDefined)(taskId, 'taskId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {
            'latestFirst': opts['latestFirst']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/comments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationCommentRepresentation_1.ResultListDataRepresentationCommentRepresentation);
    }
}
exports.ActivitiCommentsApi = ActivitiCommentsApi;
//# sourceMappingURL=../../../../../src/api/activiti-rest-api/api/comments.api.js.map