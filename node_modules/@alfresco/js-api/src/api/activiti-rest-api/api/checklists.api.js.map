{"version":3,"file":"checklists.api.js","sourceRoot":"","sources":["checklists.api.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;;AAGF,4HAAyH;AACzH,oEAAiE;AACjE,yCAAqC;AACrC,4CAAoD;AAMpD,MAAa,aAAc,SAAQ,kBAAO;IAUtC,UAAU,CAAC,MAAc,EAAE,kBAAsC;QAC7D,IAAA,0BAAiB,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACpC,IAAA,0BAAiB,EAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;QAE5D,IAAI,QAAQ,GAAG,kBAAkB,CAAC;QAElC,IAAI,UAAU,GAAG;YACb,QAAQ,EAAE,MAAM;SACnB,CAAC;QAEF,IAAI,WAAW,GAAG,EACjB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,0CAA0C,EAAE,MAAM,EAClD,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,uCAAkB,CAAC,CAAC;IACnD,CAAC;IASD,YAAY,CAAC,MAAc;QACvB,IAAA,0BAAiB,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEpC,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,QAAQ,EAAE,MAAM;SACnB,CAAC;QAEF,IAAI,WAAW,GAAG,EACjB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,0CAA0C,EAAE,KAAK,EACjD,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,+FAA8C,CAAC,CAAC;IAC/E,CAAC;IAUD,cAAc,CAAC,MAAc,EAAE,mBAAiD;QAC5E,IAAA,0BAAiB,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACpC,IAAA,0BAAiB,EAAC,mBAAmB,EAAE,qBAAqB,CAAC,CAAC;QAE9D,IAAI,QAAQ,GAAG,mBAAmB,CAAC;QAEnC,IAAI,UAAU,GAAG;YACb,QAAQ,EAAE,MAAM;SACnB,CAAC;QAEF,IAAI,WAAW,GAAG,EACjB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,0CAA0C,EAAE,KAAK,EACjD,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC;CAEJ;AA5GD,sCA4GC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ChecklistOrderRepresentation } from '../model/checklistOrderRepresentation';\nimport { ResultListDataRepresentationTaskRepresentation } from '../model/resultListDataRepresentationTaskRepresentation';\nimport { TaskRepresentation } from '../model/taskRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Checklists service.\n* @module ChecklistsApi\n*/\nexport class ChecklistsApi extends BaseApi {\n    /**\n    * Create a task checklist\n    *\n    *\n    *\n    * @param taskId taskId\n    * @param taskRepresentation taskRepresentation\n    * @return Promise<TaskRepresentation>\n    */\n    addSubtask(taskId: string, taskRepresentation: TaskRepresentation): Promise<TaskRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(taskRepresentation, 'taskRepresentation');\n\n        let postBody = taskRepresentation;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/checklist', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TaskRepresentation);\n    }\n    /**\n        * Get checklist for a task\n        *\n        *\n        *\n        * @param taskId taskId\n        * @return Promise<ResultListDataRepresentationTaskRepresentation>\n        */\n    getChecklist(taskId: string): Promise<ResultListDataRepresentationTaskRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/checklist', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);\n    }\n    /**\n        * Change the order of items on a checklist\n        *\n        *\n        *\n        * @param taskId taskId\n        * @param orderRepresentation orderRepresentation\n        * @return Promise<{}>\n        */\n    orderChecklist(taskId: string, orderRepresentation: ChecklistOrderRepresentation): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(orderRepresentation, 'orderRepresentation');\n\n        let postBody = orderRepresentation;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/tasks/{taskId}/checklist', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n\n}\n"]}