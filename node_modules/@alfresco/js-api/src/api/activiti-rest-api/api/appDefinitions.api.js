"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppDefinitionsApi = void 0;
const appDefinitionRepresentation_1 = require("../model/appDefinitionRepresentation");
const appDefinitionUpdateResultRepresentation_1 = require("../model/appDefinitionUpdateResultRepresentation");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
class AppDefinitionsApi extends base_api_1.BaseApi {
    deleteAppDefinition(appDefinitionId) {
        (0, assert_1.throwIfNotDefined)(appDefinitionId, 'appDefinitionId');
        let postBody = null;
        let pathParams = {
            'appDefinitionId': appDefinitionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/app-definitions/{appDefinitionId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    exportAppDefinition(modelId) {
        (0, assert_1.throwIfNotDefined)(modelId, 'modelId');
        let postBody = null;
        let pathParams = {
            'modelId': modelId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json', 'application/zip'];
        return this.apiClient.callApi('/api/enterprise/app-definitions/{modelId}/export', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getAppDefinition(modelId) {
        (0, assert_1.throwIfNotDefined)(modelId, 'modelId');
        let postBody = null;
        let pathParams = {
            'modelId': modelId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/app-definitions/{modelId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, appDefinitionRepresentation_1.AppDefinitionRepresentation);
    }
    importAndPublishApp(file, opts) {
        (0, assert_1.throwIfNotDefined)(file, 'file');
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'renewIdmEntries': opts['renewIdmEntries']
        };
        let headerParams = {};
        let formParams = {
            'file': file
        };
        let contentTypes = ['multipart/form-data'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/app-definitions/publish-app', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, appDefinitionUpdateResultRepresentation_1.AppDefinitionUpdateResultRepresentation);
    }
    importAppDefinition(file, opts) {
        (0, assert_1.throwIfNotDefined)(file, 'file');
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'renewIdmEntries': opts['renewIdmEntries']
        };
        let headerParams = {};
        let formParams = {
            'file': file
        };
        let contentTypes = ['multipart/form-data'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/app-definitions/import', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, appDefinitionRepresentation_1.AppDefinitionRepresentation);
    }
    publishAppDefinition(modelId, publishModel) {
        (0, assert_1.throwIfNotDefined)(modelId, 'modelId');
        (0, assert_1.throwIfNotDefined)(publishModel, 'publishModel');
        let postBody = publishModel;
        let pathParams = {
            'modelId': modelId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/app-definitions/{modelId}/publish', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, appDefinitionUpdateResultRepresentation_1.AppDefinitionUpdateResultRepresentation);
    }
    updateAppDefinition(modelId, updatedModel) {
        (0, assert_1.throwIfNotDefined)(modelId, 'modelId');
        (0, assert_1.throwIfNotDefined)(updatedModel, 'updatedModel');
        let postBody = updatedModel;
        let pathParams = {
            'modelId': modelId
        };
        let queryParams = {};
        let headerParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        if (!updatedModel['appDefinition']) {
            contentTypes = ['multipart/form-data'];
            let formParams = {
                'file': updatedModel
            };
            return this.apiClient.callApi('/api/enterprise/app-definitions/{modelId}/import', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        }
        else {
            let formParams = {};
            return this.apiClient.callApi('/api/enterprise/app-definitions/{modelId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        }
    }
}
exports.AppDefinitionsApi = AppDefinitionsApi;
//# sourceMappingURL=../../../../../src/api/activiti-rest-api/api/appDefinitions.api.js.map