"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationAlfrescoOnPremiseApi = void 0;
const resultListDataRepresentationAlfrescoContentRepresentation_1 = require("../model/resultListDataRepresentationAlfrescoContentRepresentation");
const resultListDataRepresentationAlfrescoEndpointRepresentation_1 = require("../model/resultListDataRepresentationAlfrescoEndpointRepresentation");
const resultListDataRepresentationAlfrescoSiteRepresenation_1 = require("../model/resultListDataRepresentationAlfrescoSiteRepresenation");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
class IntegrationAlfrescoOnPremiseApi extends base_api_1.BaseApi {
    getAllSites(repositoryId) {
        (0, assert_1.throwIfNotDefined)(repositoryId, 'networkId');
        let postBody = null;
        let pathParams = {
            'repositoryId': repositoryId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/integration/alfresco/{repositoryId}/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationAlfrescoSiteRepresenation_1.ResultListDataRepresentationAlfrescoSiteRepresenation);
    }
    getContentInFolderPath(repositoryId, siteId, folderPath) {
        (0, assert_1.throwIfNotDefined)(repositoryId, 'networkId');
        (0, assert_1.throwIfNotDefined)(siteId, 'siteId');
        (0, assert_1.throwIfNotDefined)(folderPath, 'folderPath');
        let postBody = null;
        let pathParams = {
            'repositoryId': repositoryId, 'siteId': siteId, 'folderPath': folderPath
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/rest/integration/alfresco/{repositoryId}/sites/{siteId}/folderpath/{folderPath}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationAlfrescoContentRepresentation_1.ResultListDataRepresentationAlfrescoContentRepresentation);
    }
    getContentInFolder(repositoryId, folderId) {
        (0, assert_1.throwIfNotDefined)(repositoryId, 'networkId');
        (0, assert_1.throwIfNotDefined)(folderId, 'folderId');
        let postBody = null;
        let pathParams = {
            'repositoryId': repositoryId, 'folderId': folderId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/integration/alfresco/{repositoryId}/folders/{folderId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationAlfrescoContentRepresentation_1.ResultListDataRepresentationAlfrescoContentRepresentation);
    }
    getContentInSite(repositoryId, siteId) {
        (0, assert_1.throwIfNotDefined)(repositoryId, 'networkId');
        (0, assert_1.throwIfNotDefined)(siteId, 'siteId');
        let postBody = null;
        let pathParams = {
            'repositoryId': repositoryId, 'siteId': siteId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/integration/alfresco/{repositoryId}/sites/{siteId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationAlfrescoContentRepresentation_1.ResultListDataRepresentationAlfrescoContentRepresentation);
    }
    getRepositories(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'tenantId': opts['tenantId'],
            'includeAccounts': opts['includeAccounts']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/profile/accounts/alfresco', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationAlfrescoEndpointRepresentation_1.ResultListDataRepresentationAlfrescoEndpointRepresentation);
    }
}
exports.IntegrationAlfrescoOnPremiseApi = IntegrationAlfrescoOnPremiseApi;
//# sourceMappingURL=../../../../../src/api/activiti-rest-api/api/integrationAlfrescoOnPremise.api.js.map