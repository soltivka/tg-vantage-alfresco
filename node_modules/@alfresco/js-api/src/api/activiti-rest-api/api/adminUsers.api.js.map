{"version":3,"file":"adminUsers.api.js","sourceRoot":"","sources":["adminUsers.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { AbstractUserRepresentation } from '../model/abstractUserRepresentation';\nimport { BulkUserUpdateRepresentation } from '../model/bulkUserUpdateRepresentation';\nimport { ResultListDataRepresentationAbstractUserRepresentation } from '../model/resultListDataRepresentationAbstractUserRepresentation';\nimport { UserRepresentation } from '../model/userRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Adminusers service.\n* @module AdminusersApi\n*/\nexport class AdminUsersApi extends BaseApi {\n    /**\n    * Bulk update a list of users\n    *\n    *\n    *\n    * @param update update\n    * @return Promise<{}>\n    */\n    bulkUpdateUsers(update: BulkUserUpdateRepresentation): Promise<any> {\n        throwIfNotDefined(update, 'update');\n\n        let postBody = update;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/users', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Create a user\n        *\n        *\n        *\n        * @param userRepresentation userRepresentation\n        * @return Promise<UserRepresentation>\n        */\n    createNewUser(userRepresentation: UserRepresentation): Promise<UserRepresentation> {\n        throwIfNotDefined(userRepresentation, 'userRepresentation');\n\n        let postBody = userRepresentation;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/users', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, UserRepresentation);\n    }\n    /**\n        * Get a user\n        *\n        *\n        *\n        * @param userId userId\n        * @param opts Optional parameters\n        * @param opts.summary summary\n        * @return Promise<AbstractUserRepresentation>\n        */\n    getUser(userId: number, opts?: any): Promise<AbstractUserRepresentation> {\n        throwIfNotDefined(userId, 'userId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'userId': userId\n        };\n\n        let queryParams = {\n            'summary': opts['summary']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/users/{userId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, AbstractUserRepresentation);\n    }\n    /**\n        * Query users\n        *\n        *\n        *\n        * @param opts Optional parameters\n        * @param opts.filter filter\n        * @param opts.status status\n        * @param opts.accountType accountType\n        * @param opts.sort sort\n        * @param opts.company company\n        * @param opts.start start\n        * @param opts.page page\n        * @param opts.size size\n        * @param opts.groupId groupId\n        * @param opts.tenantId tenantId\n        * @param opts.summary summary\n        * @return Promise<ResultListDataRepresentationAbstractUserRepresentation>\n        */\n    getUsers(opts?: any): Promise<ResultListDataRepresentationAbstractUserRepresentation> {\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'filter': opts['filter'],\n            'status': opts['status'],\n            'accountType': opts['accountType'],\n            'sort': opts['sort'],\n            'company': opts['company'],\n            'start': opts['start'],\n            'page': opts['page'],\n            'size': opts['size'],\n            'groupId': opts['groupId'],\n            'tenantId': opts['tenantId'],\n            'summary': opts['summary']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/users', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationAbstractUserRepresentation);\n    }\n    /**\n        * Update a user\n        *\n        *\n        *\n        * @param userId userId\n        * @param userRepresentation userRepresentation\n        * @return Promise<{}>\n        */\n    updateUserDetails(userId: number, userRepresentation: UserRepresentation): Promise<any> {\n        throwIfNotDefined(userId, 'userId');\n        throwIfNotDefined(userRepresentation, 'userRepresentation');\n\n        let postBody = userRepresentation;\n\n        let pathParams = {\n            'userId': userId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/admin/users/{userId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n\n}\n"]}