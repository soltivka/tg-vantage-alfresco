{"version":3,"file":"processDefinitions.api.js","sourceRoot":"","sources":["processDefinitions.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { FormDefinitionRepresentation } from '../model/formDefinitionRepresentation';\nimport { FormValueRepresentation } from '../model/formValueRepresentation';\nimport { IdentityLinkRepresentation } from '../model/identityLinkRepresentation';\nimport { ResultListDataRepresentationProcessDefinitionRepresentation } from '../model/resultListDataRepresentationProcessDefinitionRepresentation';\nimport { ResultListDataRepresentationRuntimeDecisionTableRepresentation } from '../model/resultListDataRepresentationRuntimeDecisionTableRepresentation';\nimport { ResultListDataRepresentationRuntimeFormRepresentation } from '../model/resultListDataRepresentationRuntimeFormRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n * Processdefinitions service.\n * @module ProcessdefinitionsApi\n */\nexport class ProcessDefinitionsApi extends BaseApi {\n    /**\n     * Add a user or group involvement to a process definition\n     *\n     *\n     *\n     * @param processDefinitionId processDefinitionId\n     * @param identityLinkRepresentation identityLinkRepresentation\n     * @return Promise<IdentityLinkRepresentation>\n     */\n    createIdentityLink(processDefinitionId: string, identityLinkRepresentation: IdentityLinkRepresentation): Promise<IdentityLinkRepresentation> {\n        throwIfNotDefined(processDefinitionId, 'processDefinitionId');\n        throwIfNotDefined(identityLinkRepresentation, 'identityLinkRepresentation');\n\n        let postBody = identityLinkRepresentation;\n\n        let pathParams = {\n            'processDefinitionId': processDefinitionId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-definitions/{processDefinitionId}/identitylinks', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, IdentityLinkRepresentation);\n    }\n\n    /**\n     * Remove a user or group involvement from a process definition\n     *\n     *\n     *\n     * @param processDefinitionId Process definition ID\n     * @param family Identity type\n     * @param identityId User or group ID\n     * @return Promise<{}>\n     */\n    deleteIdentityLink(processDefinitionId: string, family: string, identityId: string): Promise<any> {\n        throwIfNotDefined(processDefinitionId, 'processDefinitionId');\n        throwIfNotDefined(family, 'family');\n        throwIfNotDefined(identityId, 'identityId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'processDefinitionId': processDefinitionId, 'family': family, 'identityId': identityId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n\n    /**\n     * Get a user or group involvement with a process definition\n     *\n     *\n     *\n     * @param processDefinitionId Process definition ID\n     * @param family Identity type\n     * @param identityId User or group ID\n     * @return Promise<IdentityLinkRepresentation>\n     */\n    getIdentityLinkType(processDefinitionId: string, family: string, identityId: string): Promise<IdentityLinkRepresentation> {\n        throwIfNotDefined(processDefinitionId, 'processDefinitionId');\n        throwIfNotDefined(family, 'family');\n        throwIfNotDefined(identityId, 'identityId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'processDefinitionId': processDefinitionId, 'family': family, 'identityId': identityId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, IdentityLinkRepresentation);\n    }\n\n    /**\n     * List either the users or groups involved with a process definition\n     *\n     *\n     *\n     * @param processDefinitionId processDefinitionId\n     * @param family Identity type\n     * @return Promise<IdentityLinkRepresentation>\n     */\n    getIdentityLinksForFamily(processDefinitionId: string, family: string): Promise<IdentityLinkRepresentation> {\n        throwIfNotDefined(processDefinitionId, 'processDefinitionId');\n        throwIfNotDefined(family, 'family');\n\n        let postBody = null;\n\n        let pathParams = {\n            'processDefinitionId': processDefinitionId, 'family': family\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, IdentityLinkRepresentation);\n    }\n\n    /**\n     * List the users and groups involved with a process definition\n     *\n     *\n     *\n     * @param processDefinitionId processDefinitionId\n     * @return Promise<IdentityLinkRepresentation>\n     */\n    getIdentityLinks(processDefinitionId: string): Promise<IdentityLinkRepresentation> {\n        throwIfNotDefined(processDefinitionId, 'processDefinitionId');\n        let postBody = null;\n\n        let pathParams = {\n            'processDefinitionId': processDefinitionId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-definitions/{processDefinitionId}/identitylinks', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, IdentityLinkRepresentation);\n    }\n\n    /**\n     * List the decision tables associated with a process definition\n     *\n     *\n     *\n     * @param processDefinitionId processDefinitionId\n     * @return Promise<ResultListDataRepresentationRuntimeDecisionTableRepresentation>\n     */\n    getProcessDefinitionDecisionTables(processDefinitionId: string): Promise<ResultListDataRepresentationRuntimeDecisionTableRepresentation> {\n        throwIfNotDefined(processDefinitionId, 'processDefinitionId');\n        let postBody = null;\n\n        let pathParams = {\n            'processDefinitionId': processDefinitionId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-definitions/{processDefinitionId}/decision-tables', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationRuntimeDecisionTableRepresentation);\n    }\n\n    /**\n     * List the forms associated with a process definition\n     *\n     *\n     *\n     * @param processDefinitionId processDefinitionId\n     * @return Promise<ResultListDataRepresentationRuntimeFormRepresentation>\n     */\n    getProcessDefinitionForms(processDefinitionId: string): Promise<ResultListDataRepresentationRuntimeFormRepresentation> {\n        throwIfNotDefined(processDefinitionId, 'processDefinitionId');\n        let postBody = null;\n\n        let pathParams = {\n            'processDefinitionId': processDefinitionId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-definitions/{processDefinitionId}/forms', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationRuntimeFormRepresentation);\n    }\n\n    /**\n     * Retrieve the start form for a process definition\n     *\n     *\n     * @param processDefinitionId processDefinitionId\n     * @return Promise<FormDefinitionRepresentation>\n     */\n    getProcessDefinitionStartForm(processDefinitionId: string): Promise<FormDefinitionRepresentation> {\n\n        let postBody = null;\n\n        let pathParams = {\n            'processDefinitionId': processDefinitionId\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-definitions/{processDefinitionId}/start-form', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, FormDefinitionRepresentation);\n    }\n\n    /**\n     * Retrieve a list of process definitions\n     *\n     * Get a list of process definitions (visible within the tenant of the user)\n     *\n     * @param opts Optional parameters\n     * @param opts.latest latest\n     * @param opts.appDefinitionId appDefinitionId\n     * @param opts.deploymentId deploymentId\n     * @return Promise<ResultListDataRepresentationProcessDefinitionRepresentation>\n     */\n    getProcessDefinitions(opts?: any): Promise<ResultListDataRepresentationProcessDefinitionRepresentation> {\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {};\n\n        let queryParams = {\n            'latest': opts['latest'],\n            'appDefinitionId': opts['appDefinitionId'],\n            'deploymentId': opts['deploymentId']\n        };\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-definitions', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationProcessDefinitionRepresentation);\n    }\n\n    /**\n     * Retrieve field values (eg. the typeahead field)\n     *\n     * @param processDefinitionId processDefinitionId\n     *\n     * @return Promise<FormValueRepresentation[]>\n     */\n    getRestFieldValues(processDefinitionId: string, field: string): Promise<FormValueRepresentation []> {\n\n        let postBody = null;\n\n        let pathParams = {\n            'processDefinitionId': processDefinitionId,\n            'field': field\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-definitions/{processDefinitionId}/start-form-values/{field}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, FormValueRepresentation);\n    }\n\n    /**\n     * Retrieve field values (eg. the table field)\n     *\n     * @param processDefinitionId processDefinitionId\n     *\n     * @return Promise<FormValueRepresentation []>\n     */\n    getRestTableFieldValues(processDefinitionId: string, field: string, column: string): Promise<FormValueRepresentation []> {\n\n        let postBody = null;\n\n        let pathParams = {\n            'processDefinitionId': processDefinitionId,\n            'field': field,\n            'column': column\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-definitions/{processDefinitionId}/start-form-values/{field}/{column}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, FormValueRepresentation);\n    }\n\n}\n"]}