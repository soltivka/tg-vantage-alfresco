{"version":3,"file":"models.api.js","sourceRoot":"","sources":["models.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ModelRepresentation } from '../model/modelRepresentation';\nimport { ObjectNode } from '../model/objectNode';\nimport { ResultListDataRepresentationModelRepresentation } from '../model/resultListDataRepresentationModelRepresentation';\nimport { ValidationErrorRepresentation } from '../model/validationErrorRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Models service.\n* @module ModelsApi\n*/\nexport class ModelsApi extends BaseApi {\n    /**\n    * Create a new model\n    *\n    *\n    *\n    * @param modelRepresentation modelRepresentation\n    * @return Promise<ModelRepresentation>\n    */\n    createModel(modelRepresentation: ModelRepresentation): Promise<ModelRepresentation> {\n        throwIfNotDefined(modelRepresentation, 'modelRepresentation');\n\n        let postBody = modelRepresentation;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/models', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ModelRepresentation);\n    }\n    /**\n        * Delete a model\n        *\n        *\n        *\n        * @param modelId modelId\n        * @param opts Optional parameters\n        * @param opts.cascade cascade\n        * @param opts.deleteRuntimeApp deleteRuntimeApp\n        * @return Promise<{}>\n        */\n    deleteModel(modelId: number, opts?: any): Promise<any> {\n        throwIfNotDefined(modelId, 'modelId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'modelId': modelId\n        };\n\n        let queryParams = {\n            'cascade': opts['cascade'],\n            'deleteRuntimeApp': opts['deleteRuntimeApp']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/models/{modelId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Duplicate an existing model\n        *\n        *\n        *\n        * @param modelId modelId\n        * @param modelRepresentation modelRepresentation\n        * @return Promise<ModelRepresentation>\n        */\n    duplicateModel(modelId: number, modelRepresentation: ModelRepresentation): Promise<ModelRepresentation> {\n        throwIfNotDefined(modelId, 'modelId');\n        throwIfNotDefined(modelRepresentation, 'modelRepresentation');\n\n        let postBody = modelRepresentation;\n\n        let pathParams = {\n            'modelId': modelId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/models/{modelId}/clone', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ModelRepresentation);\n    }\n    /**\n        * Get model content\n        *\n        *\n        *\n        * @param modelId modelId\n        * @return Promise<ObjectNode>\n        */\n    getModelJSON(modelId: number): Promise<ObjectNode> {\n        throwIfNotDefined(modelId, 'modelId');\n        let postBody = null;\n\n        let pathParams = {\n            'modelId': modelId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/models/{modelId}/editor/json', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ObjectNode);\n    }\n    /**\n        * Get a model's thumbnail image\n        *\n        *\n        *\n        * @param modelId modelId\n        * @return Promise<string>\n        */\n    getModelThumbnail(modelId: number): Promise<string> {\n        throwIfNotDefined(modelId, 'modelId');\n        let postBody = null;\n\n        let pathParams = {\n            'modelId': modelId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['image/png'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/models/{modelId}/thumbnail', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Get a model\n        *\n        * Models act as containers for process, form, decision table and app definitions\n        *\n        * @param modelId modelId\n        * @param opts Optional parameters\n        * @param opts.includePermissions includePermissions\n        * @return Promise<ModelRepresentation>\n        */\n    getModel(modelId: number, opts?: any): Promise<ModelRepresentation> {\n        throwIfNotDefined(modelId, 'modelId');\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'modelId': modelId\n        };\n\n        let queryParams = {\n            'includePermissions': opts['includePermissions']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/models/{modelId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ModelRepresentation);\n    }\n\n    /**\n        * List process definition models shared with the current user\n        *\n        *\n        *\n        * @return Promise<ResultListDataRepresentationModelRepresentation>\n        */\n    getModelsToIncludeInAppDefinition(): Promise<ResultListDataRepresentationModelRepresentation> {\n\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/models-for-app-definition', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationModelRepresentation);\n    }\n    /**\n        * List models (process, form, decision rule or app)\n        *\n        *\n        *\n        * @param opts Optional parameters\n        * @param opts.filter filter\n        * @param opts.sort sort\n        * @param opts.modelType modelType\n        * @param opts.referenceId referenceId\n        * @return Promise<ResultListDataRepresentationModelRepresentation>\n        */\n    getModels(opts?: any): Promise<ResultListDataRepresentationModelRepresentation> {\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'filter': opts['filter'],\n            'filterText': opts['filterText'],\n            'sort': opts['sort'],\n            'modelType': opts['modelType'],\n            'referenceId': opts['referenceId']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/models', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationModelRepresentation);\n    }\n    /**\n        * Create a new version of a model\n        *\n        *\n        *\n        * @param modelId modelId\n        * @param file file\n        * @return Promise<ModelRepresentation>\n        */\n    importNewVersion(modelId: number, file: any): Promise<ModelRepresentation> {\n        throwIfNotDefined(modelId, 'modelId');\n        throwIfNotDefined(file, 'file');\n\n        let postBody = null;\n\n        let pathParams = {\n            'modelId': modelId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n            'file': file\n        };\n\n        let contentTypes = ['multipart/form-data'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/models/{modelId}/newversion', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ModelRepresentation);\n    }\n    /**\n        * Import a BPMN 2.0 XML file\n        *\n        *\n        *\n        * @param file file\n        * @return Promise<ModelRepresentation>\n        */\n    importProcessModel(file: any): Promise<ModelRepresentation> {\n        throwIfNotDefined(file, 'file');\n\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n            'file': file\n        };\n\n        let contentTypes = ['multipart/form-data'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-models/import', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ModelRepresentation);\n    }\n    /**\n        * Update model content\n        *\n        *\n        *\n        * @param modelId modelId\n        * @param values values\n        * @return Promise<ModelRepresentation>\n        */\n    saveModel(modelId: number, values: any): Promise<ModelRepresentation> {\n        throwIfNotDefined(modelId, 'modelId');\n        throwIfNotDefined(values, 'values');\n\n        let postBody = values;\n\n        let pathParams = {\n            'modelId': modelId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/models/{modelId}/editor/json', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ModelRepresentation);\n    }\n    /**\n        * Update a model\n        *\n        * This method allows you to update the metadata of a model. In order to update the content of the model you will need to call the specific endpoint for that model type.\n        *\n        * @param modelId modelId\n        * @param updatedModel updatedModel\n        * @return Promise<ModelRepresentation>\n        */\n    updateModel(modelId: number, updatedModel: ModelRepresentation): Promise<ModelRepresentation> {\n        throwIfNotDefined(modelId, 'modelId');\n        throwIfNotDefined(updatedModel, 'updatedModel');\n\n        let postBody = updatedModel;\n\n        let pathParams = {\n            'modelId': modelId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/models/{modelId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ModelRepresentation);\n    }\n    /**\n        * Validate model content\n        *\n        *\n        *\n        * @param modelId modelId\n        * @param opts Optional parameters\n        * @param opts.values values\n        * @return Promise<ValidationErrorRepresentation>\n        */\n    validateModel(modelId: number, opts?: any): Promise<ValidationErrorRepresentation> {\n        throwIfNotDefined(modelId, 'modelId');\n\n        opts = opts || {};\n        let postBody = opts['values'];\n\n        let pathParams = {\n            'modelId': modelId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/x-www-form-urlencoded'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/models/{modelId}/editor/validate', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ValidationErrorRepresentation);\n    }\n\n}\n"]}