{"version":3,"file":"submittedForms.api.js","sourceRoot":"","sources":["submittedForms.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ResultListDataRepresentationSubmittedFormRepresentation } from '../model/resultListDataRepresentationSubmittedFormRepresentation';\nimport { SubmittedFormRepresentation } from '../model/submittedFormRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Submittedforms service.\n* @module SubmittedformsApi\n*/\nexport class SubmittedFormsApi extends BaseApi {\n    /**\n    * List submissions for a form\n    *\n    *\n    *\n    * @param formId formId\n    * @param opts Optional parameters\n    * @param opts.submittedBy submittedBy\n    * @param opts.start start\n    * @param opts.size size\n    * @return Promise<ResultListDataRepresentationSubmittedFormRepresentation>\n    */\n    getFormSubmittedForms(formId: number, opts?: any): Promise<ResultListDataRepresentationSubmittedFormRepresentation> {\n        throwIfNotDefined(formId, 'formId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'formId': formId\n        };\n\n        let queryParams = {\n            'submittedBy': opts['submittedBy'],\n            'start': opts['start'],\n            'size': opts['size']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/form-submitted-forms/{formId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationSubmittedFormRepresentation);\n    }\n    /**\n        * List submissions for a process instance\n        *\n        *\n        *\n        * @param processId processId\n        * @return Promise<ResultListDataRepresentationSubmittedFormRepresentation>\n        */\n    getProcessSubmittedForms(processId: string): Promise<ResultListDataRepresentationSubmittedFormRepresentation> {\n        throwIfNotDefined(processId, 'processId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'processId': processId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/process-submitted-forms/{processId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationSubmittedFormRepresentation);\n    }\n    /**\n        * Get a form submission\n        *\n        *\n        *\n        * @param submittedFormId submittedFormId\n        * @return Promise<SubmittedFormRepresentation>\n        */\n    getSubmittedFrom(submittedFormId: number): Promise<SubmittedFormRepresentation> {\n        throwIfNotDefined(submittedFormId, 'submittedFormId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'submittedFormId': submittedFormId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/submitted-forms/{submittedFormId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, SubmittedFormRepresentation);\n    }\n    /**\n        * Get the submitted form for a task\n        *\n        *\n        *\n        * @param taskId taskId\n        * @return Promise<SubmittedFormRepresentation>\n        */\n    getTaskSubmittedForms(taskId: string): Promise<SubmittedFormRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/task-submitted-form/{taskId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, SubmittedFormRepresentation);\n    }\n\n}\n"]}