"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelsApi = void 0;
const modelRepresentation_1 = require("../model/modelRepresentation");
const objectNode_1 = require("../model/objectNode");
const resultListDataRepresentationModelRepresentation_1 = require("../model/resultListDataRepresentationModelRepresentation");
const validationErrorRepresentation_1 = require("../model/validationErrorRepresentation");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
class ModelsApi extends base_api_1.BaseApi {
    createModel(modelRepresentation) {
        (0, assert_1.throwIfNotDefined)(modelRepresentation, 'modelRepresentation');
        let postBody = modelRepresentation;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, modelRepresentation_1.ModelRepresentation);
    }
    deleteModel(modelId, opts) {
        (0, assert_1.throwIfNotDefined)(modelId, 'modelId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'modelId': modelId
        };
        let queryParams = {
            'cascade': opts['cascade'],
            'deleteRuntimeApp': opts['deleteRuntimeApp']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    duplicateModel(modelId, modelRepresentation) {
        (0, assert_1.throwIfNotDefined)(modelId, 'modelId');
        (0, assert_1.throwIfNotDefined)(modelRepresentation, 'modelRepresentation');
        let postBody = modelRepresentation;
        let pathParams = {
            'modelId': modelId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}/clone', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, modelRepresentation_1.ModelRepresentation);
    }
    getModelJSON(modelId) {
        (0, assert_1.throwIfNotDefined)(modelId, 'modelId');
        let postBody = null;
        let pathParams = {
            'modelId': modelId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}/editor/json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, objectNode_1.ObjectNode);
    }
    getModelThumbnail(modelId) {
        (0, assert_1.throwIfNotDefined)(modelId, 'modelId');
        let postBody = null;
        let pathParams = {
            'modelId': modelId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['image/png'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}/thumbnail', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getModel(modelId, opts) {
        (0, assert_1.throwIfNotDefined)(modelId, 'modelId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'modelId': modelId
        };
        let queryParams = {
            'includePermissions': opts['includePermissions']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, modelRepresentation_1.ModelRepresentation);
    }
    getModelsToIncludeInAppDefinition() {
        let postBody = null;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models-for-app-definition', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationModelRepresentation_1.ResultListDataRepresentationModelRepresentation);
    }
    getModels(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'filter': opts['filter'],
            'filterText': opts['filterText'],
            'sort': opts['sort'],
            'modelType': opts['modelType'],
            'referenceId': opts['referenceId']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationModelRepresentation_1.ResultListDataRepresentationModelRepresentation);
    }
    importNewVersion(modelId, file) {
        (0, assert_1.throwIfNotDefined)(modelId, 'modelId');
        (0, assert_1.throwIfNotDefined)(file, 'file');
        let postBody = null;
        let pathParams = {
            'modelId': modelId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {
            'file': file
        };
        let contentTypes = ['multipart/form-data'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}/newversion', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, modelRepresentation_1.ModelRepresentation);
    }
    importProcessModel(file) {
        (0, assert_1.throwIfNotDefined)(file, 'file');
        let postBody = null;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {
            'file': file
        };
        let contentTypes = ['multipart/form-data'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-models/import', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, modelRepresentation_1.ModelRepresentation);
    }
    saveModel(modelId, values) {
        (0, assert_1.throwIfNotDefined)(modelId, 'modelId');
        (0, assert_1.throwIfNotDefined)(values, 'values');
        let postBody = values;
        let pathParams = {
            'modelId': modelId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}/editor/json', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, modelRepresentation_1.ModelRepresentation);
    }
    updateModel(modelId, updatedModel) {
        (0, assert_1.throwIfNotDefined)(modelId, 'modelId');
        (0, assert_1.throwIfNotDefined)(updatedModel, 'updatedModel');
        let postBody = updatedModel;
        let pathParams = {
            'modelId': modelId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, modelRepresentation_1.ModelRepresentation);
    }
    validateModel(modelId, opts) {
        (0, assert_1.throwIfNotDefined)(modelId, 'modelId');
        opts = opts || {};
        let postBody = opts['values'];
        let pathParams = {
            'modelId': modelId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/x-www-form-urlencoded'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/models/{modelId}/editor/validate', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, validationErrorRepresentation_1.ValidationErrorRepresentation);
    }
}
exports.ModelsApi = ModelsApi;
//# sourceMappingURL=../../../../../src/api/activiti-rest-api/api/models.api.js.map