"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationBoxApi = void 0;
const resultListDataRepresentationBoxContent_1 = require("../model/resultListDataRepresentationBoxContent");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
class IntegrationBoxApi extends base_api_1.BaseApi {
    confirmAuthorisation() {
        let postBody = null;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['text/html'];
        return this.apiClient.callApi('/api/enterprise/integration/box/confirm-auth-request', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    createRepositoryAccount(userId, credentials) {
        (0, assert_1.throwIfNotDefined)(userId, 'userId');
        (0, assert_1.throwIfNotDefined)(credentials, 'credentials');
        let postBody = credentials;
        let pathParams = {
            'userId': userId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['*/*'];
        return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteRepositoryAccount(userId) {
        (0, assert_1.throwIfNotDefined)(userId, 'userId');
        let postBody = null;
        let pathParams = {
            'userId': userId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['*/*'];
        return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getBoxPluginStatus() {
        let postBody = null;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['*/*'];
        return this.apiClient.callApi('/api/enterprise/integration/box/status', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getFiles(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'filter': opts['filter'],
            'parent': opts['parent']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['*/*'];
        return this.apiClient.callApi('/api/enterprise/integration/box/files', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationBoxContent_1.ResultListDataRepresentationBoxContent);
    }
    getRepositoryAccount(userId) {
        (0, assert_1.throwIfNotDefined)(userId, 'userId');
        let postBody = null;
        let pathParams = {
            'userId': userId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['*/*'];
        return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    updateRepositoryAccount(userId, credentials) {
        (0, assert_1.throwIfNotDefined)(userId, 'userId');
        (0, assert_1.throwIfNotDefined)(credentials, 'credentials');
        let postBody = credentials;
        let pathParams = {
            'userId': userId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['*/*'];
        return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
}
exports.IntegrationBoxApi = IntegrationBoxApi;
//# sourceMappingURL=../../../../../src/api/activiti-rest-api/api/integrationBox.api.js.map