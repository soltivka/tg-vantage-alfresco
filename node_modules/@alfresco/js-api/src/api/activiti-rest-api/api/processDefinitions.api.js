"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessDefinitionsApi = void 0;
const formDefinitionRepresentation_1 = require("../model/formDefinitionRepresentation");
const formValueRepresentation_1 = require("../model/formValueRepresentation");
const identityLinkRepresentation_1 = require("../model/identityLinkRepresentation");
const resultListDataRepresentationProcessDefinitionRepresentation_1 = require("../model/resultListDataRepresentationProcessDefinitionRepresentation");
const resultListDataRepresentationRuntimeDecisionTableRepresentation_1 = require("../model/resultListDataRepresentationRuntimeDecisionTableRepresentation");
const resultListDataRepresentationRuntimeFormRepresentation_1 = require("../model/resultListDataRepresentationRuntimeFormRepresentation");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
class ProcessDefinitionsApi extends base_api_1.BaseApi {
    createIdentityLink(processDefinitionId, identityLinkRepresentation) {
        (0, assert_1.throwIfNotDefined)(processDefinitionId, 'processDefinitionId');
        (0, assert_1.throwIfNotDefined)(identityLinkRepresentation, 'identityLinkRepresentation');
        let postBody = identityLinkRepresentation;
        let pathParams = {
            'processDefinitionId': processDefinitionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, identityLinkRepresentation_1.IdentityLinkRepresentation);
    }
    deleteIdentityLink(processDefinitionId, family, identityId) {
        (0, assert_1.throwIfNotDefined)(processDefinitionId, 'processDefinitionId');
        (0, assert_1.throwIfNotDefined)(family, 'family');
        (0, assert_1.throwIfNotDefined)(identityId, 'identityId');
        let postBody = null;
        let pathParams = {
            'processDefinitionId': processDefinitionId, 'family': family, 'identityId': identityId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getIdentityLinkType(processDefinitionId, family, identityId) {
        (0, assert_1.throwIfNotDefined)(processDefinitionId, 'processDefinitionId');
        (0, assert_1.throwIfNotDefined)(family, 'family');
        (0, assert_1.throwIfNotDefined)(identityId, 'identityId');
        let postBody = null;
        let pathParams = {
            'processDefinitionId': processDefinitionId, 'family': family, 'identityId': identityId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, identityLinkRepresentation_1.IdentityLinkRepresentation);
    }
    getIdentityLinksForFamily(processDefinitionId, family) {
        (0, assert_1.throwIfNotDefined)(processDefinitionId, 'processDefinitionId');
        (0, assert_1.throwIfNotDefined)(family, 'family');
        let postBody = null;
        let pathParams = {
            'processDefinitionId': processDefinitionId, 'family': family
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, identityLinkRepresentation_1.IdentityLinkRepresentation);
    }
    getIdentityLinks(processDefinitionId) {
        (0, assert_1.throwIfNotDefined)(processDefinitionId, 'processDefinitionId');
        let postBody = null;
        let pathParams = {
            'processDefinitionId': processDefinitionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, identityLinkRepresentation_1.IdentityLinkRepresentation);
    }
    getProcessDefinitionDecisionTables(processDefinitionId) {
        (0, assert_1.throwIfNotDefined)(processDefinitionId, 'processDefinitionId');
        let postBody = null;
        let pathParams = {
            'processDefinitionId': processDefinitionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/decision-tables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationRuntimeDecisionTableRepresentation_1.ResultListDataRepresentationRuntimeDecisionTableRepresentation);
    }
    getProcessDefinitionForms(processDefinitionId) {
        (0, assert_1.throwIfNotDefined)(processDefinitionId, 'processDefinitionId');
        let postBody = null;
        let pathParams = {
            'processDefinitionId': processDefinitionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/forms', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationRuntimeFormRepresentation_1.ResultListDataRepresentationRuntimeFormRepresentation);
    }
    getProcessDefinitionStartForm(processDefinitionId) {
        let postBody = null;
        let pathParams = {
            'processDefinitionId': processDefinitionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/start-form', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, formDefinitionRepresentation_1.FormDefinitionRepresentation);
    }
    getProcessDefinitions(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'latest': opts['latest'],
            'appDefinitionId': opts['appDefinitionId'],
            'deploymentId': opts['deploymentId']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationProcessDefinitionRepresentation_1.ResultListDataRepresentationProcessDefinitionRepresentation);
    }
    getRestFieldValues(processDefinitionId, field) {
        let postBody = null;
        let pathParams = {
            'processDefinitionId': processDefinitionId,
            'field': field
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/start-form-values/{field}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, formValueRepresentation_1.FormValueRepresentation);
    }
    getRestTableFieldValues(processDefinitionId, field, column) {
        let postBody = null;
        let pathParams = {
            'processDefinitionId': processDefinitionId,
            'field': field,
            'column': column
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/start-form-values/{field}/{column}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, formValueRepresentation_1.FormValueRepresentation);
    }
}
exports.ProcessDefinitionsApi = ProcessDefinitionsApi;
//# sourceMappingURL=../../../../../src/api/activiti-rest-api/api/processDefinitions.api.js.map