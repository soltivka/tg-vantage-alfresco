"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserFiltersApi = void 0;
const resultListDataRepresentationUserProcessInstanceFilterRepresentation_1 = require("../model/resultListDataRepresentationUserProcessInstanceFilterRepresentation");
const resultListDataRepresentationUserTaskFilterRepresentation_1 = require("../model/resultListDataRepresentationUserTaskFilterRepresentation");
const userProcessInstanceFilterRepresentation_1 = require("../model/userProcessInstanceFilterRepresentation");
const userTaskFilterRepresentation_1 = require("../model/userTaskFilterRepresentation");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
class UserFiltersApi extends base_api_1.BaseApi {
    createUserProcessInstanceFilter(userProcessInstanceFilterRepresentation) {
        (0, assert_1.throwIfNotDefined)(userProcessInstanceFilterRepresentation, 'userProcessInstanceFilterRepresentation');
        let postBody = userProcessInstanceFilterRepresentation;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, userProcessInstanceFilterRepresentation_1.UserProcessInstanceFilterRepresentation);
    }
    createUserTaskFilter(userTaskFilterRepresentation) {
        (0, assert_1.throwIfNotDefined)(userTaskFilterRepresentation, 'userTaskFilterRepresentation');
        let postBody = userTaskFilterRepresentation;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, userTaskFilterRepresentation_1.UserTaskFilterRepresentation);
    }
    deleteUserProcessInstanceFilter(userFilterId) {
        (0, assert_1.throwIfNotDefined)(userFilterId, 'userFilterId');
        let postBody = null;
        let pathParams = {
            'userFilterId': userFilterId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes/{userFilterId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteUserTaskFilter(userFilterId) {
        (0, assert_1.throwIfNotDefined)(userFilterId, 'userFilterId');
        let postBody = null;
        let pathParams = {
            'userFilterId': userFilterId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks/{userFilterId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getUserProcessInstanceFilter(userFilterId) {
        (0, assert_1.throwIfNotDefined)(userFilterId, 'userFilterId');
        let postBody = null;
        let pathParams = {
            'userFilterId': userFilterId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes/{userFilterId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, userProcessInstanceFilterRepresentation_1.UserProcessInstanceFilterRepresentation);
    }
    getUserProcessInstanceFilters(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'appId': opts['appId']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationUserProcessInstanceFilterRepresentation_1.ResultListDataRepresentationUserProcessInstanceFilterRepresentation);
    }
    getUserTaskFilter(userFilterId) {
        (0, assert_1.throwIfNotDefined)(userFilterId, 'userFilterId');
        let postBody = null;
        let pathParams = {
            'userFilterId': userFilterId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks/{userFilterId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, userTaskFilterRepresentation_1.UserTaskFilterRepresentation);
    }
    getUserTaskFilters(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'appId': opts['appId']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationUserTaskFilterRepresentation_1.ResultListDataRepresentationUserTaskFilterRepresentation);
    }
    orderUserProcessInstanceFilters(filterOrderRepresentation) {
        (0, assert_1.throwIfNotDefined)(filterOrderRepresentation, 'filterOrderRepresentation');
        let postBody = filterOrderRepresentation;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    orderUserTaskFilters(filterOrderRepresentation) {
        (0, assert_1.throwIfNotDefined)(filterOrderRepresentation, 'filterOrderRepresentation');
        let postBody = filterOrderRepresentation;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    updateUserProcessInstanceFilter(userFilterId, userProcessInstanceFilterRepresentation) {
        (0, assert_1.throwIfNotDefined)(userFilterId, 'userFilterId');
        (0, assert_1.throwIfNotDefined)(userProcessInstanceFilterRepresentation, 'userProcessInstanceFilterRepresentation');
        let postBody = userProcessInstanceFilterRepresentation;
        let pathParams = {
            'userFilterId': userFilterId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes/{userFilterId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, userProcessInstanceFilterRepresentation_1.UserProcessInstanceFilterRepresentation);
    }
    updateUserTaskFilter(userFilterId, userTaskFilterRepresentation) {
        (0, assert_1.throwIfNotDefined)(userFilterId, 'userFilterId');
        (0, assert_1.throwIfNotDefined)(userTaskFilterRepresentation, 'userTaskFilterRepresentation');
        let postBody = userTaskFilterRepresentation;
        let pathParams = {
            'userFilterId': userFilterId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks/{userFilterId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, userTaskFilterRepresentation_1.UserTaskFilterRepresentation);
    }
}
exports.UserFiltersApi = UserFiltersApi;
//# sourceMappingURL=../../../../../src/api/activiti-rest-api/api/userFilters.api.js.map