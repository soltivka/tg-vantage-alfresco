{"version":3,"file":"taskForms.api.js","sourceRoot":"","sources":["taskForms.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { CompleteFormRepresentation } from '../model/completeFormRepresentation';\nimport { FormDefinitionRepresentation } from '../model/formDefinitionRepresentation';\nimport { FormValueRepresentation } from '../model/formValueRepresentation';\nimport { ProcessInstanceVariableRepresentation } from '../model/processInstanceVariableRepresentation';\nimport { SaveFormRepresentation } from '../model/saveFormRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Taskforms service.\n* @module TaskformsApi\n*/\nexport class TaskFormsApi extends BaseApi {\n    /**\n    * Complete a task form\n    *\n    *\n    *\n    * @param taskId taskId\n    * @param completeTaskFormRepresentation completeTaskFormRepresentation\n    * @return Promise<{}>\n    */\n    completeTaskForm(taskId: string, completeTaskFormRepresentation: CompleteFormRepresentation): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(completeTaskFormRepresentation, 'completeTaskFormRepresentation');\n\n        let postBody = completeTaskFormRepresentation;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/task-forms/{taskId}', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Get task variables\n        *\n        *\n        *\n        * @param taskId taskId\n        * @return Promise<ProcessInstanceVariableRepresentation>\n        */\n    getProcessInstanceVariables(taskId: string): Promise<ProcessInstanceVariableRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/task-forms/{taskId}/variables', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ProcessInstanceVariableRepresentation);\n    }\n\n    /**\n     * Retrieve Column Field Values\n     * Specific case to retrieve information on a specific column\n     * @param {String} taskId taskId\n     * @param {String} field field\n     * @param {String} column column\n     */\n    getRestFieldColumnValues(taskId: string, field: string, column: string) {\n        let postBody = null;\n\n        // verify the required parameter 'taskId' is set\n        if (taskId === undefined || taskId === null) {\n            throw \"Missing param 'taskId' in getRestFieldValues\";\n        }\n\n        // verify the required parameter 'field' is set\n        if (field === undefined || field === null) {\n            throw \"Missing param 'field' in getRestFieldValues\";\n        }\n\n        // verify the required parameter 'column' is set\n        if (column === undefined || column === null) {\n            throw \"Missing param 'column' in getRestFieldValues\";\n        }\n\n        let pathParams = {\n            'taskId': taskId,\n            'field': field,\n            'column': column\n        };\n        let queryParams = {};\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/task-forms/{taskId}/form-values/{field}/{column}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts\n        );\n    }\n\n    /**\n        * Retrieve populated field values\n        *\n        * Form field values that are populated through a REST backend, can be retrieved via this service\n        *\n        * @param taskId taskId\n        * @param field field\n        * @return Promise<FormValueRepresentation []>\n        */\n    getRestFieldValues(taskId: string, field: string): Promise<FormValueRepresentation []> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(field, 'field');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId, 'field': field\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/task-forms/{taskId}/form-values/{field}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, FormValueRepresentation);\n    }\n    /**\n        * Get a task form\n        *\n        *\n        *\n        * @param taskId taskId\n        * @return Promise<FormDefinitionRepresentation>\n        */\n    getTaskForm(taskId: string): Promise<FormDefinitionRepresentation> {\n        throwIfNotDefined(taskId, 'taskId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/task-forms/{taskId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, FormDefinitionRepresentation);\n    }\n    /**\n        * Save a task form\n        *\n        *\n        *\n        * @param taskId taskId\n        * @param saveTaskFormRepresentation saveTaskFormRepresentation\n        * @return Promise<{}>\n        */\n    saveTaskForm(taskId: string, saveTaskFormRepresentation: SaveFormRepresentation): Promise<any> {\n        throwIfNotDefined(taskId, 'taskId');\n        throwIfNotDefined(saveTaskFormRepresentation, 'saveTaskFormRepresentation');\n\n        let postBody = saveTaskFormRepresentation;\n\n        let pathParams = {\n            'taskId': taskId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/task-forms/{taskId}/save-form', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n\n    /**\n     * Retrieve Task Form Variables\n     * @param {String} taskId taskId\n     */\n    getTaskFormVariables(taskId: string) {\n        let postBody = null;\n\n        // verify the required parameter 'taskId' is set\n        if (taskId === undefined || taskId === null) {\n            throw \"Missing param 'taskId' in getTaskFormVariables\";\n        }\n\n        let pathParams = {\n            'taskId': taskId\n        };\n        let queryParams = {};\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/task-forms/{taskId}/variables', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts\n        );\n    }\n\n}\n"]}