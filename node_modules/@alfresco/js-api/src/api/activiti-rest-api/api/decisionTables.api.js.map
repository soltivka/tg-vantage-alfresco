{"version":3,"file":"decisionTables.api.js","sourceRoot":"","sources":["decisionTables.api.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;;AAEF,gDAA6C;AAC7C,4JAAyJ;AACzJ,oGAAiG;AACjG,yCAAqC;AACrC,4CAAoD;AAMpD,MAAa,iBAAkB,SAAQ,kBAAO;IAS1C,0BAA0B,CAAC,eAAuB;QAC9C,IAAA,0BAAiB,EAAC,eAAe,EAAE,iBAAiB,CAAC,CAAC;QAEtD,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,iBAAiB,EAAE,eAAe;SACrC,CAAC;QAEF,IAAI,WAAW,GAAG,EACjB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,wEAAwE,EAAE,KAAK,EAC/E,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,mBAAQ,CAAC,CAAC;IACzC,CAAC;IASD,gBAAgB,CAAC,eAAuB;QACpC,IAAA,0BAAiB,EAAC,eAAe,EAAE,iBAAiB,CAAC,CAAC;QAEtD,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG;YACb,iBAAiB,EAAE,eAAe;SACrC,CAAC;QAEF,IAAI,WAAW,GAAG,EACjB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,6DAA6D,EAAE,KAAK,EACpE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,uEAAkC,CAAC,CAAC;IACnE,CAAC;IAiBD,iBAAiB,CAAC,IAAU;QACxB,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,UAAU,GAAG,EAEhB,CAAC;QAEF,IAAI,WAAW,GAAG;YACd,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC;YAC5B,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC;YAC1B,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC;YACpC,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC;YACpC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC;YACpB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC;YACtB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC;YACtB,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC;SACvB,CAAC;QAEF,IAAI,YAAY,GAAG,EAElB,CAAC;QACF,IAAI,UAAU,GAAG,EAChB,CAAC;QAEF,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,2CAA2C,EAAE,KAAK,EAClD,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAE,+HAA8D,CAAC,CAAC;IAC/F,CAAC;CAEJ;AAvHD,8CAuHC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { JsonNode } from '../model/jsonNode';\nimport { ResultListDataRepresentationRuntimeDecisionTableRepresentation } from '../model/resultListDataRepresentationRuntimeDecisionTableRepresentation';\nimport { RuntimeDecisionTableRepresentation } from '../model/runtimeDecisionTableRepresentation';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Decisiontables service.\n* @module DecisiontablesApi\n*/\nexport class DecisionTablesApi extends BaseApi {\n    /**\n    * Get definition for a decision table\n    *\n    *\n    *\n    * @param decisionTableId decisionTableId\n    * @return Promise<JsonNode>\n    */\n    getDecisionTableEditorJson(decisionTableId: number): Promise<JsonNode> {\n        throwIfNotDefined(decisionTableId, 'decisionTableId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'decisionTableId': decisionTableId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/decisions/decision-tables/{decisionTableId}/editorJson', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, JsonNode);\n    }\n    /**\n        * Get a decision table\n        *\n        *\n        *\n        * @param decisionTableId decisionTableId\n        * @return Promise<RuntimeDecisionTableRepresentation>\n        */\n    getDecisionTable(decisionTableId: number): Promise<RuntimeDecisionTableRepresentation> {\n        throwIfNotDefined(decisionTableId, 'decisionTableId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'decisionTableId': decisionTableId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/decisions/decision-tables/{decisionTableId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RuntimeDecisionTableRepresentation);\n    }\n    /**\n        * Query decision tables\n        *\n        *\n        *\n        * @param opts Optional parameters\n        * @param opts.nameLike nameLike\n        * @param opts.keyLike keyLike\n        * @param opts.tenantIdLike tenantIdLike\n        * @param opts.deploymentId deploymentId\n        * @param opts.sort sort\n        * @param opts.order order\n        * @param opts.start start\n        * @param opts.size size\n        * @return Promise<ResultListDataRepresentationRuntimeDecisionTableRepresentation>\n        */\n    getDecisionTables(opts?: any): Promise<ResultListDataRepresentationRuntimeDecisionTableRepresentation> {\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'nameLike': opts['nameLike'],\n            'keyLike': opts['keyLike'],\n            'tenantIdLike': opts['tenantIdLike'],\n            'deploymentId': opts['deploymentId'],\n            'sort': opts['sort'],\n            'order': opts['order'],\n            'start': opts['start'],\n            'size': opts['size']\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/api/enterprise/decisions/decision-tables', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ResultListDataRepresentationRuntimeDecisionTableRepresentation);\n    }\n\n}\n"]}