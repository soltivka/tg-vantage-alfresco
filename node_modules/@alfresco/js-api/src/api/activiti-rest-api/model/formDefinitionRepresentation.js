"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormDefinitionRepresentation = void 0;
const formFieldRepresentation_1 = require("./formFieldRepresentation");
const formJavascriptEventRepresentation_1 = require("./formJavascriptEventRepresentation");
const formOutcomeRepresentation_1 = require("./formOutcomeRepresentation");
const formTabRepresentation_1 = require("./formTabRepresentation");
const formVariableRepresentation_1 = require("./formVariableRepresentation");
class FormDefinitionRepresentation {
    constructor(input) {
        if (input) {
            Object.assign(this, input);
            if (input.fields) {
                this.fields = input.fields.map((item) => {
                    return new formFieldRepresentation_1.FormFieldRepresentation(item);
                });
            }
            if (input.javascriptEvents) {
                this.javascriptEvents = input.javascriptEvents.map((item) => {
                    return new formJavascriptEventRepresentation_1.FormJavascriptEventRepresentation(item);
                });
            }
            if (input.outcomes) {
                this.outcomes = input.outcomes.map((item) => {
                    return new formOutcomeRepresentation_1.FormOutcomeRepresentation(item);
                });
            }
            if (input.tabs) {
                this.tabs = input.tabs.map((item) => {
                    return new formTabRepresentation_1.FormTabRepresentation(item);
                });
            }
            if (input.variables) {
                this.variables = input.variables.map((item) => {
                    return new formVariableRepresentation_1.FormVariableRepresentation(item);
                });
            }
        }
    }
}
exports.FormDefinitionRepresentation = FormDefinitionRepresentation;
//# sourceMappingURL=../../../../../src/api/activiti-rest-api/model/formDefinitionRepresentation.js.map