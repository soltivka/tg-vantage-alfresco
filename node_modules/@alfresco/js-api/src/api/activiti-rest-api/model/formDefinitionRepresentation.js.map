{"version":3,"file":"formDefinitionRepresentation.js","sourceRoot":"","sources":["formDefinitionRepresentation.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;;AAGF,uEAAoE;AACpE,2FAAwF;AACxF,2EAAwE;AACxE,mEAAgE;AAChE,6EAA0E;AAE1E,MAAa,4BAA4B;IAwBrC,YAAY,KAAW;QAEnB,IAAI,KAAK,EAAE;YACP,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC3B,IAAI,KAAK,CAAC,MAAM,EAAE;gBACd,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE;oBACzC,OAAO,IAAI,iDAAuB,CAAC,IAAI,CAAC,CAAC;gBAC7C,CAAC,CAAC,CAAC;aACN;YACD,IAAI,KAAK,CAAC,gBAAgB,EAAE;gBACxB,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE;oBAC7D,OAAO,IAAI,qEAAiC,CAAC,IAAI,CAAC,CAAC;gBACvD,CAAC,CAAC,CAAC;aACN;YACD,IAAI,KAAK,CAAC,QAAQ,EAAE;gBAChB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE;oBAC7C,OAAO,IAAI,qDAAyB,CAAC,IAAI,CAAC,CAAC;gBAC/C,CAAC,CAAC,CAAC;aACN;YACD,IAAI,KAAK,CAAC,IAAI,EAAE;gBACZ,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE;oBACrC,OAAO,IAAI,6CAAqB,CAAC,IAAI,CAAC,CAAC;gBAC3C,CAAC,CAAC,CAAC;aACN;YACD,IAAI,KAAK,CAAC,SAAS,EAAE;gBACjB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE;oBAC/C,OAAO,IAAI,uDAA0B,CAAC,IAAI,CAAC,CAAC;gBAChD,CAAC,CAAC,CAAC;aACN;SACJ;IACL,CAAC;CAEJ;AAxDD,oEAwDC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { FieldValueInfo } from './fieldValueInfo';\nimport { FormFieldRepresentation } from './formFieldRepresentation';\nimport { FormJavascriptEventRepresentation } from './formJavascriptEventRepresentation';\nimport { FormOutcomeRepresentation } from './formOutcomeRepresentation';\nimport { FormTabRepresentation } from './formTabRepresentation';\nimport { FormVariableRepresentation } from './formVariableRepresentation';\n\nexport class FormDefinitionRepresentation {\n    className?: string;\n    customFieldTemplates?: { [key: string]: string; };\n    customFieldsValueInfo?: { [key: string]: FieldValueInfo; };\n    fields?: FormFieldRepresentation[];\n    globalDateFormat?: string;\n    gridsterForm?: boolean;\n    id?: number;\n    javascriptEvents?: FormJavascriptEventRepresentation[];\n    metadata?: { [key: string]: string; };\n    name?: string;\n    outcomeTarget?: string;\n    outcomes?: FormOutcomeRepresentation[];\n    processDefinitionId?: string;\n    processDefinitionKey?: string;\n    processDefinitionName?: string;\n    selectedOutcome?: string;\n    style?: string;\n    tabs?: FormTabRepresentation[];\n    taskDefinitionKey?: string;\n    taskId?: string;\n    taskName?: string;\n    variables?: FormVariableRepresentation[];\n\n    constructor(input?: any) {\n\n        if (input) {\n            Object.assign(this, input);\n            if (input.fields) {\n                this.fields = input.fields.map((item: any) => {\n                    return new FormFieldRepresentation(item);\n                });\n            }\n            if (input.javascriptEvents) {\n                this.javascriptEvents = input.javascriptEvents.map((item: any) => {\n                    return new FormJavascriptEventRepresentation(item);\n                });\n            }\n            if (input.outcomes) {\n                this.outcomes = input.outcomes.map((item: any) => {\n                    return new FormOutcomeRepresentation(item);\n                });\n            }\n            if (input.tabs) {\n                this.tabs = input.tabs.map((item: any) => {\n                    return new FormTabRepresentation(item);\n                });\n            }\n            if (input.variables) {\n                this.variables = input.variables.map((item: any) => {\n                    return new FormVariableRepresentation(item);\n                });\n            }\n        }\n    }\n\n}\n"]}