{"version":3,"file":"groups.api.js","sourceRoot":"","sources":["groups.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { GroupBodyCreate } from '../model/groupBodyCreate';\nimport { GroupBodyUpdate } from '../model/groupBodyUpdate';\nimport { GroupEntry } from '../model/groupEntry';\nimport { GroupMemberEntry } from '../model/groupMemberEntry';\nimport { GroupMemberPaging } from '../model/groupMemberPaging';\nimport { GroupMembershipBodyCreate } from '../model/groupMembershipBodyCreate';\nimport { GroupPaging } from '../model/groupPaging';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\n\n/**\n* Groups service.\n* @module GroupsApi\n*/\nexport class GroupsApi extends BaseApi {\n    /**\n    * Create a group\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nCreate a group.\n\nThe group id must start with \\\"GROUP\\\\_\\\". If this is omitted it will be added automatically.\nThis format is also returned when listing groups or group memberships. It should be noted\nthat the other group-related operations also expect the id to start with \\\"GROUP\\\\_\\\".\n\nIf one or more parentIds are specified then the group will be created and become a member\nof each of the specified parent groups.\n\nIf no parentIds are specified then the group will be created as a root group.\n\nThe group will be created in the **APP.DEFAULT** and **AUTH.ALF** zones.\n\nYou must have admin rights to create a group.\n\n    *\n    * @param groupBodyCreate The group to create.\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about the group. The following optional fields can be requested:\n* parentIds\n* zones\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<GroupEntry>\n    */\n    createGroup(groupBodyCreate: GroupBodyCreate, opts?: any): Promise<GroupEntry> {\n\n        throwIfNotDefined(groupBodyCreate, 'groupBodyCreate');\n\n        opts = opts || {};\n        const postBody = groupBodyCreate;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/groups', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , GroupEntry);\n    }\n/**\n    * Create a group membership\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nCreate a group membership (for an existing person or group) within a group **groupId**.\n\nIf the added group was previously a root group then it becomes a non-root group since it now has a parent.\n\nIt is an error to specify an **id** that does not exist.\n\nYou must have admin rights to create a group membership.\n\n    *\n    * @param groupId The identifier of a group.\n    * @param groupMembershipBodyCreate The group membership to add (person or sub-group).\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<GroupMemberEntry>\n    */\n    createGroupMembership(groupId: string, groupMembershipBodyCreate: GroupMembershipBodyCreate, opts?: any): Promise<GroupMemberEntry> {\n\n        throwIfNotDefined(groupId, 'groupId');\n        throwIfNotDefined(groupMembershipBodyCreate, 'groupMembershipBodyCreate');\n\n        opts = opts || {};\n        const postBody = groupMembershipBodyCreate;\n\n        const pathParams = {\n            'groupId': groupId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/groups/{groupId}/members', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , GroupMemberEntry);\n    }\n/**\n    * Delete a group\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nDelete group **groupId**.\n\nThe option to cascade delete applies this recursively to any hierarchy of group members.\nIn this case, removing a group member does not delete the person or sub-group itself.\nIf a removed sub-group no longer has any parent groups then it becomes a root group.\n\nYou must have admin rights to delete a group.\n\n    *\n    * @param groupId The identifier of a group.\n    * @param opts Optional parameters\n    * @param opts.cascade If **true** then the delete will be applied in cascade to sub-groups.\n (default to false)\n    * @return Promise<{}>\n    */\n    deleteGroup(groupId: string, opts?: any): Promise<any> {\n\n        throwIfNotDefined(groupId, 'groupId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        let cascadeDelete = opts['cascade'] ? opts['cascade'] : false;\n\n        const pathParams = {\n            'groupId': groupId\n        };\n\n        const queryParams = {\n            'cascade': cascadeDelete\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/groups/{groupId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Delete a group membership\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nDelete group member **groupMemberId** (person or sub-group) from group **groupId**.\n\nRemoving a group member does not delete the person or sub-group itself.\n\nIf a removed sub-group no longer has any parent groups then it becomes a root group.\n\nYou must have admin rights to delete a group membership.\n\n    *\n    * @param groupId The identifier of a group.\n    * @param groupMemberId The identifier of a person or group.\n    * @return Promise<{}>\n    */\n    deleteGroupMembership(groupId: string, groupMemberId: string): Promise<any> {\n\n        throwIfNotDefined(groupId, 'groupId');\n        throwIfNotDefined(groupMemberId, 'groupMemberId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'groupId': groupId,            'groupMemberId': groupMemberId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/groups/{groupId}/members/{groupMemberId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Get group details\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nGet details for group **groupId**.\n\nYou can use the **include** parameter to return additional information.\n\n    *\n    * @param groupId The identifier of a group.\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about the group. The following optional fields can be requested:\n* parentIds\n* zones\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<GroupEntry>\n    */\n    getGroup(groupId: string, opts?: any): Promise<GroupEntry> {\n\n        throwIfNotDefined(groupId, 'groupId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'groupId': groupId\n        };\n\n        const queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/groups/{groupId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , GroupEntry);\n    }\n/**\n    * List memberships of a group\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nGets a list of the group memberships for the group **groupId**.\n\nYou can use the **where** parameter to filter the returned groups by **memberType**.\n\nExample to filter by **memberType**, use any one of:\n\n(memberType='GROUP')\n(memberType='PERSON')\n\nThe default sort order for the returned list is for group members to be sorted by ascending displayName.\nYou can override the default by using the **orderBy** parameter. You can specify one of the following fields in the **orderBy** parameter:\n* id\n* displayName\n\n    *\n    * @param groupId The identifier of a group.\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n    * @param opts.where A string to restrict the returned objects by using a predicate.\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<GroupMemberPaging>\n    */\n    listGroupMemberships(groupId: string, opts?: any): Promise<GroupMemberPaging> {\n\n        throwIfNotDefined(groupId, 'groupId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'groupId': groupId\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),\n            'where': opts['where'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/groups/{groupId}/members', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , GroupMemberPaging);\n    }\n/**\n    * List group memberships\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\n Gets a list of group membership information for person **personId**.\n\n You can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n You can use the **include** parameter to return additional information.\n\n You can use the **where** parameter to filter the returned groups by **isRoot**. For example, the following **where**\n clause will return just the root groups:\n\n (isRoot=true)\n\n The **where** parameter can also be used to filter by ***zone***. This may be combined with isRoot to narrow\n a result set even further. For example, the following where clause will only return groups belonging to the\n MY.ZONE zone.\n\n where=(zones in ('MY.ZONE'))\n\n This may be combined with the isRoot filter, as shown below:\n\n where=(isRoot=false AND zones in ('MY.ZONE'))\n\n ***Note:*** restrictions include\n * AND is the only supported operator when combining isRoot and zones filters\n * Only one zone is supported by the filter\n * The quoted zone name must be placed in parenthesis — a 400 error will result if these are omitted.\n\n The default sort order for the returned list is for groups to be sorted by ascending displayName.\n You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:\n * id\n * displayName\n\n    *\n    * @param personId The identifier of a person.\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n    * @param opts.include Returns additional information about the group. The following optional fields can be requested:\n* parentIds\n* zones\n\n    * @param opts.where A string to restrict the returned objects by using a predicate.\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<GroupPaging>\n    */\n    listGroupMembershipsForPerson(personId: string, opts?: any): Promise<GroupPaging> {\n\n        throwIfNotDefined(personId, 'personId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'where': opts['where'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/groups', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , GroupPaging);\n    }\n/**\n    * List groups\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nGets a list of groups.\n\nYou can use the **include** parameter to return additional information.\n\nYou can use the **where** parameter to filter the returned groups by **isRoot**. For example, the following **where**\nclause will return just the root groups:\n\n(isRoot=true)\n\nThe **where** parameter can also be used to filter by ***zone***. This may be combined with isRoot to narrow\na result set even further. For example, the following where clause will only return groups belonging to the\nMY.ZONE zone.\n\nwhere=(zones in ('MY.ZONE'))\n\nThis may be combined with the isRoot filter, as shown below:\n\nwhere=(isRoot=false AND zones in ('MY.ZONE'))\n\n***Note:*** restrictions include\n* AND is the only supported operator when combining isRoot and zones filters\n* Only one zone is supported by the filter\n* The quoted zone name must be placed in parenthesis — a 400 error will result if these are omitted.\n\nThe default sort order for the returned list is for groups to be sorted by ascending displayName.\nYou can override the default by using the **orderBy** parameter. You can specify one of the following fields in the **orderBy** parameter:\n* id\n* displayName\n\n    *\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n    * @param opts.include Returns additional information about the group. The following optional fields can be requested:\n* parentIds\n* zones\n\n    * @param opts.where A string to restrict the returned objects by using a predicate.\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<GroupPaging>\n    */\n    listGroups(opts?: any): Promise<GroupPaging> {\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'where': opts['where'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/groups', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , GroupPaging);\n    }\n/**\n    * Update group details\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nUpdate details (displayName) for group **groupId**.\n\nYou must have admin rights to update a group.\n\n    *\n    * @param groupId The identifier of a group.\n    * @param groupBodyUpdate The group information to update.\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about the group. The following optional fields can be requested:\n* parentIds\n* zones\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<GroupEntry>\n    */\n    updateGroup(groupId: string, groupBodyUpdate: GroupBodyUpdate, opts?: any): Promise<GroupEntry> {\n\n        throwIfNotDefined(groupId, 'groupId');\n        throwIfNotDefined(groupBodyUpdate, 'groupBodyUpdate');\n\n        opts = opts || {};\n        const postBody = groupBodyUpdate;\n\n        const pathParams = {\n            'groupId': groupId\n        };\n\n        const queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/groups/{groupId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , GroupEntry);\n    }\n\n}\n"]}