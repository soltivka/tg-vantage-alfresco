{"version":3,"file":"queries.api.js","sourceRoot":"","sources":["queries.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { NodePaging } from '../model/nodePaging';\nimport { PersonPaging } from '../model/personPaging';\nimport { SitePaging } from '../model/sitePaging';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\n\n/**\n* Queries service.\n* @module QueriesApi\n*/\nexport class QueriesApi extends BaseApi {\n    /**\n    * Find nodes\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of nodes that match the given search criteria.\n\nThe search term is used to look for nodes that match against name, title, description, full text content or tags.\n\nThe search term:\n- must contain a minimum of 3 alphanumeric characters\n- allows \\\"quoted term\\\"\n- can optionally use '*' for wildcard matching\n\nBy default, file and folder types will be searched unless a specific type is provided as a query parameter.\n\nBy default, the search will be across the repository unless a specific root node id is provided to start the search from.\n\nYou can sort the result list using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:\n* name\n* modifiedAt\n* createdAt\n\n    *\n    * @param term The term to search for.\n    * @param opts Optional parameters\n    * @param opts.rootNodeId The id of the node to start the search from.\n\nSupports the aliases -my-, -root- and -shared-.\n\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.nodeType Restrict the returned results to only those of the given node type and its sub-types\n\n    * @param opts.include Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* aspectNames\n* isLink\n* isFavorite\n* isLocked\n* path\n* properties\n\n    * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<NodePaging>\n    */\n    findNodes(term: string, opts?: any): Promise<NodePaging> {\n\n        throwIfNotDefined(term, 'term');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'term': term,\n            'rootNodeId': opts['rootNodeId'],\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'nodeType': opts['nodeType'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/queries/nodes', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , NodePaging);\n    }\n/**\n    * Find people\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of people that match the given search criteria.\n\nThe search term is used to look for matches against person id, firstname and lastname.\n\nThe search term:\n- must contain a minimum of 2 alphanumeric characters\n- can optionally use '*' for wildcard matching within the term\n\nYou can sort the result list using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:\n* id\n* firstName\n* lastName\n\n    *\n    * @param term The term to search for.\n\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n    * @return Promise<PersonPaging>\n    */\n    findPeople(term: string, opts?: any): Promise<PersonPaging> {\n\n        throwIfNotDefined(term, 'term');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'term': term,\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'fields': buildCollectionParam(opts['fields'], 'csv'),\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/queries/people', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , PersonPaging);\n    }\n/**\n    * Find sites\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of sites that match the given search criteria.\n\nThe search term is used to look for sites that match against site id, title or description.\n\nThe search term:\n- must contain a minimum of 2 alphanumeric characters\n- can optionally use '*' for wildcard matching within the term\n\nThe default sort order for the returned list is for sites to be sorted by ascending id.\nYou can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:\n* id\n* title\n* description\n\n    *\n    * @param term The term to search for.\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SitePaging>\n    */\n    findSites(term: string, opts?: any): Promise<SitePaging> {\n\n        throwIfNotDefined(term, 'term');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'term': term,\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/queries/sites', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SitePaging);\n    }\n\n}\n"]}