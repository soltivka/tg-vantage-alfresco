{"version":3,"file":"comments.api.js","sourceRoot":"","sources":["comments.api.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;;AAGF,wDAAqD;AACrD,0DAAuD;AACvD,yCAAqC;AACrC,4CAAoD;AACpD,kEAAkE;AAMlE,MAAa,WAAY,SAAQ,kBAAO;IAqEpC,aAAa,CAAC,MAAc,EAAE,iBAA8B,EAAE,IAAU;QAEpE,IAAA,0BAAiB,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACpC,IAAA,0BAAiB,EAAC,iBAAiB,EAAE,mBAAmB,CAAC,CAAC;QAE1D,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,MAAM,QAAQ,GAAG,iBAAiB,CAAC;QAEnC,MAAM,UAAU,GAAG;YACf,QAAQ,EAAE,MAAM;SACnB,CAAC;QAEF,MAAM,WAAW,GAAG;YAChB,QAAQ,EAAE,IAAA,wCAAoB,EAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC;SACxD,CAAC;QAEF,MAAM,YAAY,GAAG,EAEpB,CAAC;QACF,MAAM,UAAU,GAAG,EAClB,CAAC;QAEF,MAAM,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC1C,MAAM,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,0BAA0B,EAAE,MAAM,EAClC,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAG,2BAAY,CAAC,CAAC;IAC9C,CAAC;IAUD,aAAa,CAAC,MAAc,EAAE,SAAiB;QAE3C,IAAA,0BAAiB,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACpC,IAAA,0BAAiB,EAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAE1C,MAAM,QAAQ,GAAS,IAAI,CAAC;QAE5B,MAAM,UAAU,GAAG;YACf,QAAQ,EAAE,MAAM,EAAa,WAAW,EAAE,SAAS;SACtD,CAAC;QAEF,MAAM,WAAW,GAAG,EACnB,CAAC;QAEF,MAAM,YAAY,GAAG,EAEpB,CAAC;QACF,MAAM,UAAU,GAAG,EAClB,CAAC;QAEF,MAAM,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC1C,MAAM,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,sCAAsC,EAAE,QAAQ,EAChD,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,CAAE,CAAC;IAChC,CAAC;IA4BD,YAAY,CAAC,MAAc,EAAE,IAAU;QAEnC,IAAA,0BAAiB,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEpC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,MAAM,QAAQ,GAAS,IAAI,CAAC;QAE5B,MAAM,UAAU,GAAG;YACf,QAAQ,EAAE,MAAM;SACnB,CAAC;QAEF,MAAM,WAAW,GAAG;YAChB,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC;YAC9B,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC;YAC5B,QAAQ,EAAE,IAAA,wCAAoB,EAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC;SACxD,CAAC;QAEF,MAAM,YAAY,GAAG,EAEpB,CAAC;QACF,MAAM,UAAU,GAAG,EAClB,CAAC;QAEF,MAAM,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC1C,MAAM,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,0BAA0B,EAAE,KAAK,EACjC,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAG,6BAAa,CAAC,CAAC;IAC/C,CAAC;IAwBD,aAAa,CAAC,MAAc,EAAE,SAAiB,EAAE,iBAA8B,EAAE,IAAU;QAEvF,IAAA,0BAAiB,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACpC,IAAA,0BAAiB,EAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAC1C,IAAA,0BAAiB,EAAC,iBAAiB,EAAE,mBAAmB,CAAC,CAAC;QAE1D,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,MAAM,QAAQ,GAAG,iBAAiB,CAAC;QAEnC,MAAM,UAAU,GAAG;YACf,QAAQ,EAAE,MAAM,EAAa,WAAW,EAAE,SAAS;SACtD,CAAC;QAEF,MAAM,WAAW,GAAG;YAChB,QAAQ,EAAE,IAAA,wCAAoB,EAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC;SACxD,CAAC;QAEF,MAAM,YAAY,GAAG,EAEpB,CAAC;QACF,MAAM,UAAU,GAAG,EAClB,CAAC;QAEF,MAAM,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC1C,MAAM,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,sCAAsC,EAAE,KAAK,EAC7C,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAG,2BAAY,CAAC,CAAC;IAC9C,CAAC;CAEJ;AAzPD,kCAyPC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { CommentBody } from '../model/commentBody';\nimport { CommentEntry } from '../model/commentEntry';\nimport { CommentPaging } from '../model/commentPaging';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\n\n/**\n* Comments service.\n* @module CommentsApi\n*/\nexport class CommentsApi extends BaseApi {\n    /**\n    * Create a comment\n    *\n    * Creates a comment on node **nodeId**. You specify the comment in a JSON body like this:\n\nJSON\n{\n  \\\"content\\\": \\\"This is a comment\\\"\n}\n\n**Note:** You can create more than one comment by\nspecifying a list of comments in the JSON body like this:\n\nJSON\n[\n  {\n    \\\"content\\\": \\\"This is a comment\\\"\n  },\n  {\n    \\\"content\\\": \\\"This is another comment\\\"\n  }\n]\n\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 2,\n      \\\"hasMoreItems\\\": false,\n      \\\"totalItems\\\": 2,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 100\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param commentBodyCreate The comment text. Note that you can also provide a list of comments.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<CommentEntry>\n    */\n    createComment(nodeId: string, commentBodyCreate: CommentBody, opts?: any): Promise<CommentEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(commentBodyCreate, 'commentBodyCreate');\n\n        opts = opts || {};\n        const postBody = commentBodyCreate;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/comments', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , CommentEntry);\n    }\n/**\n    * Delete a comment\n    *\n    * Deletes the comment **commentId** from node **nodeId**.\n    *\n    * @param nodeId The identifier of a node.\n    * @param commentId The identifier of a comment.\n    * @return Promise<{}>\n    */\n    deleteComment(nodeId: string, commentId: string): Promise<any> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(commentId, 'commentId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId,            'commentId': commentId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/comments/{commentId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * List comments\n    *\n    * Gets a list of comments for the node **nodeId**, sorted chronologically with the newest comment first.\n    *\n    * @param nodeId The identifier of a node.\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<CommentPaging>\n    */\n    listComments(nodeId: string, opts?: any): Promise<CommentPaging> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/comments', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , CommentPaging);\n    }\n/**\n    * Update a comment\n    *\n    * Updates an existing comment **commentId** on node **nodeId**.\n    *\n    * @param nodeId The identifier of a node.\n    * @param commentId The identifier of a comment.\n    * @param commentBodyUpdate The JSON representing the comment to be updated.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<CommentEntry>\n    */\n    updateComment(nodeId: string, commentId: string, commentBodyUpdate: CommentBody, opts?: any): Promise<CommentEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(commentId, 'commentId');\n        throwIfNotDefined(commentBodyUpdate, 'commentBodyUpdate');\n\n        opts = opts || {};\n        const postBody = commentBodyUpdate;\n\n        const pathParams = {\n            'nodeId': nodeId,            'commentId': commentId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/comments/{commentId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , CommentEntry);\n    }\n\n}\n"]}