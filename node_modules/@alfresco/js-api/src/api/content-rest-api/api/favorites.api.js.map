{"version":3,"file":"favorites.api.js","sourceRoot":"","sources":["favorites.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { FavoriteBodyCreate } from '../model/favoriteBodyCreate';\nimport { FavoriteEntry } from '../model/favoriteEntry';\nimport { FavoritePaging } from '../model/favoritePaging';\nimport { FavoriteSiteBodyCreate } from '../model/favoriteSiteBodyCreate';\nimport { FavoriteSiteEntry } from '../model/favoriteSiteEntry';\nimport { SiteEntry } from '../model/siteEntry';\nimport { SitePaging } from '../model/sitePaging';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\n\n/**\n* Favorites service.\n* @module FavoritesApi\n*/\nexport class FavoritesApi extends BaseApi {\n    /**\n    * Create a favorite\n    *\n    * Favorite a **site**, **file**, or **folder** in the repository.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n**Note:** You can favorite more than one entity by\nspecifying a list of objects in the JSON body like this:\n\nJSON\n[\n  {\n       \\\"target\\\": {\n          \\\"file\\\": {\n             \\\"guid\\\": \\\"abcde-01234-....\\\"\n          }\n       }\n   },\n   {\n       \\\"target\\\": {\n          \\\"file\\\": {\n             \\\"guid\\\": \\\"abcde-09863-....\\\"\n          }\n       }\n   },\n]\n\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 2,\n      \\\"hasMoreItems\\\": false,\n      \\\"totalItems\\\": 2,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 100\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n\n    *\n    * @param personId The identifier of a person.\n    * @param favoriteBodyCreate An object identifying the entity to be favorited.\n\nThe object consists of a single property which is an object with the name site, file, or folder.\nThe content of that object is the guid of the target entity.\n\nFor example, to favorite a file the following body would be used:\n\nJSON\n{\n   \\\"target\\\": {\n      \\\"file\\\": {\n         \\\"guid\\\": \\\"abcde-01234-....\\\"\n      }\n   }\n}\n\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about favorites, the following optional fields can be requested:\n* path (note, this only applies to files and folders)\n* properties\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<FavoriteEntry>\n    */\n    createFavorite(personId: string, favoriteBodyCreate: FavoriteBodyCreate, opts?: any): Promise<FavoriteEntry> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(favoriteBodyCreate, 'favoriteBodyCreate');\n\n        opts = opts || {};\n        const postBody = favoriteBodyCreate;\n\n        const pathParams = {\n            'personId': personId\n        };\n\n        const queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/favorites', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , FavoriteEntry);\n    }\n/**\n    * Create a site favorite\n    *\n    * **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.\nUse /people/{personId}/favorites instead.\n\nCreate a site favorite for person **personId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n **Note:** You can favorite more than one site by\nspecifying a list of sites in the JSON body like this:\n\nJSON\n[\n  {\n    \\\"id\\\": \\\"test-site-1\\\"\n  },\n  {\n    \\\"id\\\": \\\"test-site-2\\\"\n  }\n]\n\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 2,\n      \\\"hasMoreItems\\\": false,\n      \\\"totalItems\\\": 2,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 100\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n\n    *\n    * @param personId The identifier of a person.\n    * @param favoriteSiteBodyCreate The id of the site to favorite.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<FavoriteSiteEntry>\n    */\n    createSiteFavorite(personId: string, favoriteSiteBodyCreate: FavoriteSiteBodyCreate, opts?: any): Promise<FavoriteSiteEntry> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(favoriteSiteBodyCreate, 'favoriteSiteBodyCreate');\n\n        opts = opts || {};\n        const postBody = favoriteSiteBodyCreate;\n\n        const pathParams = {\n            'personId': personId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/favorite-sites', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , FavoriteSiteEntry);\n    }\n/**\n    * Delete a favorite\n    *\n    * Deletes **favoriteId** as a favorite of person **personId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param personId The identifier of a person.\n    * @param favoriteId The identifier of a favorite.\n    * @return Promise<{}>\n    */\n    deleteFavorite(personId: string, favoriteId: string): Promise<any> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(favoriteId, 'favoriteId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId,            'favoriteId': favoriteId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/favorites/{favoriteId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Delete a site favorite\n    *\n    * **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.\nUse /people/{personId}/favorites/{favoriteId} instead.\n\nDeletes site **siteId** from the favorite site list of person **personId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param personId The identifier of a person.\n    * @param siteId The identifier of a site.\n    * @return Promise<{}>\n    */\n    deleteSiteFavorite(personId: string, siteId: string): Promise<any> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(siteId, 'siteId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId,            'siteId': siteId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/favorite-sites/{siteId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Get a favorite\n    *\n    * Gets favorite **favoriteId** for person **personId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param personId The identifier of a person.\n    * @param favoriteId The identifier of a favorite.\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about favorites, the following optional fields can be requested:\n* path (note, this only applies to files and folders)\n* properties\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<FavoriteEntry>\n    */\n    getFavorite(personId: string, favoriteId: string, opts?: any): Promise<FavoriteEntry> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(favoriteId, 'favoriteId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId,            'favoriteId': favoriteId\n        };\n\n        const queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/favorites/{favoriteId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , FavoriteEntry);\n    }\n/**\n    * Get a favorite site\n    *\n    * **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.\nUse /people/{personId}/favorites/{favoriteId} instead.\n\nGets information on favorite site **siteId** of person **personId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param personId The identifier of a person.\n    * @param siteId The identifier of a site.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SiteEntry>\n    */\n    getFavoriteSite(personId: string, siteId: string, opts?: any): Promise<SiteEntry> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(siteId, 'siteId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId,            'siteId': siteId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/favorite-sites/{siteId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteEntry);\n    }\n/**\n    * List favorite sites\n    *\n    * **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.\nUse /people/{personId}/favorites instead.\n\nGets a list of a person's favorite sites.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param personId The identifier of a person.\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SitePaging>\n    */\n    listFavoriteSitesForPerson(personId: string, opts?: any): Promise<SitePaging> {\n\n        throwIfNotDefined(personId, 'personId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/favorite-sites', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SitePaging);\n    }\n/**\n    * List favorites\n    *\n    * Gets a list of favorites for person **personId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\nThe default sort order for the returned list of favorites is type ascending, createdAt descending.\nYou can override the default by using the **orderBy** parameter.\n\nYou can use any of the following fields to order the results:\n*   type\n*   createdAt\n*   title\n\nYou can use the **where** parameter to restrict the list in the response\nto entries of a specific kind. The **where** parameter takes a value.\nThe value is a single predicate that can include one or more **EXISTS**\nconditions. The **EXISTS** condition uses a single operand to limit the\nlist to include entries that include that one property. The property values are:\n\n*   target/file\n*   target/folder\n*   target/site\n\nFor example, the following **where** parameter restricts the returned list to the file favorites for a person:\n\nSQL\n(EXISTS(target/file))\n\nYou can specify more than one condition using **OR**. The predicate must be enclosed in parentheses.\n\nFor example, the following **where** parameter restricts the returned list to the file and folder favorites for a person:\n\nSQL\n(EXISTS(target/file) OR EXISTS(target/folder))\n\n    *\n    * @param personId The identifier of a person.\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n    * @param opts.where A string to restrict the returned objects by using a predicate.\n    * @param opts.include Returns additional information about favorites, the following optional fields can be requested:\n* path (note, this only applies to files and folders)\n* properties\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<FavoritePaging>\n    */\n    listFavorites(personId: string, opts?: any): Promise<FavoritePaging> {\n\n        throwIfNotDefined(personId, 'personId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),\n            'where': opts['where'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/favorites', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , FavoritePaging);\n    }\n\n}\n"]}