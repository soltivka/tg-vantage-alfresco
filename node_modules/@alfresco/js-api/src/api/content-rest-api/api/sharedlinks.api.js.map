{"version":3,"file":"sharedlinks.api.js","sourceRoot":"","sources":["sharedlinks.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { RenditionEntry } from '../model/renditionEntry';\nimport { RenditionPaging } from '../model/renditionPaging';\nimport { SharedLinkBodyCreate } from '../model/sharedLinkBodyCreate';\nimport { SharedLinkBodyEmail } from '../model/sharedLinkBodyEmail';\nimport { SharedLinkEntry } from '../model/sharedLinkEntry';\nimport { SharedLinkPaging } from '../model/sharedLinkPaging';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\n\n/**\n* Sharedlinks service.\n* @module SharedlinksApi\n*/\nexport class SharedlinksApi extends BaseApi {\n    /**\n    * Create a shared link to a file\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nCreate a shared link to the file **nodeId** in the request body. Also, an optional expiry date could be set,\nso the shared link would become invalid when the expiry date is reached. For example:\n\nJSON\n  {\n    \\\"nodeId\\\": \\\"1ff9da1a-ee2f-4b9c-8c34-3333333333\\\",\n    \\\"expiresAt\\\": \\\"2017-03-23T23:00:00.000+0000\\\"\n  }\n\n**Note:** You can create shared links to more than one file\nspecifying a list of **nodeId**s in the JSON body like this:\n\nJSON\n[\n  {\n    \\\"nodeId\\\": \\\"1ff9da1a-ee2f-4b9c-8c34-4444444444\\\"\n  },\n  {\n    \\\"nodeId\\\": \\\"1ff9da1a-ee2f-4b9c-8c34-5555555555\\\"\n  }\n]\n\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 2,\n      \\\"hasMoreItems\\\": false,\n      \\\"totalItems\\\": 2,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 100\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n\n    *\n    * @param sharedLinkBodyCreate The nodeId to create a shared link for.\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about the shared link, the following optional fields can be requested:\n* allowableOperations\n* path\n* properties\n* isFavorite\n* aspectNames\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SharedLinkEntry>\n    */\n    createSharedLink(sharedLinkBodyCreate: SharedLinkBodyCreate, opts?: any): Promise<SharedLinkEntry> {\n\n        throwIfNotDefined(sharedLinkBodyCreate, 'sharedLinkBodyCreate');\n\n        opts = opts || {};\n        const postBody = sharedLinkBodyCreate;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/shared-links', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SharedLinkEntry);\n    }\n/**\n    * Deletes a shared link\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nDeletes the shared link with identifier **sharedId**.\n\n    *\n    * @param sharedId The identifier of a shared link to a file.\n    * @return Promise<{}>\n    */\n    deleteSharedLink(sharedId: string): Promise<any> {\n\n        throwIfNotDefined(sharedId, 'sharedId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'sharedId': sharedId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/shared-links/{sharedId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Email shared link\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nSends email with app-specific url including identifier **sharedId**.\n\nThe client and recipientEmails properties are mandatory in the request body. For example, to email a shared link with minimum info:\nJSON\n{\n    \\\"client\\\": \\\"myClient\\\",\n    \\\"recipientEmails\\\": [\\\"john.doe@acme.com\\\", \\\"joe.bloggs@acme.com\\\"]\n}\n\nA plain text message property can be optionally provided in the request body to customise the sent email.\nAlso, a locale property can be optionally provided in the request body to send the emails in a particular language (if the locale is supported by Alfresco).\nFor example, to email a shared link with a messages and a locale:\nJSON\n{\n    \\\"client\\\": \\\"myClient\\\",\n    \\\"recipientEmails\\\": [\\\"john.doe@acme.com\\\", \\\"joe.bloggs@acme.com\\\"],\n    \\\"message\\\": \\\"myMessage\\\",\n    \\\"locale\\\":\\\"en-GB\\\"\n}\n\n**Note:** The client must be registered before you can send a shared link email. See [server documentation]. However, out-of-the-box\n share is registered as a default client, so you could pass **share** as the client name:\nJSON\n{\n    \\\"client\\\": \\\"share\\\",\n    \\\"recipientEmails\\\": [\\\"john.doe@acme.com\\\"]\n}\n\n    *\n    * @param sharedId The identifier of a shared link to a file.\n    * @param sharedLinkBodyEmail The shared link email to send.\n    * @return Promise<{}>\n    */\n    emailSharedLink(sharedId: string, sharedLinkBodyEmail: SharedLinkBodyEmail): Promise<any> {\n\n        throwIfNotDefined(sharedId, 'sharedId');\n        throwIfNotDefined(sharedLinkBodyEmail, 'sharedLinkBodyEmail');\n\n        const postBody = sharedLinkBodyEmail;\n\n        const pathParams = {\n            'sharedId': sharedId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/shared-links/{sharedId}/email', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Get a shared link\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets minimal information for the file with shared link identifier **sharedId**.\n\n**Note:** No authentication is required to call this endpoint.\n\n    *\n    * @param sharedId The identifier of a shared link to a file.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SharedLinkEntry>\n    */\n    getSharedLink(sharedId: string, opts?: any): Promise<SharedLinkEntry> {\n\n        throwIfNotDefined(sharedId, 'sharedId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'sharedId': sharedId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/shared-links/{sharedId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SharedLinkEntry);\n    }\n/**\n    * Get shared link content\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the content of the file with shared link identifier **sharedId**.\n\n**Note:** No authentication is required to call this endpoint.\n\n    *\n    * @param sharedId The identifier of a shared link to a file.\n    * @param opts Optional parameters\n    * @param opts.attachment **true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n (default to true)\n    * @param opts.ifModifiedSince Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, Wed, 09 Mar 2016 16:56:34 GMT.\n\n    * @param opts.range The Range header indicates the part of a document that the server should return.\nSingle part request supported, for example: bytes=1-10.\n\n    * @return Promise<Blob>\n    */\n    getSharedLinkContent(sharedId: string, opts?: any): Promise<Blob> {\n\n        throwIfNotDefined(sharedId, 'sharedId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'sharedId': sharedId\n        };\n\n        const queryParams = {\n            'attachment': opts['attachment']\n        };\n\n        const headerParams = {\n            'If-Modified-Since': opts['ifModifiedSince'],            'Range': opts['range']\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/octet-stream'];\n\n        return this.apiClient.callApi(\n            '/shared-links/{sharedId}/content', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , 'blob');\n    }\n/**\n    * Get shared link rendition information\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets rendition information for the file with shared link identifier **sharedId**.\n\nThis API method returns rendition information where the rendition status is CREATED,\nwhich means the rendition is available to view/download.\n\n**Note:** No authentication is required to call this endpoint.\n\n    *\n    * @param sharedId The identifier of a shared link to a file.\n    * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*.\n    * @return Promise<RenditionEntry>\n    */\n    getSharedLinkRendition(sharedId: string, renditionId: string): Promise<RenditionEntry> {\n\n        throwIfNotDefined(sharedId, 'sharedId');\n        throwIfNotDefined(renditionId, 'renditionId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'sharedId': sharedId,            'renditionId': renditionId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/shared-links/{sharedId}/renditions/{renditionId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , RenditionEntry);\n    }\n/**\n    * Get shared link rendition content\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the rendition content for file with shared link identifier **sharedId**.\n\n**Note:** No authentication is required to call this endpoint.\n\n    *\n    * @param sharedId The identifier of a shared link to a file.\n    * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*.\n    * @param opts Optional parameters\n    * @param opts.attachment **true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n (default to true)\n    * @param opts.ifModifiedSince Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, Wed, 09 Mar 2016 16:56:34 GMT.\n\n    * @param opts.range The Range header indicates the part of a document that the server should return.\nSingle part request supported, for example: bytes=1-10.\n\n    * @return Promise<Blob>\n    */\n    getSharedLinkRenditionContent(sharedId: string, renditionId: string, opts?: any): Promise<Blob> {\n\n        throwIfNotDefined(sharedId, 'sharedId');\n        throwIfNotDefined(renditionId, 'renditionId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'sharedId': sharedId,            'renditionId': renditionId\n        };\n\n        const queryParams = {\n            'attachment': opts['attachment']\n        };\n\n        const headerParams = {\n            'If-Modified-Since': opts['ifModifiedSince'],            'Range': opts['range']\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/octet-stream'];\n\n        return this.apiClient.callApi(\n            '/shared-links/{sharedId}/renditions/{renditionId}/content', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , 'blob');\n    }\n/**\n    * List renditions for a shared link\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of the rendition information for the file with shared link identifier **sharedId**.\n\nThis API method returns rendition information, including the rendition id, for each rendition\nwhere the rendition status is CREATED, which means the rendition is available to view/download.\n\n**Note:** No authentication is required to call this endpoint.\n\n    *\n    * @param sharedId The identifier of a shared link to a file.\n    * @return Promise<RenditionPaging>\n    */\n    listSharedLinkRenditions(sharedId: string): Promise<RenditionPaging> {\n\n        throwIfNotDefined(sharedId, 'sharedId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'sharedId': sharedId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/shared-links/{sharedId}/renditions', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , RenditionPaging);\n    }\n/**\n    * List shared links\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGet a list of links that the current user has read permission on source node.\n\nThe list is ordered in descending modified order.\n\n**Note:** The list of links is eventually consistent so newly created shared links may not appear immediately.\n\n    *\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.where Optionally filter the list by \\\"sharedByUser\\\" userid of person who shared the link (can also use -me-)\n\n*   where=(sharedByUser='jbloggs')\n\n*   where=(sharedByUser='-me-')\n\n    * @param opts.include Returns additional information about the shared link, the following optional fields can be requested:\n* allowableOperations\n* path\n* properties\n* isFavorite\n* aspectNames\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SharedLinkPaging>\n    */\n    listSharedLinks(opts?: any): Promise<SharedLinkPaging> {\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'where': opts['where'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/shared-links', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SharedLinkPaging);\n    }\n\n}\n"]}