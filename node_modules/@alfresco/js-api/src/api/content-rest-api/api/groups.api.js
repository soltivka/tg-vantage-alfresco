"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupsApi = void 0;
const groupEntry_1 = require("../model/groupEntry");
const groupMemberEntry_1 = require("../model/groupMemberEntry");
const groupMemberPaging_1 = require("../model/groupMemberPaging");
const groupPaging_1 = require("../model/groupPaging");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
const alfrescoApiClient_1 = require("../../../alfrescoApiClient");
class GroupsApi extends base_api_1.BaseApi {
    createGroup(groupBodyCreate, opts) {
        (0, assert_1.throwIfNotDefined)(groupBodyCreate, 'groupBodyCreate');
        opts = opts || {};
        const postBody = groupBodyCreate;
        const pathParams = {};
        const queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/groups', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, groupEntry_1.GroupEntry);
    }
    createGroupMembership(groupId, groupMembershipBodyCreate, opts) {
        (0, assert_1.throwIfNotDefined)(groupId, 'groupId');
        (0, assert_1.throwIfNotDefined)(groupMembershipBodyCreate, 'groupMembershipBodyCreate');
        opts = opts || {};
        const postBody = groupMembershipBodyCreate;
        const pathParams = {
            'groupId': groupId
        };
        const queryParams = {
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/groups/{groupId}/members', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, groupMemberEntry_1.GroupMemberEntry);
    }
    deleteGroup(groupId, opts) {
        (0, assert_1.throwIfNotDefined)(groupId, 'groupId');
        opts = opts || {};
        const postBody = null;
        let cascadeDelete = opts['cascade'] ? opts['cascade'] : false;
        const pathParams = {
            'groupId': groupId
        };
        const queryParams = {
            'cascade': cascadeDelete
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/groups/{groupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteGroupMembership(groupId, groupMemberId) {
        (0, assert_1.throwIfNotDefined)(groupId, 'groupId');
        (0, assert_1.throwIfNotDefined)(groupMemberId, 'groupMemberId');
        const postBody = null;
        const pathParams = {
            'groupId': groupId, 'groupMemberId': groupMemberId
        };
        const queryParams = {};
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/groups/{groupId}/members/{groupMemberId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getGroup(groupId, opts) {
        (0, assert_1.throwIfNotDefined)(groupId, 'groupId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'groupId': groupId
        };
        const queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/groups/{groupId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, groupEntry_1.GroupEntry);
    }
    listGroupMemberships(groupId, opts) {
        (0, assert_1.throwIfNotDefined)(groupId, 'groupId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'groupId': groupId
        };
        const queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': (0, alfrescoApiClient_1.buildCollectionParam)(opts['orderBy'], 'csv'),
            'where': opts['where'],
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/groups/{groupId}/members', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, groupMemberPaging_1.GroupMemberPaging);
    }
    listGroupMembershipsForPerson(personId, opts) {
        (0, assert_1.throwIfNotDefined)(personId, 'personId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': (0, alfrescoApiClient_1.buildCollectionParam)(opts['orderBy'], 'csv'),
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'where': opts['where'],
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, groupPaging_1.GroupPaging);
    }
    listGroups(opts) {
        opts = opts || {};
        const postBody = null;
        const pathParams = {};
        const queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': (0, alfrescoApiClient_1.buildCollectionParam)(opts['orderBy'], 'csv'),
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'where': opts['where'],
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, groupPaging_1.GroupPaging);
    }
    updateGroup(groupId, groupBodyUpdate, opts) {
        (0, assert_1.throwIfNotDefined)(groupId, 'groupId');
        (0, assert_1.throwIfNotDefined)(groupBodyUpdate, 'groupBodyUpdate');
        opts = opts || {};
        const postBody = groupBodyUpdate;
        const pathParams = {
            'groupId': groupId
        };
        const queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/groups/{groupId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, groupEntry_1.GroupEntry);
    }
}
exports.GroupsApi = GroupsApi;
//# sourceMappingURL=../../../../../src/api/content-rest-api/api/groups.api.js.map