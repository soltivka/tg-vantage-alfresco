"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.FavoritesApi = void 0;
const favoriteEntry_1 = require("../model/favoriteEntry");
const favoritePaging_1 = require("../model/favoritePaging");
const favoriteSiteEntry_1 = require("../model/favoriteSiteEntry");
const siteEntry_1 = require("../model/siteEntry");
const sitePaging_1 = require("../model/sitePaging");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
const alfrescoApiClient_1 = require("../../../alfrescoApiClient");
class FavoritesApi extends base_api_1.BaseApi {
    createFavorite(personId, favoriteBodyCreate, opts) {
        (0, assert_1.throwIfNotDefined)(personId, 'personId');
        (0, assert_1.throwIfNotDefined)(favoriteBodyCreate, 'favoriteBodyCreate');
        opts = opts || {};
        const postBody = favoriteBodyCreate;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, favoriteEntry_1.FavoriteEntry);
    }
    createSiteFavorite(personId, favoriteSiteBodyCreate, opts) {
        (0, assert_1.throwIfNotDefined)(personId, 'personId');
        (0, assert_1.throwIfNotDefined)(favoriteSiteBodyCreate, 'favoriteSiteBodyCreate');
        opts = opts || {};
        const postBody = favoriteSiteBodyCreate;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorite-sites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, favoriteSiteEntry_1.FavoriteSiteEntry);
    }
    deleteFavorite(personId, favoriteId) {
        (0, assert_1.throwIfNotDefined)(personId, 'personId');
        (0, assert_1.throwIfNotDefined)(favoriteId, 'favoriteId');
        const postBody = null;
        const pathParams = {
            'personId': personId, 'favoriteId': favoriteId
        };
        const queryParams = {};
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorites/{favoriteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteSiteFavorite(personId, siteId) {
        (0, assert_1.throwIfNotDefined)(personId, 'personId');
        (0, assert_1.throwIfNotDefined)(siteId, 'siteId');
        const postBody = null;
        const pathParams = {
            'personId': personId, 'siteId': siteId
        };
        const queryParams = {};
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorite-sites/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getFavorite(personId, favoriteId, opts) {
        (0, assert_1.throwIfNotDefined)(personId, 'personId');
        (0, assert_1.throwIfNotDefined)(favoriteId, 'favoriteId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'personId': personId, 'favoriteId': favoriteId
        };
        const queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorites/{favoriteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, favoriteEntry_1.FavoriteEntry);
    }
    getFavoriteSite(personId, siteId, opts) {
        (0, assert_1.throwIfNotDefined)(personId, 'personId');
        (0, assert_1.throwIfNotDefined)(siteId, 'siteId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'personId': personId, 'siteId': siteId
        };
        const queryParams = {
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorite-sites/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteEntry_1.SiteEntry);
    }
    listFavoriteSitesForPerson(personId, opts) {
        (0, assert_1.throwIfNotDefined)(personId, 'personId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorite-sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, sitePaging_1.SitePaging);
    }
    listFavorites(personId, opts) {
        (0, assert_1.throwIfNotDefined)(personId, 'personId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': (0, alfrescoApiClient_1.buildCollectionParam)(opts['orderBy'], 'csv'),
            'where': opts['where'],
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, favoritePaging_1.FavoritePaging);
    }
}
exports.FavoritesApi = FavoritesApi;
//# sourceMappingURL=../../../../../src/api/content-rest-api/api/favorites.api.js.map