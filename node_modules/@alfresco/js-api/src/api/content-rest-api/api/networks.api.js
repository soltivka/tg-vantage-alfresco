"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworksApi = void 0;
const personNetworkEntry_1 = require("../model/personNetworkEntry");
const personNetworkPaging_1 = require("../model/personNetworkPaging");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
const alfrescoApiClient_1 = require("../../../alfrescoApiClient");
class NetworksApi extends base_api_1.BaseApi {
    getNetwork(networkId, opts) {
        (0, assert_1.throwIfNotDefined)(networkId, 'networkId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'networkId': networkId
        };
        const queryParams = {
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/networks/{networkId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, personNetworkEntry_1.PersonNetworkEntry);
    }
    getNetworkForPerson(personId, networkId, opts) {
        (0, assert_1.throwIfNotDefined)(personId, 'personId');
        (0, assert_1.throwIfNotDefined)(networkId, 'networkId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'personId': personId, 'networkId': networkId
        };
        const queryParams = {
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/networks/{networkId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, personNetworkEntry_1.PersonNetworkEntry);
    }
    listNetworksForPerson(personId, opts) {
        (0, assert_1.throwIfNotDefined)(personId, 'personId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'personId': personId
        };
        const queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/networks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, personNetworkPaging_1.PersonNetworkPaging);
    }
}
exports.NetworksApi = NetworksApi;
//# sourceMappingURL=../../../../../src/api/content-rest-api/api/networks.api.js.map