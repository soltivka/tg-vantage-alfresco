"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditApi = void 0;
const auditApp_1 = require("../model/auditApp");
const auditAppPaging_1 = require("../model/auditAppPaging");
const auditEntryEntry_1 = require("../model/auditEntryEntry");
const auditEntryPaging_1 = require("../model/auditEntryPaging");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
const alfrescoApiClient_1 = require("../../../alfrescoApiClient");
class AuditApi extends base_api_1.BaseApi {
    deleteAuditEntriesForAuditApp(auditApplicationId, where) {
        (0, assert_1.throwIfNotDefined)(auditApplicationId, 'auditApplicationId');
        (0, assert_1.throwIfNotDefined)(where, 'where');
        const postBody = null;
        const pathParams = {
            'auditApplicationId': auditApplicationId
        };
        const queryParams = {
            'where': where
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteAuditEntry(auditApplicationId, auditEntryId) {
        (0, assert_1.throwIfNotDefined)(auditApplicationId, 'auditApplicationId');
        (0, assert_1.throwIfNotDefined)(auditEntryId, 'auditEntryId');
        const postBody = null;
        const pathParams = {
            'auditApplicationId': auditApplicationId, 'auditEntryId': auditEntryId
        };
        const queryParams = {};
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getAuditApp(auditApplicationId, opts) {
        (0, assert_1.throwIfNotDefined)(auditApplicationId, 'auditApplicationId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'auditApplicationId': auditApplicationId
        };
        const queryParams = {
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv'),
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, auditApp_1.AuditApp);
    }
    getAuditEntry(auditApplicationId, auditEntryId, opts) {
        (0, assert_1.throwIfNotDefined)(auditApplicationId, 'auditApplicationId');
        (0, assert_1.throwIfNotDefined)(auditEntryId, 'auditEntryId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'auditApplicationId': auditApplicationId, 'auditEntryId': auditEntryId
        };
        const queryParams = {
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, auditEntryEntry_1.AuditEntryEntry);
    }
    listAuditApps(opts) {
        opts = opts || {};
        const postBody = null;
        const pathParams = {};
        const queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, auditAppPaging_1.AuditAppPaging);
    }
    listAuditEntriesForAuditApp(auditApplicationId, opts) {
        (0, assert_1.throwIfNotDefined)(auditApplicationId, 'auditApplicationId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'auditApplicationId': auditApplicationId
        };
        const queryParams = {
            'skipCount': opts['skipCount'],
            'orderBy': (0, alfrescoApiClient_1.buildCollectionParam)(opts['orderBy'], 'csv'),
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, auditEntryPaging_1.AuditEntryPaging);
    }
    listAuditEntriesForNode(nodeId, opts) {
        (0, assert_1.throwIfNotDefined)(nodeId, 'nodeId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'nodeId': nodeId
        };
        const queryParams = {
            'skipCount': opts['skipCount'],
            'orderBy': (0, alfrescoApiClient_1.buildCollectionParam)(opts['orderBy'], 'csv'),
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/audit-entries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, auditEntryPaging_1.AuditEntryPaging);
    }
    updateAuditApp(auditApplicationId, auditAppBodyUpdate, opts) {
        (0, assert_1.throwIfNotDefined)(auditApplicationId, 'auditApplicationId');
        (0, assert_1.throwIfNotDefined)(auditAppBodyUpdate, 'auditAppBodyUpdate');
        opts = opts || {};
        const postBody = auditAppBodyUpdate;
        const pathParams = {
            'auditApplicationId': auditApplicationId
        };
        const queryParams = {
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, auditApp_1.AuditApp);
    }
}
exports.AuditApi = AuditApi;
//# sourceMappingURL=../../../../../src/api/content-rest-api/api/audit.api.js.map