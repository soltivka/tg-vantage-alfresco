{"version":3,"file":"sites.api.js","sourceRoot":"","sources":["sites.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { SiteBodyCreate } from '../model/siteBodyCreate';\nimport { SiteBodyUpdate } from '../model/siteBodyUpdate';\nimport { SiteContainerEntry } from '../model/siteContainerEntry';\nimport { SiteContainerPaging } from '../model/siteContainerPaging';\nimport { SiteEntry } from '../model/siteEntry';\nimport { SiteMemberEntry } from '../model/siteMemberEntry';\nimport { SiteMemberPaging } from '../model/siteMemberPaging';\nimport { SiteMembershipBodyCreate } from '../model/siteMembershipBodyCreate';\nimport { SiteMembershipBodyUpdate } from '../model/siteMembershipBodyUpdate';\nimport { SiteMembershipRequestBodyCreate } from '../model/siteMembershipRequestBodyCreate';\nimport { SiteMembershipRequestBodyUpdate } from '../model/siteMembershipRequestBodyUpdate';\nimport { SiteMembershipRequestEntry } from '../model/siteMembershipRequestEntry';\nimport { SiteMembershipRequestPaging } from '../model/siteMembershipRequestPaging';\nimport { SiteMembershipRequestWithPersonPaging } from '../model/siteMembershipRequestWithPersonPaging';\nimport { SitePaging } from '../model/sitePaging';\nimport { SiteRoleEntry } from '../model/siteRoleEntry';\nimport { SiteRolePaging } from '../model/siteRolePaging';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\nimport { SiteGroupEntry } from '../model/siteGroupEntry';\nimport { SiteGroupPaging } from '../model/siteGroupPaging';\n\n/**\n* Sites service.\n* @module SitesApi\n*/\nexport class SitesApi extends BaseApi {\n    /**\n    * Approve a site membership request\n    *\n    * Approve a site membership request.\n\n    *\n    * @param siteId The identifier of a site.\n    * @param inviteeId The invitee user name.\n    * @param opts Optional parameters\n    * @param opts.siteMembershipApprovalBody Accepting a request to join, optionally, allows assignment of a role to the user.\n\n    * @return Promise<{}>\n    */\n    approveSiteMembershipRequest(siteId: string, inviteeId: string, opts?: any): Promise<any> {\n\n        throwIfNotDefined(siteId, 'siteId');\n        throwIfNotDefined(inviteeId, 'inviteeId');\n\n        opts = opts || {};\n        const postBody = opts['siteMembershipApprovalBody'];\n\n        const pathParams = {\n            'siteId': siteId,            'inviteeId': inviteeId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}/site-membership-requests/{inviteeId}/approve', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Create a site\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nCreates a default site with the given details.  Unless explicitly specified, the site id will be generated\nfrom the site title. The site id must be unique and only contain alphanumeric and/or dash characters.\n\nNote: the id of a site cannot be updated once the site has been created.\n\nFor example, to create a public site called \\\"Marketing\\\" the following body could be used:\nJSON\n{\n  \\\"title\\\": \\\"Marketing\\\",\n  \\\"visibility\\\": \\\"PUBLIC\\\"\n}\n\nThe creation of the (surf) configuration files required by Share can be skipped via the **skipConfiguration** query parameter.\n\n**Note:** if skipped then such a site will **not** work within Share.\n\nThe addition of the site to the user's site favorites can be skipped via the **skipAddToFavorites** query parameter.\n\nThe creator will be added as a member with Site Manager role.\n\nWhen you create a site, a container called **documentLibrary** is created for you in the new site.\nThis container is the root folder for content stored in the site.\n\n    *\n    * @param siteBodyCreate The site details\n    * @param opts Optional parameters\n    * @param opts.skipConfiguration Flag to indicate whether the Share-specific (surf) configuration files for the site should not be created. (default to false)\n    * @param opts.skipAddToFavorites Flag to indicate whether the site should not be added to the user's site favorites. (default to false)\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SiteEntry>\n    */\n    createSite(siteBodyCreate: SiteBodyCreate, opts?: any): Promise<SiteEntry> {\n\n        throwIfNotDefined(siteBodyCreate, 'siteBodyCreate');\n\n        opts = opts || {};\n        const postBody = siteBodyCreate;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'skipConfiguration': opts['skipConfiguration'],\n            'skipAddToFavorites': opts['skipAddToFavorites'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteEntry);\n    }\n/**\n    * Create a site membership\n    *\n    * Creates a site membership for person **personId** on site **siteId**.\n\nYou can set the **role** to one of four types:\n\n* SiteConsumer\n* SiteCollaborator\n* SiteContributor\n* SiteManager\n\n**Note:** You can create more than one site membership by\nspecifying a list of people in the JSON body like this:\n\nJSON\n[\n  {\n    \\\"role\\\": \\\"SiteConsumer\\\",\n    \\\"id\\\": \\\"joe\\\"\n  },\n  {\n    \\\"role\\\": \\\"SiteConsumer\\\",\n    \\\"id\\\": \\\"fred\\\"\n  }\n]\n\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 2,\n      \\\"hasMoreItems\\\": false,\n      \\\"totalItems\\\": 2,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 100\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n\n    *\n    * @param siteId The identifier of a site.\n    * @param siteMembershipBodyCreate The person to add and their role\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SiteMemberEntry>\n    */\n    createSiteMembership(siteId: string, siteMembershipBodyCreate: SiteMembershipBodyCreate, opts?: any): Promise<SiteMemberEntry> {\n\n        throwIfNotDefined(siteId, 'siteId');\n        throwIfNotDefined(siteMembershipBodyCreate, 'siteMembershipBodyCreate');\n\n        opts = opts || {};\n        const postBody = siteMembershipBodyCreate;\n\n        const pathParams = {\n            'siteId': siteId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}/members', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteMemberEntry);\n    }\n/**\n    * Create a site membership request\n    *\n    * Create a site membership request for yourself on the site with the identifier of **id**, specified in the JSON body.\nThe result of the request differs depending on the type of site.\n\n* For a **public** site, you join the site immediately as a SiteConsumer.\n* For a **moderated** site, your request is added to the site membership request list. The request waits for approval from the Site Manager.\n* You cannot request membership of a **private** site. Members are invited by the site administrator.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n **Note:** You can create site membership requests for more than one site by\nspecifying a list of sites in the JSON body like this:\n\nJSON\n[\n  {\n    \\\"message\\\": \\\"Please can you add me\\\",\n    \\\"id\\\": \\\"test-site-1\\\",\n    \\\"title\\\": \\\"Request for test site 1\\\",\n  },\n  {\n    \\\"message\\\": \\\"Please can you add me\\\",\n    \\\"id\\\": \\\"test-site-2\\\",\n    \\\"title\\\": \\\"Request for test site 2\\\",\n  }\n]\n\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 2,\n      \\\"hasMoreItems\\\": false,\n      \\\"totalItems\\\": 2,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 100\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n\n    *\n    * @param personId The identifier of a person.\n    * @param siteMembershipRequestBodyCreate Site membership request details\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SiteMembershipRequestEntry>\n    */\n    createSiteMembershipRequestForPerson(personId: string, siteMembershipRequestBodyCreate: SiteMembershipRequestBodyCreate, opts?: any): Promise<SiteMembershipRequestEntry> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(siteMembershipRequestBodyCreate, 'siteMembershipRequestBodyCreate');\n\n        opts = opts || {};\n        const postBody = siteMembershipRequestBodyCreate;\n\n        const pathParams = {\n            'personId': personId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/site-membership-requests', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteMembershipRequestEntry);\n    }\n/**\n    * Delete a site\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nDeletes the site with **siteId**.\n\n    *\n    * @param siteId The identifier of a site.\n    * @param opts Optional parameters\n    * @param opts.permanent Flag to indicate whether the site should be permanently deleted i.e. bypass the trashcan. (default to false)\n    * @return Promise<{}>\n    */\n    deleteSite(siteId: string, opts?: any): Promise<any> {\n\n        throwIfNotDefined(siteId, 'siteId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'siteId': siteId\n        };\n\n        const queryParams = {\n            'permanent': opts['permanent']\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Delete a site membership\n    *\n    * Deletes person **personId** as a member of site **siteId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param siteId The identifier of a site.\n    * @param personId The identifier of a person.\n    * @return Promise<{}>\n    */\n    deleteSiteMembership(siteId: string, personId: string): Promise<any> {\n\n        throwIfNotDefined(siteId, 'siteId');\n        throwIfNotDefined(personId, 'personId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'siteId': siteId,            'personId': personId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}/members/{personId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Delete a site membership\n    *\n    * Deletes person **personId** as a member of site **siteId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param personId The identifier of a person.\n    * @param siteId The identifier of a site.\n    * @return Promise<{}>\n    */\n    deleteSiteMembershipForPerson(personId: string, siteId: string): Promise<any> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(siteId, 'siteId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId,            'siteId': siteId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/sites/{siteId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Delete a site membership request\n    *\n    * Deletes the site membership request to site **siteId** for person **personId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param personId The identifier of a person.\n    * @param siteId The identifier of a site.\n    * @return Promise<{}>\n    */\n    deleteSiteMembershipRequestForPerson(personId: string, siteId: string): Promise<any> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(siteId, 'siteId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId,            'siteId': siteId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/site-membership-requests/{siteId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Get a site\n    *\n    * Gets information for site **siteId**.\n\nYou can use the **relations** parameter to include one or more related\nentities in a single response and so reduce network traffic.\n\nThe entity types in Alfresco are organized in a tree structure.\nThe **sites** entity has two children, **containers** and **members**.\nThe following relations parameter returns all the container and member\nobjects related to the site **siteId**:\n\ncontainers,members\n\n    *\n    * @param siteId The identifier of a site.\n    * @param opts Optional parameters\n    * @param opts.relations Use the relations parameter to include one or more related entities in a single response.\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SiteEntry>\n    */\n    getSite(siteId: string, opts?: any): Promise<SiteEntry> {\n\n        throwIfNotDefined(siteId, 'siteId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'siteId': siteId\n        };\n\n        const queryParams = {\n            'relations': buildCollectionParam(opts['relations'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteEntry);\n    }\n/**\n    * Get a site container\n    *\n    * Gets information on the container **containerId** in site **siteId**.\n    *\n    * @param siteId The identifier of a site.\n    * @param containerId The unique identifier of a site container.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SiteContainerEntry>\n    */\n    getSiteContainer(siteId: string, containerId: string, opts?: any): Promise<SiteContainerEntry> {\n\n        throwIfNotDefined(siteId, 'siteId');\n        throwIfNotDefined(containerId, 'containerId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'siteId': siteId,            'containerId': containerId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}/containers/{containerId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteContainerEntry);\n    }\n/**\n    * Get a site membership\n    *\n    * Gets site membership information for person **personId** on site **siteId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param siteId The identifier of a site.\n    * @param personId The identifier of a person.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SiteMemberEntry>\n    */\n    getSiteMembership(siteId: string, personId: string, opts?: any): Promise<SiteMemberEntry> {\n\n        throwIfNotDefined(siteId, 'siteId');\n        throwIfNotDefined(personId, 'personId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'siteId': siteId,            'personId': personId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}/members/{personId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteMemberEntry);\n    }\n/**\n    * Get a site membership\n    *\n    * Gets site membership information for person **personId** on site **siteId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param personId The identifier of a person.\n    * @param siteId The identifier of a site.\n    * @return Promise<SiteRoleEntry>\n    */\n    getSiteMembershipForPerson(personId: string, siteId: string): Promise<SiteRoleEntry> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(siteId, 'siteId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId,            'siteId': siteId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/sites/{siteId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteRoleEntry);\n    }\n/**\n    * Get a site membership request\n    *\n    * Gets the site membership request for site **siteId** for person **personId**, if one exists.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param personId The identifier of a person.\n    * @param siteId The identifier of a site.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SiteMembershipRequestEntry>\n    */\n    getSiteMembershipRequestForPerson(personId: string, siteId: string, opts?: any): Promise<SiteMembershipRequestEntry> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(siteId, 'siteId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId,            'siteId': siteId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/site-membership-requests/{siteId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteMembershipRequestEntry);\n    }\n/**\n    * Get site membership requests\n    *\n    * Get the list of site membership requests the user can action.\n\nYou can use the **where** parameter to filter the returned site membership requests by **siteId**. For example:\n\n(siteId=mySite)\n\nThe **where** parameter can also be used to filter by ***personId***. For example:\n\nwhere=(personId=person)\n\nThis may be combined with the siteId filter, as shown below:\n\nwhere=(siteId=mySite AND personId=person))\n\n    *\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.where A string to restrict the returned objects by using a predicate.\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SiteMembershipRequestWithPersonPaging>\n    */\n    getSiteMembershipRequests(opts?: any): Promise<SiteMembershipRequestWithPersonPaging> {\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'where': opts['where'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/site-membership-requests', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteMembershipRequestWithPersonPaging);\n    }\n/**\n    * List site containers\n    *\n    * Gets a list of containers for the site **siteId**.\n    *\n    * @param siteId The identifier of a site.\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SiteContainerPaging>\n    */\n    listSiteContainers(siteId: string, opts?: any): Promise<SiteContainerPaging> {\n\n        throwIfNotDefined(siteId, 'siteId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'siteId': siteId\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}/containers', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteContainerPaging);\n    }\n/**\n    * List site membership requests\n    *\n    * Gets a list of the current site membership requests for person **personId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param personId The identifier of a person.\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SiteMembershipRequestPaging>\n    */\n    listSiteMembershipRequestsForPerson(personId: string, opts?: any): Promise<SiteMembershipRequestPaging> {\n\n        throwIfNotDefined(personId, 'personId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/site-membership-requests', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteMembershipRequestPaging);\n    }\n/**\n    * List site memberships\n    *\n    * Gets a list of site memberships for site **siteId**.\n    *\n    * @param siteId The identifier of a site.\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.fields A list of field names.\n\n **Note:** where class filter is available in Alfresco 7.0.0 and newer versions.\n Optionally filter the list.\n *   where=(isMemberOfGroup=false|true)\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SiteMemberPaging>\n    */\n    listSiteMemberships(siteId: string, opts?: any): Promise<SiteMemberPaging> {\n\n        throwIfNotDefined(siteId, 'siteId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'siteId': siteId\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'where': opts['where'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}/members', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteMemberPaging);\n    }\n/**\n    * List site memberships\n    *\n    * Gets a list of site membership information for person **personId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\nYou can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.\n\nExample to filter by **visibility**, use any one of:\n\n(visibility='PRIVATE')\n(visibility='PUBLIC')\n(visibility='MODERATED')\n\nExample to filter by site **preset**:\n\n(preset='site-dashboard')\n\nThe default sort order for the returned list is for sites to be sorted by ascending title.\nYou can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:\n* id\n* title\n* role\n\n    *\n    * @param personId The identifier of a person.\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n    * @param opts.relations Use the relations parameter to include one or more related entities in a single response.\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @param opts.where A string to restrict the returned objects by using a predicate.\n    * @return Promise<SiteRolePaging>\n    */\n    listSiteMembershipsForPerson(personId: string, opts?: any): Promise<SiteRolePaging> {\n\n        throwIfNotDefined(personId, 'personId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'personId': personId\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),\n            'relations': buildCollectionParam(opts['relations'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv'),\n            'where': opts['where']\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/sites', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteRolePaging);\n    }\n/**\n    * List sites\n    *\n    * Gets a list of sites in this repository.\n\nYou can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.\n\nExample to filter by **visibility**, use any one of:\n\n(visibility='PRIVATE')\n(visibility='PUBLIC')\n(visibility='MODERATED')\n\nExample to filter by site **preset**:\n\n(preset='site-dashboard')\n\nThe default sort order for the returned list is for sites to be sorted by ascending title.\nYou can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:\n* id\n* title\n* description\n\nYou can use the **relations** parameter to include one or more related\nentities in a single response and so reduce network traffic.\n\nThe entity types in Alfresco are organized in a tree structure.\nThe **sites** entity has two children, **containers** and **members**.\nThe following relations parameter returns all the container and member\nobjects related to each site:\n\ncontainers,members\n\n    *\n    * @param opts Optional parameters\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.orderBy A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n\n    * @param opts.relations Use the relations parameter to include one or more related entities in a single response.\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @param opts.where A string to restrict the returned objects by using a predicate.\n    * @return Promise<SitePaging>\n    */\n    listSites(opts?: any): Promise<SitePaging> {\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),\n            'relations': buildCollectionParam(opts['relations'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv'),\n            'where': opts['where']\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SitePaging);\n    }\n/**\n    * Reject a site membership request\n    *\n    * Reject a site membership request.\n\n    *\n    * @param siteId The identifier of a site.\n    * @param inviteeId The invitee user name.\n    * @param opts Optional parameters\n    * @param opts.siteMembershipRejectionBody Rejecting a request to join, optionally, allows the inclusion of comment.\n\n    * @return Promise<{}>\n    */\n    rejectSiteMembershipRequest(siteId: string, inviteeId: string, opts?: any): Promise<any> {\n\n        throwIfNotDefined(siteId, 'siteId');\n        throwIfNotDefined(inviteeId, 'inviteeId');\n\n        opts = opts || {};\n        const postBody = opts['siteMembershipRejectionBody'];\n\n        const pathParams = {\n            'siteId': siteId,            'inviteeId': inviteeId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}/site-membership-requests/{inviteeId}/reject', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n/**\n    * Update a site\n    *\n    * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nUpdate the details for the given site **siteId**. Site Manager or otherwise a\n(site) admin can update title, description or visibility.\n\nNote: the id of a site cannot be updated once the site has been created.\n\n    *\n    * @param siteId The identifier of a site.\n    * @param siteBodyUpdate The site information to update.\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SiteEntry>\n    */\n    updateSite(siteId: string, siteBodyUpdate: SiteBodyUpdate, opts?: any): Promise<SiteEntry> {\n\n        throwIfNotDefined(siteId, 'siteId');\n        throwIfNotDefined(siteBodyUpdate, 'siteBodyUpdate');\n\n        opts = opts || {};\n        const postBody = siteBodyUpdate;\n\n        const pathParams = {\n            'siteId': siteId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteEntry);\n    }\n/**\n    * Update a site membership\n    *\n    * Update the membership of person **personId** in site **siteId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\nYou can set the **role** to one of four types:\n\n* SiteConsumer\n* SiteCollaborator\n* SiteContributor\n* SiteManager\n\n    *\n    * @param siteId The identifier of a site.\n    * @param personId The identifier of a person.\n    * @param siteMembershipBodyUpdate The persons new role\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SiteMemberEntry>\n    */\n    updateSiteMembership(siteId: string, personId: string, siteMembershipBodyUpdate: SiteMembershipBodyUpdate, opts?: any): Promise<SiteMemberEntry> {\n\n        throwIfNotDefined(siteId, 'siteId');\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(siteMembershipBodyUpdate, 'siteMembershipBodyUpdate');\n\n        opts = opts || {};\n        const postBody = siteMembershipBodyUpdate;\n\n        const pathParams = {\n            'siteId': siteId,            'personId': personId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}/members/{personId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteMemberEntry);\n    }\n/**\n    * Update a site membership request\n    *\n    * Updates the message for the site membership request to site **siteId** for person **personId**.\n\nYou can use the -me- string in place of <personId> to specify the currently authenticated user.\n\n    *\n    * @param personId The identifier of a person.\n    * @param siteId The identifier of a site.\n    * @param siteMembershipRequestBodyUpdate The new message to display\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<SiteMembershipRequestEntry>\n    */\n    updateSiteMembershipRequestForPerson(personId: string, siteId: string, siteMembershipRequestBodyUpdate: SiteMembershipRequestBodyUpdate, opts?: any): Promise<SiteMembershipRequestEntry> {\n\n        throwIfNotDefined(personId, 'personId');\n        throwIfNotDefined(siteId, 'siteId');\n        throwIfNotDefined(siteMembershipRequestBodyUpdate, 'siteMembershipRequestBodyUpdate');\n\n        opts = opts || {};\n        const postBody = siteMembershipRequestBodyUpdate;\n\n        const pathParams = {\n            'personId': personId,            'siteId': siteId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/people/{personId}/site-membership-requests/{siteId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteMembershipRequestEntry);\n    }\n\n    /**\n     * Create a site membership for group\n     *\n     * Creates a site membership for group **groupId** on site **siteId**.\n\n     **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n     You can set the **role** to one of four types:\n     * SiteConsumer\n     * SiteCollaborator\n     * SiteContributor\n     * SiteManager\n     **Note:** You can create more than one site membership by\n     specifying a list of group in the JSON body like this:\n\n     ```JSON\n     [\n     {\n             \"role\": \"SiteConsumer\",\n             \"id\": \"authorityId\"\n           },\n     {\n             \"role\": \"SiteConsumer\",\n             \"id\": \"authorityId\"\n           }\n     ]\n     ```\n     If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n     ```JSON\n     {\n            \"list\": {\n              \"pagination\": {\n                \"count\": 2,\n                \"hasMoreItems\": false,\n                \"totalItems\": 2,\n                \"skipCount\": 0,\n                \"maxItems\": 100\n              },\n              \"entries\": [\n                {\n                  \"entry\": {\n                    ...\n                  }\n                },\n                {\n                  \"entry\": {\n                    ...\n                  }\n                }\n              ]\n            }\n     }\n     *\n     * @param siteId The identifier of a site.\n     * @param siteMembershipBodyCreate The group to add and it role\n     * @param opts Optional parameters\n     * @return Promise<SiteGroupEntry>\n     */\n    createSiteGroupMembership(siteId: string, siteMembershipBodyCreate: SiteMembershipBodyCreate, opts?: any): Promise<SiteGroupEntry> {\n\n        throwIfNotDefined(siteId, 'siteId');\n        throwIfNotDefined(siteMembershipBodyCreate, 'siteMembershipBodyCreate');\n\n        opts = opts || {};\n        const postBody = siteMembershipBodyCreate;\n\n        const pathParams = {\n            'siteId': siteId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {};\n        const formParams = {};\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}/group-members', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, SiteGroupEntry);\n    }\n\n    /**\n     * List group membership for site\n     *\n     * Gets a list of group membership for site **siteId**.\n\n     **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\n     * @param siteId The identifier of a site.\n     * @param opts Optional parameters\n     * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\n     If not supplied then the default value is 0.\n     (default to 0)\n     * @param opts.maxItems The maximum number of items to return in the list.\n     If not supplied then the default value is 100.\n     (default to 100)\n     * @return Promise<SiteGroupPaging>\n     */\n    listSiteGroups(siteId: string, opts?: any): Promise<SiteGroupPaging> {\n\n        throwIfNotDefined(siteId, 'siteId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'siteId': siteId\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}/group-members', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteGroupPaging);\n    }\n\n    /**\n     * Get information about site membership of group\n     **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\n     Gets site membership information for group **groupId** on site **siteId**.\n\n     *\n     * @param siteId The identifier of a site.\n     * @param groupId The authorityId of a group.\n     * @param opts Optional parameters\n     * @return Promise<SiteGroupEntry>\n     */\n    getSiteGroupMembership(siteId: string, groupId: string, opts?: any): Promise<SiteGroupEntry> {\n\n        throwIfNotDefined(siteId, 'siteId');\n        throwIfNotDefined(groupId, 'groupId');\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'siteId': siteId,\n            'groupId': groupId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}/group-members/{groupId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteGroupEntry);\n    }\n\n    /**\n     * Update site membership of group\n     *\n     * Update the membership of person **groupId** in site **siteId**.\n\n     **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\n     You can set the **role** to one of four types:\n     * SiteConsumer\n     * SiteCollaborator\n     * SiteContributor\n     * SiteManager\n\n     *\n     * @param siteId The identifier of a site.\n     * @param groupId The authorityId of a group.\n     * @param siteMembershipBodyUpdate The group new role\n     * @param opts Optional parameters\n\n     * @return Promise<SiteGroupEntry>\n     */\n    updateSiteGroupMembership(siteId: string, groupId: string, siteMembershipBodyUpdate: SiteMembershipBodyUpdate, opts?: any): Promise<SiteGroupEntry> {\n\n        throwIfNotDefined(siteId, 'siteId');\n        throwIfNotDefined(groupId, 'groupId');\n        throwIfNotDefined(siteMembershipBodyUpdate, 'siteMembershipBodyUpdate');\n\n        opts = opts || {};\n        const postBody = siteMembershipBodyUpdate;\n\n        const pathParams = {\n            'siteId': siteId,\n            'groupId': groupId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}/group-members/{groupId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , SiteGroupEntry);\n    }\n\n    /**\n     * Delete a group membership for site\n     *\n     * Deletes group **groupId** as a member of site **siteId**.\n\n     * @param siteId The identifier of a site.\n     * @param groupId The authorityId of a group.\n     * @return Promise<{}>\n     */\n    deleteSiteGroupMembership(siteId: string, groupId: string): Promise<any> {\n\n        throwIfNotDefined(siteId, 'siteId');\n        throwIfNotDefined(groupId, 'groupId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'siteId': siteId,\n            'groupId': groupId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/sites/{siteId}/group-members/{groupId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n}\n"]}