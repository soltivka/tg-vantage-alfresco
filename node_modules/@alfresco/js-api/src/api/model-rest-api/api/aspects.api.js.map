{"version":3,"file":"aspects.api.js","sourceRoot":"","sources":["aspects.api.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;;AAEF,sDAAmD;AACnD,wDAAqD;AACrD,yCAAqC;AACrC,4CAAoD;AACpD,kEAAkE;AAMlE,MAAa,UAAW,SAAQ,kBAAO;IAWnC,SAAS,CAAC,QAAgB;QAEtB,IAAA,0BAAiB,EAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAExC,MAAM,QAAQ,GAAS,IAAI,CAAC;QAE5B,MAAM,UAAU,GAAG;YACf,UAAU,EAAE,QAAQ;SACvB,CAAC;QAEF,MAAM,WAAW,GAAG,EACnB,CAAC;QAEF,MAAM,YAAY,GAAG,EAEpB,CAAC;QACF,MAAM,UAAU,GAAG,EAClB,CAAC;QAEF,MAAM,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC1C,MAAM,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,qBAAqB,EAAE,KAAK,EAC5B,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAG,yBAAW,CAAC,CAAC;IAC7C,CAAC;IAqGD,WAAW,CAAC,IAAU;QAElB,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,MAAM,QAAQ,GAAS,IAAI,CAAC;QAE5B,MAAM,UAAU,GAAG,EAElB,CAAC;QAEF,MAAM,WAAW,GAAG;YAChB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC;YACtB,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC;YAC9B,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC;YAC5B,SAAS,EAAE,IAAA,wCAAoB,EAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC;SAC1D,CAAC;QAEF,MAAM,YAAY,GAAG,EAEpB,CAAC;QACF,MAAM,UAAU,GAAG,EAClB,CAAC;QAEF,MAAM,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC1C,MAAM,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,UAAU,EAAE,KAAK,EACjB,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAC3D,YAAY,EAAE,OAAO,EAAG,2BAAY,CAAC,CAAC;IAC9C,CAAC;CAEJ;AAzKD,gCAyKC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { AspectEntry } from '../model/aspectEntry';\nimport { AspectPaging } from '../model/aspectPaging';\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\n\n/**\n* Aspects service.\n* @module AspectsApi\n*/\nexport class AspectsApi extends BaseApi {\n    /**\n    * Get an aspect\n    *\n    * **Note:** This is available in Alfresco 7.0.0 and newer versions.\nGet information for aspect **aspectId**.\n\n    *\n    * @param aspectId The Qname of an aspect(prefix:name) e.g 'cm:title'\n    * @return Promise<AspectEntry>\n    */\n    getAspect(aspectId: string): Promise<AspectEntry> {\n\n        throwIfNotDefined(aspectId, 'aspectId');\n\n        const postBody: null = null;\n\n        const pathParams = {\n            'aspectId': aspectId\n        };\n\n        const queryParams = {\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/aspects/{aspectId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , AspectEntry);\n    }\n/**\n    * List aspects\n    *\n    * **Note:** This is available in Alfresco 7.0.0 and newer versions.\n\nGets a list of aspects from the data dictionary. The System aspects will be ignored by default.\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 0,\n      \\\"hasMoreItems\\\": true,\n      \\\"totalItems\\\": 0,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 0\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          \\\"associations\\\": [],\n          \\\"mandatoryAspects\\\": [],\n          \\\"includedInSupertypeQuery\\\": true,\n          \\\"description\\\": \\\"Titled\\\",\n          \\\"isContainer\\\": false,\n          \\\"model\\\": {\n              \\\"id\\\": \\\"cm:contentmodel\\\",\n              \\\"author\\\": \\\"Alfresco\\\",\n              \\\"description\\\": \\\"Alfresco Content Domain Model\\\",\n              \\\"namespaceUri\\\": \\\"http://www.alfresco.org/model/content/1.0\\\",\n              \\\"namespacePrefix\\\": \\\"cm\\\"\n          },\n          \\\"id\\\": \\\"cm:titled\\\",\n          \\\"title\\\": \\\"Titled\\\",\n          \\\"properties\\\": [\n            {\n              \\\"id\\\": \\\"cm:title\\\",\n              \\\"title\\\": \\\"Title\\\",\n              \\\"description\\\": \\\"Content Title\\\",\n              \\\"dataType\\\": \\\"d:mltext\\\",\n              \\\"isMultiValued\\\": false,\n              \\\"isMandatory\\\": false,\n              \\\"isMandatoryEnforced\\\": false,\n              \\\"isProtected\\\": false\n            },\n            {\n              ...\n            }\n          ]\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n    ]\n  }\n}\n\n    *\n    * @param opts Optional parameters\n    * @param opts.where Optionally filter the list. Here are some examples:\n\nAn aspect should represented in the following format(prefix:name). e.g 'cm:title'.\n\nThe following where clause will only return aspects from the namespace1:model and namespace2:model.\n\n  where=(modelId in ('namespace1:model','namespace2:model'))\n  where=(modelId in ('namespace1:model INCLUDESUBASPECTS','namespace2:model'))\n\nThe following where clause will only return sub aspects for the given parents.\n\n  where=(parentId in ('namespace1:parent','namespace2:parent'))\n\nThe following where clause will only return aspects that match the pattern.\n\n  where=(namespaceUri matches('http://www.alfresco.*'))\n\nThe following where clause will only return aspects that don't match the pattern.\n\n  where=(not namespaceUri matches('http://www.alfresco.*'))\n\n    * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n (default to 0)\n    * @param opts.maxItems The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n (default to 100)\n    * @param opts.include Returns additional information about the aspect. The following optional fields can be requested:\n* properties\n* mandatoryAspects\n* associations\n\n    * @return Promise<AspectPaging>\n    */\n    listAspects(opts?: any): Promise<AspectPaging> {\n\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n\n        };\n\n        const queryParams = {\n            'where': opts['where'],\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'include': buildCollectionParam(opts['include'], 'csv')\n        };\n\n        const headerParams = {\n\n        };\n        const formParams = {\n        };\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/aspects', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , AspectPaging);\n    }\n\n}\n"]}