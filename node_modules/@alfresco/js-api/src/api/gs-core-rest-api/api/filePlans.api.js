"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilePlansApi = void 0;
const filePlanEntry_1 = require("../model/filePlanEntry");
const recordCategoryEntry_1 = require("../model/recordCategoryEntry");
const recordCategoryPaging_1 = require("../model/recordCategoryPaging");
const base_api_1 = require("./base.api");
const alfrescoApiClient_1 = require("../../../alfrescoApiClient");
const assert_1 = require("../../../assert");
class FilePlansApi extends base_api_1.BaseApi {
    createFilePlanCategories(filePlanId, nodeBodyCreate, opts) {
        (0, assert_1.throwIfNotDefined)(filePlanId, 'filePlanId');
        (0, assert_1.throwIfNotDefined)(nodeBodyCreate, 'nodeBodyCreate');
        opts = opts || {};
        let postBody = nodeBodyCreate;
        let pathParams = {
            'filePlanId': filePlanId
        };
        let queryParams = {
            'autoRename': opts['autoRename'],
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json', 'multipart/form-data'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/file-plans/{filePlanId}/categories', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, recordCategoryEntry_1.RecordCategoryEntry);
    }
    getFilePlan(filePlanId, opts) {
        (0, assert_1.throwIfNotDefined)(filePlanId, 'filePlanId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'filePlanId': filePlanId
        };
        let queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/file-plans/{filePlanId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, filePlanEntry_1.FilePlanEntry);
    }
    getFilePlanCategories(filePlanId, opts) {
        (0, assert_1.throwIfNotDefined)(filePlanId, 'filePlanId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'filePlanId': filePlanId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'includeSource': opts['includeSource'],
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/file-plans/{filePlanId}/categories', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, recordCategoryPaging_1.RecordCategoryPaging);
    }
    updateFilePlan(filePlanId, filePlanBodyUpdate, opts) {
        (0, assert_1.throwIfNotDefined)(filePlanId, 'filePlanId');
        (0, assert_1.throwIfNotDefined)(filePlanBodyUpdate, 'filePlanBodyUpdate');
        opts = opts || {};
        let postBody = filePlanBodyUpdate;
        let pathParams = {
            'filePlanId': filePlanId
        };
        let queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/file-plans/{filePlanId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, filePlanEntry_1.FilePlanEntry);
    }
}
exports.FilePlansApi = FilePlansApi;
//# sourceMappingURL=../../../../../src/api/gs-core-rest-api/api/filePlans.api.js.map