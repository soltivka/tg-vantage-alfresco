{"version":3,"file":"transferContainers.api.js","sourceRoot":"","sources":["transferContainers.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { TransferContainerAssociationPaging } from '../model/transferContainerAssociationPaging';\nimport { TransferContainerBodyUpdate } from '../model/transferContainerBodyUpdate';\nimport { TransferContainerEntry } from '../model/transferContainerEntry';\nimport { BaseApi } from './base.api';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Transfercontainers service.\n* @module TransferContainersApi\n*/\nexport class TransferContainersApi extends BaseApi {\n    /**\n    * Get a transfer container\n    *\n    * Gets information for transfer container **transferContainerId**\n\nMandatory fields and the transfer container's aspects and properties are returned by default.\n\nYou can use the **include** parameter (include=allowableOperations) to return additional information.\n\n    *\n    * @param transferContainerId The identifier of a transfer container. You can also use the -transfers- alias.\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about the transfer container. Any optional field from the response model can be requested. For example:\n* allowableOperations\n* path\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<TransferContainerEntry>\n    */\n    getTransferContainer(transferContainerId: string, opts?: any): Promise<TransferContainerEntry> {\n        throwIfNotDefined(transferContainerId, 'transferContainerId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'transferContainerId': transferContainerId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/transfer-containers/{transferContainerId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TransferContainerEntry);\n    }\n    /**\n        * List transfer container's children\n        *\n        * Returns a list of transfers.\n\n    Minimal information for each child is returned by default.\n\n    You can use the **include** parameter (include=allowableOperations) to return additional information.\n\n        *\n        * @param transferContainerId The identifier of a transfer container. You can also use the -transfers- alias.\n        * @param opts Optional parameters\n        * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\n        * @param opts.maxItems The maximum number of items to return in the list.\n        * @param opts.include Returns additional information about the transfer folders. Any optional field from the response model can be requested. For example:\n    * allowableOperations\n    * aspectNames\n    * properties\n    * transferPDFIndicator\n    * transferLocation\n    * transferAccessionIndicator\n\n        * @param opts.includeSource Also include **source** (in addition to **entries**) with folder information on the specified parent **transferContainerId**.\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @return Promise<TransferContainerAssociationPaging>\n        */\n    listTransfers(transferContainerId: string, opts?: any): Promise<TransferContainerAssociationPaging> {\n        throwIfNotDefined(transferContainerId, 'transferContainerId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'transferContainerId': transferContainerId\n        };\n\n        let queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'includeSource': opts['includeSource'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/transfer-containers/{transferContainerId}/transfers', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TransferContainerAssociationPaging);\n    }\n    /**\n        * Update transfer container\n        *\n        * Updates the transfer container **transferContainerId**. For example, you can rename transfer container:\n    JSON\n    {\n      \\\"name\\\":\\\"My new name\\\"\n    }\n\n    You can also set or update description and title properties:\n    JSON\n    {\n      \\\"properties\\\":\n        {\n           \\\"cm:description\\\": \\\"New Description\\\",\n           \\\"cm:title\\\":\\\"New Title\\\"\n        }\n    }\n\n    **Note:** Currently there is no optimistic locking for updates, so they are applied in \\\"last one wins\\\" order.\n\n        *\n        * @param transferContainerId The identifier of a transfer container. You can also use the -transfers- alias.\n        * @param nodeBodyUpdate The node information to update.\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the transfer container. Any optional field from the response model can be requested. For example:\n    * allowableOperations\n    * path\n\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @return Promise<TransferContainerEntry>\n        */\n    updateTransferContainer(transferContainerId: string, nodeBodyUpdate: TransferContainerBodyUpdate, opts?: any): Promise<TransferContainerEntry> {\n        throwIfNotDefined(transferContainerId, 'transferContainerId');\n        throwIfNotDefined(nodeBodyUpdate, 'nodeBodyUpdate');\n\n        opts = opts || {};\n        let postBody = nodeBodyUpdate;\n\n        let pathParams = {\n            'transferContainerId': transferContainerId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/transfer-containers/{transferContainerId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, TransferContainerEntry);\n    }\n\n}\n"]}