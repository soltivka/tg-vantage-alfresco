{"version":3,"file":"records.api.js","sourceRoot":"","sources":["records.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { FilePlanComponentBodyUpdate } from '../model/filePlanComponentBodyUpdate';\nimport { RecordEntry } from '../model/recordEntry';\nimport { RequestBodyFile } from '../model/requestBodyFile';\nimport { BaseApi } from './base.api';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Records service.\n* @module RecordsApi\n*/\nexport class RecordsApi extends BaseApi {\n    /**\n    * Complete a record\n    *\n    * Completes the record **recordId**.\n\n    *\n    * @param recordId The identifier of a record.\n    * @param opts Optional parameters\n    * @param opts.include Returns additional information about the record. Any optional field from the response model can be requested. For example:\n* allowableOperations\n* content\n* isCompleted\n* path\n\n    * @param opts.fields A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n\n    * @return Promise<RecordEntry>\n    */\n    completeRecord(recordId: string, opts?: any): Promise<RecordEntry> {\n        throwIfNotDefined(recordId, 'recordId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'recordId': recordId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/records/{recordId}/complete', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RecordEntry);\n    }\n    /**\n        * Delete a record\n        *\n        * Deletes the record **recordId**. Deleted file plan components cannot be recovered, they are deleted permanently.\n\n        *\n        * @param recordId The identifier of a record.\n        * @return Promise<{}>\n        */\n    deleteRecord(recordId: string): Promise<any> {\n        throwIfNotDefined(recordId, 'recordId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'recordId': recordId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/records/{recordId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * File a record\n        *\n        * Files the record **recordId** in the target record folder.\n\n    You need to specify the target record folder by providing its id **targetParentId**\n\n    If the record is already filed, a link to the target record folder is created.\n\n    You can use the **include** parameter (include=allowableOperations) to return additional information.\n\n        *\n        * @param recordId The identifier of a record.\n        * @param nodeBodyFile The target record folder id\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the record. Any optional field from the response model can be requested. For example:\n    * allowableOperations\n    * content\n    * isCompleted\n    * path\n\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @return Promise<RecordEntry>\n        */\n    fileRecord(recordId: string, nodeBodyFile: RequestBodyFile, opts?: any): Promise<RecordEntry> {\n        throwIfNotDefined(recordId, 'recordId');\n        throwIfNotDefined(nodeBodyFile, 'nodeBodyFile');\n\n        opts = opts || {};\n        let postBody = nodeBodyFile;\n\n        let pathParams = {\n            'recordId': recordId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/records/{recordId}/file', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RecordEntry);\n    }\n    /**\n        * Get a record\n        *\n        * Gets information for record **recordId**\n\n    Mandatory fields and the record's aspects and properties are returned by default.\n\n    You can use the **include** parameter (include=allowableOperations) to return additional information.\n\n        *\n        * @param recordId The identifier of a record.\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the record. Any optional field from the response model can be requested. For example:\n    * allowableOperations\n    * content\n    * isCompleted\n    * path\n\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @return Promise<RecordEntry>\n        */\n    getRecord(recordId: string, opts?: any): Promise<RecordEntry> {\n        throwIfNotDefined(recordId, 'recordId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'recordId': recordId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/records/{recordId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RecordEntry);\n    }\n    /**\n        * Get record content\n        *\n        *\n    Gets the content of the record with identifier **recordId**.\n\n        *\n        * @param recordId The identifier of a record.\n        * @param opts Optional parameters\n        * @param opts.attachment **true** enables a web browser to download the file as an attachment.\n    **false** means a web browser may preview the file in a new tab or window, but not\n    download the file.\n\n    You can only set this parameter to **false** if the content type of the file is in the supported list;\n    for example, certain image files and PDF files.\n\n    If the content type is not supported for preview, then a value of **false**  is ignored, and\n    the attachment will be returned in the response.\n     (default to true)\n        * @param opts.ifModifiedSince Only returns the content if it has been modified since the date provided.\n    Use the date format defined by HTTP. For example, Wed, 09 Mar 2016 16:56:34 GMT.\n\n        * @return Promise<{}>\n        */\n    getRecordContent(recordId: string, opts?: any): Promise<any> {\n        throwIfNotDefined(recordId, 'recordId');\n\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n            'recordId': recordId\n        };\n\n        let queryParams = {\n            'attachment': opts['attachment']\n        };\n\n        let headerParams = {\n            'If-Modified-Since': opts['ifModifiedSince']\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/records/{recordId}/content', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * Update record\n        *\n        * Updates the record **recordId**. For example, you can rename a record:\n    JSON\n    {\n      \\\"name\\\":\\\"My new name\\\"\n    }\n\n    You can also set or update one or more properties:\n    JSON\n    {\n      \\\"properties\\\":\n        {\n           \\\"cm:title\\\":\\\"New title\\\",\n           \\\"cm:description\\\":\\\"New description\\\"\n        }\n    }\n\n    **Note:** if you want to add or remove aspects, then you must use **GET /records/{recordId}** first to get the complete set of *aspectNames*.\n\n    **Note:** Currently there is no optimistic locking for updates, so they are applied in \\\"last one wins\\\" order.\n\n        *\n        * @param recordId The identifier of a record.\n        * @param recordBodyUpdate The record information to update.\n        * @param opts Optional parameters\n        * @param opts.include Returns additional information about the record. Any optional field from the response model can be requested. For example:\n    * allowableOperations\n    * content\n    * isCompleted\n    * path\n\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @return Promise<RecordEntry>\n        */\n    updateRecord(recordId: string, recordBodyUpdate: FilePlanComponentBodyUpdate, opts?: any): Promise<RecordEntry> {\n        throwIfNotDefined(recordId, 'recordId');\n        throwIfNotDefined(recordBodyUpdate, 'recordBodyUpdate');\n\n        opts = opts || {};\n        let postBody = recordBodyUpdate;\n\n        let pathParams = {\n            'recordId': recordId\n        };\n\n        let queryParams = {\n            'include': buildCollectionParam(opts['include'], 'csv'),\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/records/{recordId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, RecordEntry);\n    }\n\n}\n"]}