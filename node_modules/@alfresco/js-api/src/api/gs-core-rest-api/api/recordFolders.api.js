"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecordFoldersApi = void 0;
const recordFolderAssociationPaging_1 = require("../model/recordFolderAssociationPaging");
const recordFolderEntry_1 = require("../model/recordFolderEntry");
const base_api_1 = require("./base.api");
const alfrescoApiClient_1 = require("../../../alfrescoApiClient");
const assert_1 = require("../../../assert");
class RecordFoldersApi extends base_api_1.BaseApi {
    createRecordFolderChild(recordFolderId, recordBodyCreate, opts) {
        (0, assert_1.throwIfNotDefined)(recordFolderId, 'recordFolderId');
        (0, assert_1.throwIfNotDefined)(recordBodyCreate, 'recordBodyCreate');
        opts = opts || {};
        let postBody = recordBodyCreate;
        let pathParams = {
            'recordFolderId': recordFolderId
        };
        let queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json', 'multipart/form-data'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/record-folders/{recordFolderId}/records', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteRecordFolder(recordFolderId) {
        (0, assert_1.throwIfNotDefined)(recordFolderId, 'recordFolderId');
        let postBody = null;
        let pathParams = {
            'recordFolderId': recordFolderId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/record-folders/{recordFolderId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getRecordFolder(recordFolderId, opts) {
        (0, assert_1.throwIfNotDefined)(recordFolderId, 'recordFolderId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'recordFolderId': recordFolderId
        };
        let queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/record-folders/{recordFolderId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, recordFolderEntry_1.RecordFolderEntry);
    }
    listRecordFolderChildren(recordFolderId, opts) {
        (0, assert_1.throwIfNotDefined)(recordFolderId, 'recordFolderId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'recordFolderId': recordFolderId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'includeSource': opts['includeSource'],
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/record-folders/{recordFolderId}/records', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, recordFolderAssociationPaging_1.RecordFolderAssociationPaging);
    }
    updateRecordFolder(recordFolderId, recordFolderBodyUpdate, opts) {
        (0, assert_1.throwIfNotDefined)(recordFolderId, 'recordFolderId');
        (0, assert_1.throwIfNotDefined)(recordFolderBodyUpdate, 'recordFolderBodyUpdate');
        opts = opts || {};
        let postBody = recordFolderBodyUpdate;
        let pathParams = {
            'recordFolderId': recordFolderId
        };
        let queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/record-folders/{recordFolderId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, recordFolderEntry_1.RecordFolderEntry);
    }
}
exports.RecordFoldersApi = RecordFoldersApi;
//# sourceMappingURL=../../../../../src/api/gs-core-rest-api/api/recordFolders.api.js.map