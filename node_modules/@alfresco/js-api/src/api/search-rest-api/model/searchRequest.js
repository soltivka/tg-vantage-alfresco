"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchRequest = void 0;
const requestDefaults_1 = require("./requestDefaults");
const requestFacetFields_1 = require("./requestFacetFields");
const requestFacetIntervals_1 = require("./requestFacetIntervals");
const requestFacetQueries_1 = require("./requestFacetQueries");
const requestFields_1 = require("./requestFields");
const requestFilterQueries_1 = require("./requestFilterQueries");
const requestHighlight_1 = require("./requestHighlight");
const requestInclude_1 = require("./requestInclude");
const requestLimits_1 = require("./requestLimits");
const requestLocalization_1 = require("./requestLocalization");
const requestPagination_1 = require("./requestPagination");
const requestPivot_1 = require("./requestPivot");
const requestQuery_1 = require("./requestQuery");
const requestRange_1 = require("./requestRange");
const requestScope_1 = require("./requestScope");
const requestSortDefinition_1 = require("./requestSortDefinition");
const requestSpellcheck_1 = require("./requestSpellcheck");
const requestStats_1 = require("./requestStats");
const requestTemplates_1 = require("./requestTemplates");
class SearchRequest {
    constructor(input) {
        if (input) {
            Object.assign(this, input);
            this.query = input.query ? new requestQuery_1.RequestQuery(input.query) : undefined;
            this.paging = input.paging ? new requestPagination_1.RequestPagination(input.paging) : undefined;
            this.include = input.include ? new requestInclude_1.RequestInclude(input.include) : undefined;
            this.fields = input.fields ? new requestFields_1.RequestFields(input.fields) : undefined;
            this.sort = input.sort ? new requestSortDefinition_1.RequestSortDefinition(input.sort) : undefined;
            this.templates = input.templates ? new requestTemplates_1.RequestTemplates(input.templates) : undefined;
            this.defaults = input.defaults ? new requestDefaults_1.RequestDefaults(input.defaults) : undefined;
            this.localization = input.localization ? new requestLocalization_1.RequestLocalization(input.localization) : undefined;
            this.filterQueries = input.filterQueries ? new requestFilterQueries_1.RequestFilterQueries(input.filterQueries) : undefined;
            this.facetQueries = input.facetQueries ? new requestFacetQueries_1.RequestFacetQueries(input.facetQueries) : undefined;
            this.facetFields = input.facetFields ? new requestFacetFields_1.RequestFacetFields(input.facetFields) : undefined;
            this.facetIntervals = input.facetIntervals ? new requestFacetIntervals_1.RequestFacetIntervals(input.facetIntervals) : undefined;
            if (input.pivots) {
                this.pivots = input.pivots.map((item) => {
                    return new requestPivot_1.RequestPivot(item);
                });
            }
            if (input.stats) {
                this.stats = input.stats.map((item) => {
                    return new requestStats_1.RequestStats(item);
                });
            }
            this.spellcheck = input.spellcheck ? new requestSpellcheck_1.RequestSpellcheck(input.spellcheck) : undefined;
            this.scope = input.scope ? new requestScope_1.RequestScope(input.scope) : undefined;
            this.limits = input.limits ? new requestLimits_1.RequestLimits(input.limits) : undefined;
            this.highlight = input.highlight ? new requestHighlight_1.RequestHighlight(input.highlight) : undefined;
            if (input.ranges) {
                this.ranges = input.ranges.map((item) => {
                    return new requestRange_1.RequestRange(item);
                });
            }
        }
    }
}
exports.SearchRequest = SearchRequest;
//# sourceMappingURL=../../../../../src/api/search-rest-api/model/searchRequest.js.map