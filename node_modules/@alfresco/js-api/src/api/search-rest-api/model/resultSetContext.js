"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultSetContext = void 0;
const genericFacetResponse_1 = require("./genericFacetResponse");
const responseConsistency_1 = require("./responseConsistency");
const resultBuckets_1 = require("./resultBuckets");
const resultSetContextFacetQueries_1 = require("./resultSetContextFacetQueries");
const resultSetContextSpellcheck_1 = require("./resultSetContextSpellcheck");
const searchRequest_1 = require("./searchRequest");
class ResultSetContext {
    constructor(input) {
        if (input) {
            Object.assign(this, input);
            this.consistency = input.consistency ? new responseConsistency_1.ResponseConsistency(input.consistency) : undefined;
            this.request = input.request ? new searchRequest_1.SearchRequest(input.request) : undefined;
            if (input.facetQueries) {
                this.facetQueries = input.facetQueries.map((item) => {
                    return new resultSetContextFacetQueries_1.ResultSetContextFacetQueries(item);
                });
            }
            if (input.facetsFields) {
                this.facetsFields = input.facetsFields.map((item) => {
                    return new resultBuckets_1.ResultBuckets(item);
                });
            }
            if (input.facets) {
                this.facets = input.facets.map((item) => {
                    return new genericFacetResponse_1.GenericFacetResponse(item);
                });
            }
            if (input.spellcheck) {
                this.spellcheck = input.spellcheck.map((item) => {
                    return new resultSetContextSpellcheck_1.ResultSetContextSpellcheck(item);
                });
            }
        }
    }
}
exports.ResultSetContext = ResultSetContext;
//# sourceMappingURL=../../../../../src/api/search-rest-api/model/resultSetContext.js.map