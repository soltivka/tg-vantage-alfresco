"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomModelApi = void 0;
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
class CustomModelApi extends base_api_1.BaseApi {
    constructor() {
        super(...arguments);
        this.private = true;
    }
    createCustomModel(status, description, name, namespaceUri, namespacePrefix, author) {
        (0, assert_1.throwIfNotDefined)(namespaceUri, 'namespaceUri');
        (0, assert_1.throwIfNotDefined)(namespacePrefix, 'namespacePrefix');
        const bodyParam = {
            status,
            description,
            name,
            namespaceUri,
            namespacePrefix,
            author
        };
        return this.post({
            path: 'cmm',
            bodyParam
        });
    }
    createCustomType(modelName, name, parentName, title, description) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        (0, assert_1.throwIfNotDefined)(name, 'name');
        const bodyParam = {
            name,
            parentName,
            title,
            description
        };
        const pathParams = {
            modelName
        };
        return this.post({
            path: 'cmm/{modelName}/types',
            bodyParam,
            pathParams
        });
    }
    createCustomAspect(modelName, name, parentName, title, description) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        (0, assert_1.throwIfNotDefined)(name, 'name');
        const bodyParam = {
            name,
            parentName,
            title,
            description
        };
        const pathParams = {
            modelName
        };
        return this.post({
            path: 'cmm/{modelName}/aspects',
            bodyParam,
            pathParams
        });
    }
    createCustomConstraint(modelName, name, type, parameters) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        (0, assert_1.throwIfNotDefined)(type, 'type');
        (0, assert_1.throwIfNotDefined)(name, 'name');
        const bodyParam = {
            name,
            type,
            parameters
        };
        const pathParams = {
            modelName
        };
        return this.post({
            path: 'cmm/{modelName}/constraints',
            bodyParam,
            pathParams
        });
    }
    activateCustomModel(modelName) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        const bodyParam = {
            'status': 'ACTIVE'
        };
        const pathParams = {
            modelName
        };
        return this.put({
            path: 'cmm/{modelName}?select=status',
            bodyParam,
            pathParams
        });
    }
    deactivateCustomModel(modelName) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        const bodyParam = {
            'status': 'DRAFT'
        };
        const pathParams = {
            modelName
        };
        return this.put({
            path: 'cmm/{modelName}?select=status',
            bodyParam,
            pathParams
        });
    }
    addPropertyToAspect(modelName, aspectName, properties) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        (0, assert_1.throwIfNotDefined)(aspectName, 'aspectName');
        const bodyParam = {
            'name': aspectName,
            properties
        };
        const pathParams = {
            modelName,
            aspectName
        };
        return this.put({
            path: 'cmm/{modelName}/aspects/{aspectName}?select=props',
            bodyParam,
            pathParams
        });
    }
    addPropertyToType(modelName, typeName, properties) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        (0, assert_1.throwIfNotDefined)(typeName, 'typeName');
        const bodyParam = {
            'name': typeName,
            properties
        };
        const pathParams = {
            modelName,
            typeName
        };
        return this.put({
            path: 'cmm/{modelName}/types/{typeName}?select=props',
            bodyParam,
            pathParams
        });
    }
    updateCustomModel(modelName, description, namespaceUri, namespacePrefix, author) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        const bodyParam = {
            'name': modelName,
            description,
            namespaceUri,
            namespacePrefix,
            author
        };
        const pathParams = {
            modelName
        };
        return this.put({
            path: 'cmm/{modelName}',
            bodyParam,
            pathParams
        });
    }
    updateCustomType(modelName, typeName, description, parentName, title) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        (0, assert_1.throwIfNotDefined)(typeName, 'typeName');
        const bodyParam = {
            'name': typeName,
            parentName,
            title,
            description
        };
        const pathParams = {
            modelName,
            typeName
        };
        return this.put({
            path: 'cmm/{modelName}/types/{typeName}',
            bodyParam,
            pathParams
        });
    }
    updateCustomAspect(modelName, aspectName, description, parentName, title) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        (0, assert_1.throwIfNotDefined)(aspectName, 'aspectName');
        const bodyParam = {
            'name': aspectName,
            parentName,
            title,
            description
        };
        const pathParams = {
            modelName,
            aspectName
        };
        return this.put({
            path: 'cmm/{modelName}/aspects/{aspectName}',
            bodyParam,
            pathParams
        });
    }
    getAllCustomModel() {
        return this.get({
            path: 'cmm'
        });
    }
    getCustomModel(modelName, queryParams) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        const pathParams = {
            modelName
        };
        return this.get({
            path: 'cmm/{modelName}',
            pathParams,
            queryParams
        });
    }
    getAllCustomType(modelName) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        const pathParams = {
            modelName
        };
        return this.get({
            path: 'cmm/{modelName}/types',
            pathParams
        });
    }
    getCustomType(modelName, typeName, queryParams) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        (0, assert_1.throwIfNotDefined)(typeName, 'typeName');
        const pathParams = {
            modelName,
            typeName
        };
        return this.get({
            path: 'cmm/{modelName}/types/{typeName}',
            pathParams,
            queryParams
        });
    }
    getAllCustomAspect(modelName, queryParams) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        const pathParams = {
            modelName
        };
        return this.get({
            path: 'cmm/{modelName}/aspects',
            pathParams,
            queryParams
        });
    }
    getCustomAspect(modelName, aspectName, queryParams) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        (0, assert_1.throwIfNotDefined)(aspectName, 'aspectName');
        const pathParams = {
            modelName,
            aspectName
        };
        return this.get({
            path: 'cmm/{modelName}/aspects/{aspectName}',
            pathParams,
            queryParams
        });
    }
    getAllCustomConstraints(modelName, queryParams) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        const pathParams = {
            modelName
        };
        return this.get({
            path: 'cmm/{modelName}/constraints',
            pathParams,
            queryParams
        });
    }
    getCustomConstraints(modelName, constraintName, queryParams) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        (0, assert_1.throwIfNotDefined)(constraintName, 'constraintName');
        const pathParams = {
            modelName,
            constraintName
        };
        return this.get({
            path: 'cmm/{modelName}/constraints{constraintName}',
            pathParams,
            queryParams
        });
    }
    deleteCustomModel(modelName) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        const pathParams = {
            modelName
        };
        return this.delete({
            path: 'cmm/{modelName}',
            pathParams
        });
    }
    deleteCustomType(modelName, typeName) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        (0, assert_1.throwIfNotDefined)(typeName, 'typeName');
        const pathParams = {
            modelName,
            typeName
        };
        return this.delete({
            path: 'cmm/{modelName}/types/{typeName}',
            pathParams
        });
    }
    deleteCustomAspect(modelName, aspectName) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        (0, assert_1.throwIfNotDefined)(aspectName, 'aspectName');
        const pathParams = {
            modelName,
            aspectName
        };
        return this.delete({
            path: 'cmm/{modelName}/aspects/{aspectName}',
            pathParams
        });
    }
    deleteCustomAspectProperty(modelName, aspectName, propertyName) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        (0, assert_1.throwIfNotDefined)(aspectName, 'aspectName');
        (0, assert_1.throwIfNotDefined)(propertyName, 'propertyName');
        const bodyParam = {
            'name': aspectName
        };
        const pathParams = {
            modelName,
            aspectName
        };
        const queryParams = {
            select: 'props',
            delete: propertyName,
            update: true
        };
        return this.put({
            path: 'cmm/{modelName}/aspects/{aspectName}',
            bodyParam,
            pathParams,
            queryParams
        });
    }
    deleteCustomTypeProperty(modelName, typeName, propertyName) {
        (0, assert_1.throwIfNotDefined)(modelName, 'modelName');
        (0, assert_1.throwIfNotDefined)(typeName, 'typeName');
        (0, assert_1.throwIfNotDefined)(propertyName, 'propertyName');
        const bodyParam = {
            'name': typeName
        };
        const pathParams = {
            modelName,
            typeName
        };
        const queryParams = {
            select: 'props',
            delete: propertyName,
            update: true
        };
        return this.put({
            path: 'cmm/{modelName}/types/{typeName}',
            bodyParam,
            pathParams,
            queryParams
        });
    }
}
exports.CustomModelApi = CustomModelApi;
//# sourceMappingURL=../../../../../src/api/content-custom-api/api/customModel.api.js.map