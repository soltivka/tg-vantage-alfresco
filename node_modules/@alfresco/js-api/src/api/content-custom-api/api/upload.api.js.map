{"version":3,"file":"upload.api.js","sourceRoot":"","sources":["upload.api.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;;AAEF,oEAAgE;AAGhE,MAAa,SAAU,SAAQ,oBAAQ;IAEnC,UAAU,CAAC,cAAmB,EAAE,YAAoB,EAAE,YAAoB,EAAE,QAAa,EAAE,IAAU;QACjG,YAAY,GAAG,YAAY,IAAI,QAAQ,CAAC;QACxC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAElB,IAAI,gBAAgB,GAAG;YACnB,MAAM,EAAE,cAAc,CAAC,IAAI;YAC3B,UAAU,EAAE,YAAY;YACxB,cAAc,EAAE,YAAY;SAC/B,CAAC;QAEF,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;QAErD,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC;QAC7D,SAAS,CAAC,QAAQ,GAAG,cAAc,CAAC;QACpC,SAAS,CAAC,YAAY,GAAG,YAAY,CAAC;QACtC,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;SAC9B;QAED,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAE3C,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;IACpE,CAAC;CACJ;AAzBD,8BAyBC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { NodesApi } from '../../content-rest-api/api/nodes.api';\nimport { Emitter } from 'event-emitter';\n\nexport class UploadApi extends NodesApi {\n\n    uploadFile(fileDefinition: any, relativePath: string, rootFolderId: string, nodeBody: any, opts?: any): Promise<any | Emitter> {\n        rootFolderId = rootFolderId || '-root-';\n        opts = opts || {};\n\n        let nodeBodyRequired = {\n            'name': fileDefinition.name,\n            'nodeType': 'cm:content',\n            'relativePath': relativePath\n        };\n\n        nodeBody = Object.assign(nodeBodyRequired, nodeBody);\n\n        let formParam = Object.assign({}, nodeBody.properties || {});\n        formParam.filedata = fileDefinition;\n        formParam.relativePath = relativePath;\n        if (opts.name) {\n            formParam.name = opts.name;\n        }\n\n        formParam = Object.assign(formParam, opts);\n\n        return this.createNode(rootFolderId, nodeBody, opts, formParam);\n    }\n}\n"]}