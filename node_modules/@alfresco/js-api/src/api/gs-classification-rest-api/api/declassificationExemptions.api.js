"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeclassificationExemptionsApi = void 0;
const declassificationExemptionEntry_1 = require("../model/declassificationExemptionEntry");
const declassificationExemptionsPaging_1 = require("../model/declassificationExemptionsPaging");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
class DeclassificationExemptionsApi extends base_api_1.BaseApi {
    createDeclassificationExemption(declassificationExemption) {
        (0, assert_1.throwIfNotDefined)(declassificationExemption, 'declassificationExemption');
        let postBody = declassificationExemption;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/declassification-exemptions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, declassificationExemptionEntry_1.DeclassificationExemptionEntry);
    }
    deleteDeclassificationExemption(declassificationExemptionId) {
        (0, assert_1.throwIfNotDefined)(declassificationExemptionId, 'declassificationExemptionId');
        let postBody = null;
        let pathParams = {
            'declassificationExemptionId': declassificationExemptionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/declassification-exemptions/{declassificationExemptionId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    listDeclassificationExemptions(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/declassification-exemptions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, declassificationExemptionsPaging_1.DeclassificationExemptionsPaging);
    }
    showDeclassificationExemptionById(declassificationExemptionId) {
        (0, assert_1.throwIfNotDefined)(declassificationExemptionId, 'declassificationExemptionId');
        let postBody = null;
        let pathParams = {
            'declassificationExemptionId': declassificationExemptionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/declassification-exemptions/{declassificationExemptionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, declassificationExemptionEntry_1.DeclassificationExemptionEntry);
    }
    updateDeclassificationExemption(declassificationExemptionId, declassificationExemption) {
        (0, assert_1.throwIfNotDefined)(declassificationExemptionId, 'declassificationExemptionId');
        (0, assert_1.throwIfNotDefined)(declassificationExemption, 'declassificationExemption');
        let postBody = declassificationExemption;
        let pathParams = {
            'declassificationExemptionId': declassificationExemptionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/declassification-exemptions/{declassificationExemptionId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, declassificationExemptionEntry_1.DeclassificationExemptionEntry);
    }
}
exports.DeclassificationExemptionsApi = DeclassificationExemptionsApi;
//# sourceMappingURL=../../../../../src/api/gs-classification-rest-api/api/declassificationExemptions.api.js.map