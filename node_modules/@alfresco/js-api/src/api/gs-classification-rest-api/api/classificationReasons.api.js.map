{"version":3,"file":"classificationReasons.api.js","sourceRoot":"","sources":["classificationReasons.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ClassificationReasonBody } from '../model/classificationReasonBody';\nimport { ClassificationReasonEntry } from '../model/classificationReasonEntry';\nimport { ClassificationReasonsPaging } from '../model/classificationReasonsPaging';\nimport { BaseApi } from './base.api';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\nimport { throwIfNotDefined } from '../../../assert';\n\n/**\n* Classificationreasons service.\n* @module ClassificationReasonsApi\n*/\nexport class ClassificationReasonsApi extends BaseApi {\n    /**\n    * Create a classification reason\n    *\n    * Creates a new classification reason.\n\n**Note:** You can create more than one reason by specifying a list of reasons in the JSON body.\nFor example, the following JSON body creates two classification reasons:\nJSON\n[\n  {\n    \\\"code\\\":\\\"My Code1\\\",\n    \\\"description\\\":\\\"My Description1\\\"\n  },\n  {\n    \\\"code\\\":\\\"My Code2\\\",\n    \\\"description\\\":\\\"My Description2\\\"\n  }\n]\n\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\nJSON\n{\n  \\\"list\\\": {\n    \\\"pagination\\\": {\n      \\\"count\\\": 2,\n      \\\"hasMoreItems\\\": false,\n      \\\"totalItems\\\": 2,\n      \\\"skipCount\\\": 0,\n      \\\"maxItems\\\": 100\n    },\n    \\\"entries\\\": [\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      },\n      {\n        \\\"entry\\\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n\n    *\n    * @param classificationReason Classification reason\n    * @return Promise<ClassificationReasonEntry>\n    */\n    createClassificationReason(classificationReason: ClassificationReasonBody): Promise<ClassificationReasonEntry> {\n        throwIfNotDefined(classificationReason, 'classificationReason');\n\n        let postBody = classificationReason;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/classification-reasons', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ClassificationReasonEntry);\n    }\n    /**\n        * Delete a classification reason\n        *\n        * Deletes the classification reason  **classificationReasonId**. You can't delete a classification reason that is being used to classify content. There must be at least one classification reason.\n        *\n        * @param classificationReasonId The identifier for the classification reason\n        * @return Promise<{}>\n        */\n    deleteClassificationReason(classificationReasonId: string): Promise<any> {\n        throwIfNotDefined(classificationReasonId, 'classificationReasonId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'classificationReasonId': classificationReasonId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/classification-reasons/{classificationReasonId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts);\n    }\n    /**\n        * List all classification reasons\n        *\n        * Gets all classification reasons.\n        *\n        * @param opts Optional parameters\n        * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\n        * @param opts.maxItems The maximum number of items to return in the list.\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @return Promise<ClassificationReasonsPaging>\n        */\n    listClassificationReasons(opts?: any): Promise<ClassificationReasonsPaging> {\n        opts = opts || {};\n        let postBody = null;\n\n        let pathParams = {\n\n        };\n\n        let queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'fields': buildCollectionParam(opts['fields'], 'csv')\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/classification-reasons', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ClassificationReasonsPaging);\n    }\n    /**\n        * Get classification reason information\n        *\n        * Gets the classification reason  **classificationReasonId**.\n        *\n        * @param classificationReasonId The identifier for the classification reason\n        * @return Promise<ClassificationReasonEntry>\n        */\n    showClassificationReasonById(classificationReasonId: string): Promise<ClassificationReasonEntry> {\n        throwIfNotDefined(classificationReasonId, 'classificationReasonId');\n\n        let postBody = null;\n\n        let pathParams = {\n            'classificationReasonId': classificationReasonId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/classification-reasons/{classificationReasonId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ClassificationReasonEntry);\n    }\n    /**\n        * Update a classification reason\n        *\n        * Updates the classification reason with id **classificationReasonId**. For example, you can change a classification reason code or description.\n        *\n        * @param classificationReasonId The identifier for the classification reason\n        * @param classificationReason Classification reason\n        * @return Promise<ClassificationReasonEntry>\n        */\n    updateClassificationReason(classificationReasonId: string, classificationReason: ClassificationReasonBody): Promise<ClassificationReasonEntry> {\n        throwIfNotDefined(classificationReasonId, 'classificationReasonId');\n        throwIfNotDefined(classificationReason, 'classificationReason');\n\n        let postBody = classificationReason;\n\n        let pathParams = {\n            'classificationReasonId': classificationReasonId\n        };\n\n        let queryParams = {\n        };\n\n        let headerParams = {\n\n        };\n        let formParams = {\n        };\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/classification-reasons/{classificationReasonId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts, ClassificationReasonEntry);\n    }\n\n}\n"]}