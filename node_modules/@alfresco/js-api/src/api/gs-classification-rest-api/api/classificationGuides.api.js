"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassificationGuidesApi = void 0;
const classificationGuideEntry_1 = require("../model/classificationGuideEntry");
const classificationGuidePaging_1 = require("../model/classificationGuidePaging");
const instructionEntry_1 = require("../model/instructionEntry");
const subtopicPaging_1 = require("../model/subtopicPaging");
const topicEntry_1 = require("../model/topicEntry");
const topicPaging_1 = require("../model/topicPaging");
const base_api_1 = require("./base.api");
const alfrescoApiClient_1 = require("../../../alfrescoApiClient");
const assert_1 = require("../../../assert");
class ClassificationGuidesApi extends base_api_1.BaseApi {
    combinedInstructions(opts) {
        opts = opts || {};
        let postBody = opts['instructions'];
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/combined-instructions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, instructionEntry_1.InstructionEntry);
    }
    createClassificationGuide(classificationGuide) {
        (0, assert_1.throwIfNotDefined)(classificationGuide, 'classificationGuide');
        let postBody = classificationGuide;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/classification-guides', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, classificationGuideEntry_1.ClassificationGuideEntry);
    }
    createSubtopic(topicId, topic, opts) {
        (0, assert_1.throwIfNotDefined)(topicId, 'topicId');
        (0, assert_1.throwIfNotDefined)(topic, 'topic');
        opts = opts || {};
        let postBody = topic;
        let pathParams = {
            'topicId': topicId
        };
        let queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/topics/{topicId}/subtopics', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, topicEntry_1.TopicEntry);
    }
    createTopic(classificationGuideId, topic, opts) {
        (0, assert_1.throwIfNotDefined)(classificationGuideId, 'classificationGuideId');
        (0, assert_1.throwIfNotDefined)(topic, 'topic');
        opts = opts || {};
        let postBody = topic;
        let pathParams = {
            'classificationGuideId': classificationGuideId
        };
        let queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/classification-guides/{classificationGuideId}/topics', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, topicEntry_1.TopicEntry);
    }
    deleteClassificationGuide(classificationGuideId) {
        (0, assert_1.throwIfNotDefined)(classificationGuideId, 'classificationGuideId');
        let postBody = null;
        let pathParams = {
            'classificationGuideId': classificationGuideId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/classification-guides/{classificationGuideId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteTopic(topicId) {
        (0, assert_1.throwIfNotDefined)(topicId, 'topicId');
        let postBody = null;
        let pathParams = {
            'topicId': topicId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/topics/{topicId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    listClassificationGuides(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': (0, alfrescoApiClient_1.buildCollectionParam)(opts['orderBy'], 'csv'),
            'where': opts['where']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/classification-guides', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, classificationGuidePaging_1.ClassificationGuidePaging);
    }
    listSubtopics(topicId, opts) {
        (0, assert_1.throwIfNotDefined)(topicId, 'topicId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'topicId': topicId
        };
        let queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': (0, alfrescoApiClient_1.buildCollectionParam)(opts['orderBy'], 'csv'),
            'where': opts['where'],
            'includeSource': opts['includeSource']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/topics/{topicId}/subtopics', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, subtopicPaging_1.SubtopicPaging);
    }
    listTopics(classificationGuideId, opts) {
        (0, assert_1.throwIfNotDefined)(classificationGuideId, 'classificationGuideId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'classificationGuideId': classificationGuideId
        };
        let queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv'),
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': (0, alfrescoApiClient_1.buildCollectionParam)(opts['orderBy'], 'csv'),
            'where': opts['where'],
            'includeSource': opts['includeSource']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/classification-guides/{classificationGuideId}/topics', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, topicPaging_1.TopicPaging);
    }
    showClassificationGuideById(classificationGuideId) {
        (0, assert_1.throwIfNotDefined)(classificationGuideId, 'classificationGuideId');
        let postBody = null;
        let pathParams = {
            'classificationGuideId': classificationGuideId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/classification-guides/{classificationGuideId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, classificationGuideEntry_1.ClassificationGuideEntry);
    }
    showTopicById(topicId, opts) {
        (0, assert_1.throwIfNotDefined)(topicId, 'topicId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'topicId': topicId
        };
        let queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/topics/{topicId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, topicEntry_1.TopicEntry);
    }
    updateClassificationGuide(classificationGuideId, classificationGuide) {
        (0, assert_1.throwIfNotDefined)(classificationGuideId, 'classificationGuideId');
        (0, assert_1.throwIfNotDefined)(classificationGuide, 'classificationGuide');
        let postBody = classificationGuide;
        let pathParams = {
            'classificationGuideId': classificationGuideId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/classification-guides/{classificationGuideId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, classificationGuideEntry_1.ClassificationGuideEntry);
    }
    updateTopic(topicId, topic, opts) {
        (0, assert_1.throwIfNotDefined)(topicId, 'topicId');
        (0, assert_1.throwIfNotDefined)(topic, 'topic');
        opts = opts || {};
        let postBody = topic;
        let pathParams = {
            'topicId': topicId
        };
        let queryParams = {
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/topics/{topicId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, topicEntry_1.TopicEntry);
    }
}
exports.ClassificationGuidesApi = ClassificationGuidesApi;
//# sourceMappingURL=../../../../../src/api/gs-classification-rest-api/api/classificationGuides.api.js.map