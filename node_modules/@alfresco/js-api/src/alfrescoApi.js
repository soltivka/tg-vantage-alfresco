"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlfrescoApi = void 0;
const tslib_1 = require("tslib");
const event_emitter_1 = (0, tslib_1.__importDefault)(require("event-emitter"));
const contentAuth_1 = require("./authentication/contentAuth");
const processAuth_1 = require("./authentication/processAuth");
const oauth2Auth_1 = require("./authentication/oauth2Auth");
const contentClient_1 = require("./contentClient");
const processClient_1 = require("./processClient");
const storage_1 = require("./storage");
const alfrescoApiConfig_1 = require("./alfrescoApiConfig");
class AlfrescoApi {
    constructor(config) {
        this.bufferEvents = [];
        (0, event_emitter_1.default)(this);
        if (config) {
            this.setConfig(config);
        }
    }
    setConfig(config) {
        if (!config) {
            config = {};
        }
        this.storage = new storage_1.Storage();
        this.storage.setDomainPrefix(config.domainPrefix);
        this.config = new alfrescoApiConfig_1.AlfrescoApiConfig(config);
        this.clientsFactory();
        this.processClient = new processClient_1.ProcessClient(this.config);
        this.errorListeners();
        this.initAuth(config);
        if (this.isLoggedIn()) {
            this.emitBuffer('logged-in');
        }
        return config;
    }
    initAuth(config) {
        var _a, _b, _c;
        if (this.isOauthConfiguration()) {
            if (!this.oauth2Auth) {
                this.oauth2Auth = new oauth2Auth_1.Oauth2Auth(this.config, this);
            }
            else {
                this.oauth2Auth.setConfig(this.config, this);
            }
            (_a = this.oauth2Auth) === null || _a === void 0 ? void 0 : _a.on('logged-in', () => {
                this.emitBuffer('logged-in');
            });
            this.setAuthenticationClientECMBPM(this.oauth2Auth.getAuthentication(), this.oauth2Auth.getAuthentication());
        }
        else {
            if (!this.processAuth) {
                this.processAuth = new processAuth_1.ProcessAuth(this.config);
            }
            else {
                this.processAuth.setConfig(this.config);
            }
            (_b = this.processAuth) === null || _b === void 0 ? void 0 : _b.on('logged-in', () => {
                this.emitBuffer('logged-in');
            });
            if (!this.contentAuth) {
                this.contentAuth = new contentAuth_1.ContentAuth(this.config, this);
            }
            else {
                this.contentAuth.setConfig(config);
            }
            (_c = this.contentAuth) === null || _c === void 0 ? void 0 : _c.on('logged-in', () => {
                this.emitBuffer('logged-in');
            });
            this.setAuthenticationClientECMBPM(this.contentAuth.getAuthentication(), this.processAuth.getAuthentication());
        }
    }
    clientsFactory() {
        if (!this.contentPrivateClient) {
            this.contentPrivateClient = new contentClient_1.ContentClient(this.config, `/api/${this.config.tenant}/private/alfresco/versions/1`);
        }
        else {
            this.contentPrivateClient.setConfig(this.config, `/api/${this.config.tenant}/private/alfresco/versions/1`);
        }
        if (!this.contentClient) {
            this.contentClient = new contentClient_1.ContentClient(this.config, `/api/${this.config.tenant}/public/alfresco/versions/1`);
        }
        else {
            this.contentClient.setConfig(this.config, `/api/${this.config.tenant}/public/alfresco/versions/1`);
        }
        if (!this.authClient) {
            this.authClient = new contentClient_1.ContentClient(this.config, `/api/${this.config.tenant}/public/authentication/versions/1`);
        }
        else {
            this.authClient.setConfig(this.config, `/api/${this.config.tenant}/public/authentication/versions/1`);
        }
        if (!this.searchClient) {
            this.searchClient = new contentClient_1.ContentClient(this.config, `/api/${this.config.tenant}/public/search/versions/1`);
        }
        else {
            this.searchClient.setConfig(this.config, `/api/${this.config.tenant}/public/search/versions/1`);
        }
        if (!this.discoveryClient) {
            this.discoveryClient = new contentClient_1.ContentClient(this.config, `/api`);
        }
        else {
            this.discoveryClient.setConfig(this.config, `/api`);
        }
        if (!this.gsClient) {
            this.gsClient = new contentClient_1.ContentClient(this.config, `/api/${this.config.tenant}/public/gs/versions/1`);
        }
        else {
            this.gsClient.setConfig(this.config, `/api/${this.config.tenant}/public/gs/versions/1`);
        }
        if (!this.processClient) {
            this.processClient = new processClient_1.ProcessClient(this.config);
        }
        else {
            this.processClient.setConfig(this.config);
        }
    }
    errorListeners() {
        this.contentClient.off('error', () => {
        });
        this.authClient.off('error', () => {
        });
        this.contentPrivateClient.off('error', () => {
        });
        this.processClient.off('error', () => {
        });
        this.searchClient.off('error', () => {
        });
        this.discoveryClient.off('error', () => {
        });
        this.gsClient.off('error', () => {
        });
        this.contentClient.on('error', (error) => {
            this.errorHandler(error);
        });
        this.authClient.on('error', (error) => {
            this.errorHandler(error);
        });
        this.contentPrivateClient.on('error', (error) => {
            this.errorHandler(error);
        });
        this.processClient.on('error', (error) => {
            this.errorHandler(error);
        });
        this.searchClient.on('error', (error) => {
            this.errorHandler(error);
        });
        this.discoveryClient.on('error', (error) => {
            this.errorHandler(error);
        });
        this.gsClient.on('error', (error) => {
            this.errorHandler(error);
        });
    }
    errorHandler(error) {
        if (error.status === 401) {
            this.invalidateSession();
        }
        this.emitBuffer('error', error);
    }
    changeWithCredentialsConfig(withCredentials) {
        this.config.withCredentials = withCredentials;
    }
    changeCsrfConfig(disableCsrf) {
        this.config.disableCsrf = disableCsrf;
        this.processAuth.changeCsrfConfig(disableCsrf);
    }
    changeEcmHost(hostEcm) {
        this.config.hostEcm = hostEcm;
        this.contentAuth.changeHost();
        this.contentClient.changeHost();
        this.authClient.changeHost();
    }
    changeBpmHost(hostBpm) {
        this.config.hostBpm = hostBpm;
        this.processAuth.changeHost();
        this.processClient.changeHost();
    }
    login(username, password) {
        if (!this.isCredentialValid(username) || !this.isCredentialValid(password)) {
            return Promise.reject('missing username or password');
        }
        if (username) {
            username = username.trim();
        }
        this.username = username;
        if (this.isOauthConfiguration()) {
            let oauth2AuthPromise;
            oauth2AuthPromise = this.oauth2Auth.login(username, password);
            oauth2AuthPromise.then((accessToken) => {
                this.config.accessToken = accessToken;
            }, (e) => {
                console.log('login OAUTH error', e);
            });
            return oauth2AuthPromise;
        }
        else {
            if (this.isBpmConfiguration()) {
                const processPromise = this.processAuth.login(username, password);
                processPromise.then((ticketBpm) => {
                    this.config.ticketBpm = ticketBpm;
                }, () => {
                    console.log('login BPM error');
                });
                return processPromise;
            }
            else if (this.isEcmConfiguration()) {
                const contentPromise = this.contentAuth.login(username, password);
                contentPromise.then((ticketEcm) => {
                    this.setAuthenticationClientECMBPM(this.contentAuth.getAuthentication(), null);
                    this.config.ticketEcm = ticketEcm;
                }, () => {
                    console.log('login ECM error');
                });
                return contentPromise;
            }
            else if (this.isEcmBpmConfiguration()) {
                const contentProcessPromise = this._loginBPMECM(username, password);
                contentProcessPromise.then((data) => {
                    this.config.ticketEcm = data[0];
                    this.config.ticketBpm = data[1];
                });
                return contentProcessPromise;
            }
            else {
                return Promise.reject('Unknown configuration');
            }
        }
    }
    isCredentialValid(credential) {
        return credential !== undefined && credential !== null && credential !== '';
    }
    implicitLogin() {
        if (!this.isOauthConfiguration()) {
            return Promise.reject('Missing the required oauth2 configuration');
        }
        return new Promise(() => {
            this.oauth2Auth.implicitLogin();
        });
    }
    setAuthenticationClientECMBPM(authECM, authBPM) {
        this.contentClient.setAuthentications(authECM);
        this.authClient.setAuthentications(authECM);
        this.searchClient.setAuthentications(authECM);
        this.contentPrivateClient.setAuthentications(authECM);
        this.processClient.setAuthentications(authBPM);
        this.searchClient.setAuthentications(authECM);
        this.discoveryClient.setAuthentications(authECM);
        this.gsClient.setAuthentications(authECM);
    }
    loginTicket(ticketEcm, ticketBpm) {
        this.config.ticketEcm = ticketEcm;
        this.config.ticketBpm = ticketBpm;
        return this.contentAuth.validateTicket();
    }
    _loginBPMECM(username, password) {
        const contentPromise = this.contentAuth.login(username, password);
        const processPromise = this.processAuth.login(username, password);
        const promise = new Promise((resolve, reject) => {
            Promise.all([contentPromise, processPromise]).then((data) => {
                promise.emit('success');
                resolve(data);
            }, (error) => {
                this.contentAuth.invalidateSession();
                this.processAuth.invalidateSession();
                if (error.status === 401) {
                    promise.emit('unauthorized');
                }
                promise.emit('error');
                reject(error);
            });
        });
        (0, event_emitter_1.default)(promise);
        return promise;
    }
    logout() {
        this.username = null;
        if (this.isOauthConfiguration()) {
            return this.oauth2Auth.logOut();
        }
        else {
            if (this.isBpmConfiguration()) {
                return this.processAuth.logout();
            }
            else if (this.isEcmConfiguration()) {
                const contentPromise = this.contentAuth.logout();
                contentPromise.then(() => this.config.ticket = undefined, () => {
                });
                return contentPromise;
            }
            else if (this.isEcmBpmConfiguration()) {
                return this._logoutBPMECM();
            }
            return Promise.resolve();
        }
    }
    _logoutBPMECM() {
        const contentPromise = this.contentAuth.logout();
        const processPromise = this.processAuth.logout();
        const promise = new Promise((resolve, reject) => {
            Promise.all([contentPromise, processPromise]).then(() => {
                this.config.ticket = undefined;
                promise.emit('logout');
                resolve('logout');
            }, (error) => {
                if (error.status === 401) {
                    promise.emit('unauthorized');
                }
                promise.emit('error');
                reject(error);
            });
        });
        (0, event_emitter_1.default)(promise);
        return promise;
    }
    isLoggedIn() {
        if (this.isOauthConfiguration()) {
            return this.oauth2Auth.isLoggedIn();
        }
        else {
            if (this.isBpmConfiguration()) {
                return this.processAuth.isLoggedIn();
            }
            else if (this.isEcmConfiguration()) {
                return this.contentAuth.isLoggedIn();
            }
            else if (this.isEcmBpmConfiguration()) {
                return this.contentAuth.isLoggedIn() && this.processAuth.isLoggedIn();
            }
            else {
                return false;
            }
        }
    }
    isBpmLoggedIn() {
        if (this.isBpmConfiguration() || this.isEcmBpmConfiguration()) {
            if (this.isOauthConfiguration()) {
                return this.oauth2Auth.isLoggedIn();
            }
            else {
                return this.processAuth.isLoggedIn();
            }
        }
        return false;
    }
    isEcmLoggedIn() {
        if (this.isEcmConfiguration() || this.isEcmBpmConfiguration()) {
            if (this.isOauthConfiguration()) {
                return this.oauth2Auth.isLoggedIn();
            }
            else {
                return this.contentAuth.isLoggedIn();
            }
        }
        return false;
    }
    getBpmUsername() {
        if (this.isOauthConfiguration()) {
            return this.username || this.oauth2Auth.storage.getItem('USERNAME');
        }
        else {
            return this.username || this.processAuth.storage.getItem('APS_USERNAME');
        }
    }
    getEcmUsername() {
        if (this.isOauthConfiguration()) {
            return this.username || this.oauth2Auth.storage.getItem('USERNAME');
        }
        else {
            return this.username || this.contentAuth.storage.getItem('ACS_USERNAME');
        }
    }
    refreshToken() {
        if (!this.isOauthConfiguration()) {
            return Promise.reject('Missing the required oauth2 configuration');
        }
        if (this.config.oauth2.implicitFlow) {
            return Promise.reject('Manual refresh token not possible in implicit flow');
        }
        return this.oauth2Auth.refreshToken();
    }
    getTicketAuth() {
        return this.oauth2Auth && this.oauth2Auth.getToken();
    }
    setTicket(ticketEcm, TicketBpm) {
        if (this.contentAuth) {
            this.contentAuth.setTicket(ticketEcm);
        }
        if (this.processAuth) {
            this.processAuth.setTicket(TicketBpm);
        }
    }
    invalidateSession() {
        if (this.oauth2Auth) {
            this.oauth2Auth.invalidateSession();
        }
        else {
            this.contentAuth.invalidateSession();
            this.processAuth.invalidateSession();
        }
    }
    getTicketBpm() {
        return this.processAuth && this.processAuth.getTicket();
    }
    getTicketEcm() {
        return this.contentAuth && this.contentAuth.getTicket();
    }
    getTicket() {
        return [this.contentAuth.getTicket(), this.processAuth.getTicket()];
    }
    isBpmConfiguration() {
        return this.config.provider && this.config.provider.toUpperCase() === 'BPM';
    }
    isEcmConfiguration() {
        return this.config.provider && this.config.provider.toUpperCase() === 'ECM';
    }
    isOauthConfiguration() {
        return this.config.authType === 'OAUTH';
    }
    isPublicUrl() {
        if (this.isOauthConfiguration()) {
            return this.oauth2Auth.isPublicUrl();
        }
        return false;
    }
    isEcmBpmConfiguration() {
        return this.config.provider && this.config.provider.toUpperCase() === 'ALL';
    }
    emitBuffer(event, callback) {
        this.emit(event, callback);
        this.bufferEvents.push(event);
    }
    reply(event, callback) {
        if (this.bufferEvents.indexOf(event) >= 0) {
            Function.prototype.apply.call(callback, this, arguments);
        }
        else {
            this.on(event, callback);
        }
    }
}
exports.AlfrescoApi = AlfrescoApi;
//# sourceMappingURL=../../src/alfrescoApi.js.map