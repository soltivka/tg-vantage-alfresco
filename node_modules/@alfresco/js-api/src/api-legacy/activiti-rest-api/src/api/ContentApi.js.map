{"version":3,"file":"ContentApi.js","sourceRoot":"","sources":["ContentApi.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;;AAGF,mFAAgG;AAEhG,qGAAiG;AAMjG,MAAa,UAAU;IAKZ,IAAI,CAAC,WAAyB;QACjC,IAAI,CAAC,UAAU,GAAG,IAAI,wBAAa,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,mBAAmB,GAAG,IAAI,0CAAmB,CAAC,WAAW,CAAC,CAAC;IACpE,CAAC;IAED,6CAA6C,CAAC,iBAAyB,EAAE,cAA4C,EAAE,IAAU;QAC7H,OAAO,IAAI,CAAC,UAAU,CAAC,qCAAqC,CAAC,iBAAiB,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;IAC1G,CAAC;IAED,qCAAqC,CAAC,iBAAyB,EAAE,IAAS,EAAE,IAAU;QAClF,OAAO,IAAI,CAAC,UAAU,CAAC,qCAAqC,CAAC,iBAAiB,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAChG,CAAC;IAED,kCAAkC,CAAC,MAAc,EAAE,cAAmB,EAAE,IAAU;QAC9E,OAAO,IAAI,CAAC,UAAU,CAAC,0BAA0B,CAAC,MAAM,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;IACpF,CAAC;IAED,0BAA0B,CAAC,MAAc,EAAE,IAAS,EAAE,IAAU;QAC5D,OAAO,IAAI,CAAC,UAAU,CAAC,0BAA0B,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1E,CAAC;IAED,gCAAgC,CAAC,IAAS;QACtC,OAAO,IAAI,CAAC,UAAU,CAAC,gCAAgC,CAAC,IAAI,CAAC,CAAC;IAClE,CAAC;IAED,6BAA6B,CAAC,cAA4C;QACtE,OAAO,IAAI,CAAC,UAAU,CAAC,6BAA6B,CAAC,cAAc,CAAC,CAAC;IACzE,CAAC;IAED,aAAa,CAAC,SAAiB;QAC3B,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IACpD,CAAC;IAED,UAAU,CAAC,SAAiB;QACxB,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IACjD,CAAC;IAED,yBAAyB,CAAC,iBAAyB;QAC/C,OAAO,IAAI,CAAC,mBAAmB,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,CAAC;IACjF,CAAC;IAED,aAAa,CAAC,SAAiB;QAC3B,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IACpD,CAAC;IAED,iBAAiB,CAAC,SAAiB;QAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAC/D,CAAC;IAMD,gBAAgB,CAAC,SAAiB;QAC9B,OAAO,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;IACvD,CAAC;IAED,mBAAmB,CAAC,SAAiB;QACjC,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IACjE,CAAC;IAED,mCAAmC,CAAC,iBAAyB,EAAE,gBAAyB;QACpF,OAAO,IAAI,CAAC,UAAU,CAAC,mCAAmC,CAAC,iBAAiB,EAAE,EAAE,gBAAgB,EAAE,CAAC,CAAC;IACxG,CAAC;IAED,wBAAwB,CAAC,MAAc,EAAE,gBAAyB;QAC9D,OAAO,IAAI,CAAC,UAAU,CAAC,wBAAwB,CAAC,MAAM,EAAE,EAAE,gBAAgB,EAAE,CAAC,CAAC;IAClF,CAAC;CACJ;AAzED,gCAyEC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { AlfrescoApi } from '../../../../alfrescoApi';\nimport { ContentApi as NewContentApi } from '../../../../api/activiti-rest-api/api/content.api';\nimport { RelatedContentRepresentation } from '../../../../api/activiti-rest-api/model/relatedContentRepresentation';\nimport { ProcessInstancesApi } from '../../../../api/activiti-rest-api/api/processInstances.api';\nimport { ResultListDataRepresentationProcessContentRepresentation } from '../../../../api/activiti-rest-api/model/resultListDataRepresentationProcessContentRepresentation';\n\n/**\n * @deprecated 3.0.0\n */\nexport class ContentApi {\n\n    private contentApi: NewContentApi;\n    private processInstancesApi: ProcessInstancesApi;\n\n    public init(alfrescoApi?: AlfrescoApi) {\n        this.contentApi = new NewContentApi(alfrescoApi);\n        this.processInstancesApi = new ProcessInstancesApi(alfrescoApi);\n    }\n\n    createRelatedContentOnProcessInstancePostBody(processInstanceId: string, relatedContent: RelatedContentRepresentation, opts?: any): Promise<RelatedContentRepresentation> {\n        return this.contentApi.createRelatedContentOnProcessInstance(processInstanceId, relatedContent, opts);\n    }\n\n    createRelatedContentOnProcessInstance(processInstanceId: string, file: any, opts?: any): Promise<RelatedContentRepresentation> {\n        return this.contentApi.createRelatedContentOnProcessInstance(processInstanceId, file, opts);\n    }\n\n    createRelatedContentOnTaskPostBody(taskId: string, relatedContent: any, opts?: any): Promise<RelatedContentRepresentation> {\n        return this.contentApi.createRelatedContentOnTask(taskId, relatedContent, opts);\n    }\n\n    createRelatedContentOnTask(taskId: string, file: any, opts?: any): Promise<RelatedContentRepresentation> {\n        return this.contentApi.createRelatedContentOnTask(taskId, file, opts);\n    }\n\n    createTemporaryRawRelatedContent(file: any): Promise<RelatedContentRepresentation> {\n        return this.contentApi.createTemporaryRawRelatedContent(file);\n    }\n\n    createTemporaryRelatedContent(relatedContent: RelatedContentRepresentation): Promise<RelatedContentRepresentation> {\n        return this.contentApi.createTemporaryRelatedContent(relatedContent);\n    }\n\n    deleteContent(contentId: number): Promise<any> {\n        return this.contentApi.deleteContent(contentId);\n    }\n\n    getContent(contentId: number): Promise<RelatedContentRepresentation> {\n        return this.contentApi.getContent(contentId);\n    }\n\n    getProcessInstanceContent(processInstanceId: string): Promise<ResultListDataRepresentationProcessContentRepresentation> {\n        return this.processInstancesApi.getProcessInstanceContent(processInstanceId);\n    }\n\n    getRawContent(contentId: number): Promise<any> {\n        return this.contentApi.getRawContent(contentId);\n    }\n\n    getContentPreview(contentId: number) {\n        return this.contentApi.getRawContent(contentId, 'preview');\n    }\n\n    /**\n     * Get content Raw URL for the given contentId\n     * @param {Number} contentId contentId\n     */\n    getRawContentUrl(contentId: number) {\n        return this.contentApi.getRawContentUrl(contentId);\n    }\n\n    getContentThumbnail(contentId: number) {\n        return this.contentApi.getRawContent(contentId, 'thumbnail');\n    }\n\n    getRelatedContentForProcessInstance(processInstanceId: string, isRelatedContent: boolean) {\n        return this.contentApi.getRelatedContentForProcessInstance(processInstanceId, { isRelatedContent });\n    }\n\n    getRelatedContentForTask(taskId: string, isRelatedContent: boolean) {\n        return this.contentApi.getRelatedContentForTask(taskId, { isRelatedContent });\n    }\n}\n"]}