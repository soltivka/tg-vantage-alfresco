{"version":3,"file":"favoritesApi.js","sourceRoot":"","sources":["favoritesApi.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;;AAGF,sFAAqG;AAQrG,MAAa,YAAY;IAId,IAAI,CAAC,WAAyB;QACjC,IAAI,CAAC,YAAY,GAAG,IAAI,4BAAe,CAAC,WAAW,CAAC,CAAC;IACzD,CAAC;IASD,WAAW,CAAC,QAAgB,EAAE,YAAgC;QAC1D,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IACpE,CAAC;IAWD,WAAW,CAAC,QAAgB,EAAE,UAAkB,EAAE,IAAU;QACxD,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,QAAQ,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;IACrE,CAAC;IAaD,YAAY,CAAC,QAAgB,EAAE,IAAU;QACrC,OAAO,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC3D,CAAC;IAQD,kBAAkB,CAAC,QAAgB,EAAE,UAAkB;QACnD,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IAClE,CAAC;CACJ;AAxDD,oCAwDC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { AlfrescoApi } from '../../../../alfrescoApi';\nimport { FavoritesApi as NewFavoritesApi } from '../../../../api/content-rest-api/api/favorites.api';\nimport { FavoriteEntry } from '../../../../api/content-rest-api/model/favoriteEntry';\nimport { FavoriteBodyCreate } from '../../../../api/content-rest-api/model/favoriteBodyCreate';\nimport { FavoritePaging } from '../../../../api/content-rest-api/model/favoritePaging';\n\n/**\n * @deprecated 3.0.0\n */\nexport class FavoritesApi {\n\n    private favoritesApi: NewFavoritesApi;\n\n    public init(alfrescoApi?: AlfrescoApi) {\n        this.favoritesApi = new NewFavoritesApi(alfrescoApi);\n    }\n\n    /**\n     * Add a favorite\n     * Favorite a **site**, **file**, or **folder** in the repository.\n     * @param {String} personId The identifier of a person.\n     * @param {module:model/FavoriteBody} favoriteBody An object identifying the entity to be favorited. \\n\\nThe object consists of a single property which is an object with the name &#x60;site&#x60;, &#x60;file&#x60;, or &#x60;folder&#x60;. \\nThe content of that object is the &#x60;guid&#x60; of the target entity.\\n\\nFor example, to favorite a file the following body would be used:\\n\\n&#x60;&#x60;&#x60;JSON\\n{\\n   \\&quot;target\\&quot;: {\\n      \\&quot;file\\&quot;: {\\n         \\&quot;guid\\&quot;: \\&quot;abcde-01234\\&quot;\\n      }\\n   }\\n}\\n&#x60;&#x60;&#x60;\\n\n     * data is of type: {module:model/FavoriteEntry}\n     */\n    addFavorite(personId: string, favoriteBody: FavoriteBodyCreate): Promise<FavoriteEntry> {\n        return this.favoritesApi.createFavorite(personId, favoriteBody);\n    }\n\n    /**\n     * Get a favorite\n     * Returns favorite **favoriteId** for person **personId**.\n     * @param {String} personId The identifier of a person.\n     * @param {String} favoriteId The identifier of a favorite.\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/FavoriteEntry}\n     */\n    getFavorite(personId: string, favoriteId: string, opts?: any): Promise<FavoriteEntry> {\n        return this.favoritesApi.getFavorite(personId, favoriteId, opts);\n    }\n\n    /**\n     * Get favorites\n     * Returns a list of favorites for person **personId**.\\n\\nYou can us the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to get the favorites of the currently authenticated user.\\n\\nYou can use the **where** parameter to restrict the list in the response\\nto entries of a specific kind. The **where** parameter takes a value.\\nThe value is a single predicate that can include one or more **EXISTS**\\nconditions. The **EXISTS** condition uses a single operand to limit the\\nlist to include entries that include that one property. The property values are:\\n\\n*   &#x60;target/file&#x60;\\n*   &#x60;target/folder&#x60;\\n*   &#x60;target/site&#x60;\\n\\nFor example, the following **where** parameter restricts the returned list to the file favorites for a person:\\n\\n&#x60;&#x60;&#x60;SQL\\n(EXISTS(target/file))\\n&#x60;&#x60;&#x60;\\nYou can specify more than one condition using **OR**. The predicate must be enclosed in parentheses.\\n\\n\\nFor example, the following **where** parameter restricts the returned list to the file and folder favorites for a person:\\n\\n&#x60;&#x60;&#x60;SQL\\n(EXISTS(target/file) OR EXISTS(target/folder))\\n&#x60;&#x60;&#x60;\\n\n     * @param {String} personId The identifier of a person.\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {String} opts.where A string to restrict the returned objects by using a predicate.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/FavoritePaging}\n     */\n    getFavorites(personId: string, opts?: any): Promise<FavoritePaging> {\n        return this.favoritesApi.listFavorites(personId, opts);\n    }\n\n    /**\n     * Delete a favorite\n     * Removes **favoriteId** as a favorite of person **personId**.\n     * @param {String} personId The identifier of a person.\n     * @param {String} favoriteId The identifier of a favorite.\n     */\n    removeFavoriteSite(personId: string, favoriteId: string): Promise<any> {\n        return this.favoritesApi.deleteFavorite(personId, favoriteId);\n    }\n}\n"]}