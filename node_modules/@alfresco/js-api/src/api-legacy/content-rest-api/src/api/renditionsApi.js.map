{"version":3,"file":"renditionsApi.js","sourceRoot":"","sources":["renditionsApi.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;;AAGF,wFAAwG;AACxG,0FAAsF;AAQtF,MAAa,aAAa;IAKf,IAAI,CAAC,WAAyB;QACjC,IAAI,CAAC,aAAa,GAAG,IAAI,8BAAgB,CAAC,WAAW,CAAC,CAAC;QACvD,IAAI,CAAC,cAAc,GAAG,IAAI,gCAAc,CAAC,WAAW,CAAC,CAAC;IAC1D,CAAC;IAQD,eAAe,CAAC,MAAc,EAAE,aAAkC;QAC9D,OAAO,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;IACrE,CAAC;IASD,YAAY,CAAC,MAAc,EAAE,WAAmB;QAC5C,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;IAChE,CAAC;IAWD,mBAAmB,CAAC,MAAc,EAAE,WAAmB,EAAE,IAAU;QAC/D,OAAO,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IAC7E,CAAC;IAQD,aAAa,CAAC,MAAc;QACxB,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IACrD,CAAC;IAED,6BAA6B,CAAC,QAAgB,EAAE,WAAmB,EAAE,IAAU;QAC3E,OAAO,IAAI,CAAC,cAAc,CAAC,6BAA6B,CAAC,QAAQ,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IAC1F,CAAC;IAED,uBAAuB,CAAC,QAAgB;QACpC,OAAO,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;IAClE,CAAC;IAED,sBAAsB,CAAC,QAAgB,EAAE,WAAmB;QACxD,OAAO,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IAC7E,CAAC;CAEJ;AAlED,sCAkEC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { AlfrescoApi } from '../../../../alfrescoApi';\nimport { RenditionsApi as NewRenditionsApi } from '../../../../api/content-rest-api/api/renditions.api';\nimport { SharedlinksApi } from '../../../../api/content-rest-api/api/sharedlinks.api';\nimport { RenditionBodyCreate } from '../../../../api/content-rest-api/model/renditionBodyCreate';\nimport { RenditionEntry } from '../../../../api/content-rest-api/model/renditionEntry';\nimport { RenditionPaging } from '../../../../api/content-rest-api/model/renditionPaging';\n\n/**\n * @deprecated 3.0.0\n */\nexport class RenditionsApi {\n\n    renditionsApi: NewRenditionsApi;\n    sharedlinksApi: SharedlinksApi;\n\n    public init(alfrescoApi?: AlfrescoApi) {\n        this.renditionsApi = new NewRenditionsApi(alfrescoApi);\n        this.sharedlinksApi = new SharedlinksApi(alfrescoApi);\n    }\n\n    /**\n     * Create rendition\n     * Async request to create a rendition for file with identifier\\n**nodeId**. The rendition is specified by name \\&quot;id\\&quot; in the request body:\\n&#x60;&#x60;&#x60;JSON\\n{\\n  \\&quot;id\\&quot;:\\&quot;doclib\\&quot;\\n}\\n&#x60;&#x60;&#x60;\\n\n     * @param {String} nodeId The identifier of a node. You can also use one of these well-known aliases:\\n* -my-\\n* -shared-\\n* -root-\\n\n     * @param {module:model/RenditionBody} renditionBody The rendition \\&quot;id\\&quot;.\n     */\n    createRendition(nodeId: string, renditionBody: RenditionBodyCreate): Promise<any> {\n        return this.renditionsApi.createRendition(nodeId, renditionBody);\n    }\n\n    /**\n     * Get rendition information\n     * Returns the rendition information for file node with identifier **nodeId**.\n     * @param {String} nodeId The identifier of a node.\n     * @param {String} renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*.\n     * data is of type: {module:model/RenditionEntry}\n     */\n    getRendition(nodeId: string, renditionId: string): Promise<RenditionEntry> {\n        return this.renditionsApi.getRendition(nodeId, renditionId);\n    }\n\n    /**\n     * Get rendition content\n     * Returns the rendition content for file node with identifier **nodeId**.\n     * @param {String} nodeId The identifier of a node.\n     * @param {String} renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.attachment **true** enables a web browser to download the file as an attachment.\\n**false** means a web browser may preview the file in a new tab or window, but not\\ndownload the file.\\n\\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\\nfor example, certain image files and PDF files.\\n\\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\\nthe attachment will be returned in the response.\\n (default to true)\n     * @param {Date} opts.ifModifiedSince Only returns the content if it has been modified since the date provided.\\nUse the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.\\n\n     */\n    getRenditionContent(nodeId: string, renditionId: string, opts?: any): Promise<any> {\n        return this.renditionsApi.getRenditionContent(nodeId, renditionId, opts);\n    }\n\n    /**\n     * List information for renditions\n     * Returns the rendition information for the file node with identifier **nodeId**.\\nThis will return rendition information, including the rendition id, for each rendition. The\\u00A0rendition status is CREATED (ie. available\\u00A0to view/download) or NOT_CREATED (ie. rendition can be requested).\n     * @param {String} nodeId The identifier of a node.\n     * data is of type: {module:model/RenditionPaging}\n     */\n    getRenditions(nodeId: string): Promise<RenditionPaging> {\n        return this.renditionsApi.listRenditions(nodeId);\n    }\n\n    getSharedLinkRenditionContent(sharedId: string, renditionId: string, opts?: any): Promise<any> {\n        return this.sharedlinksApi.getSharedLinkRenditionContent(sharedId, renditionId, opts);\n    }\n\n    getSharedLinkRenditions(sharedId: string): Promise<RenditionPaging> {\n        return this.sharedlinksApi.listSharedLinkRenditions(sharedId);\n    }\n\n    getSharedLinkRendition(sharedId: string, renditionId: string): Promise<RenditionEntry> {\n        return this.sharedlinksApi.getSharedLinkRendition(sharedId, renditionId);\n    }\n\n}\n"]}