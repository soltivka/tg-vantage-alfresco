{"version":3,"file":"sitesApi.js","sourceRoot":"","sources":["sitesApi.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;;AAIF,8EAAyF;AAczF,MAAa,QAAQ;IAIV,IAAI,CAAC,WAAyB;QACjC,IAAI,CAAC,QAAQ,GAAG,IAAI,oBAAW,CAAC,WAAW,CAAC,CAAC;IACjD,CAAC;IASD,aAAa,CAAC,MAAc,EAAE,cAAwC;QAClE,OAAO,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IACtE,CAAC;IAWD,UAAU,CAAC,QAAwB,EAAE,IAAU;QAC3C,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IACpD,CAAC;IAWD,UAAU,CAAC,MAAc,EAAE,QAAwB,EAAE,IAAU;QAC3D,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC5D,CAAC;IASD,UAAU,CAAC,MAAc,EAAE,IAAU;QACjC,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC;IAWD,OAAO,CAAC,MAAc,EAAE,IAAU;QAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;IAWD,gBAAgB,CAAC,MAAc,EAAE,WAAmB,EAAE,IAAU;QAC5D,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IACrE,CAAC;IAYD,iBAAiB,CAAC,MAAc,EAAE,IAAU;QACxC,OAAO,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC;IAWD,aAAa,CAAC,MAAc,EAAE,QAAgB,EAAE,IAAU;QACtD,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IACnE,CAAC;IAYD,cAAc,CAAC,MAAc,EAAE,IAAU;QACrC,OAAO,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC3D,CAAC;IAaD,QAAQ,CAAC,IAAU;QACf,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAQD,gBAAgB,CAAC,MAAc,EAAE,QAAgB;QAC7C,OAAO,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAChE,CAAC;IAUD,gBAAgB,CAAC,MAAc,EAAE,QAAgB,EAAE,kBAA4C;QAC3F,OAAO,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,kBAAkB,CAAC,CAAC;IACpF,CAAC;CACJ;AA/JD,4BA+JC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { SiteBodyUpdate } from '../../../../api/content-rest-api/model/siteBodyUpdate';\nimport { SiteBodyCreate } from '../../../../api/content-rest-api/model/siteBodyCreate';\nimport { SitesApi as NewSitesApi } from '../../../../api/content-rest-api/api/sites.api';\nimport { AlfrescoApi } from '../../../../alfrescoApi';\nimport { SiteMemberEntry } from '../../../../api/content-rest-api/model/siteMemberEntry';\nimport { SiteMembershipBodyCreate } from '../../../../api/content-rest-api/model/siteMembershipBodyCreate';\nimport { SiteEntry } from '../../../../api/content-rest-api/model/siteEntry';\nimport { SiteContainerEntry } from '../../../../api/content-rest-api/model/siteContainerEntry';\nimport { SiteContainerPaging } from '../../../../api/content-rest-api/model/siteContainerPaging';\nimport { SiteMemberPaging } from '../../../../api/content-rest-api/model/siteMemberPaging';\nimport { SitePaging } from '../../../../api/content-rest-api/model/sitePaging';\nimport { SiteMembershipBodyUpdate } from '../../../../api/content-rest-api/model/siteMembershipBodyUpdate';\n\n/**\n * @deprecated 3.0.0\n */\nexport class SitesApi {\n\n    private sitesApi: NewSitesApi;\n\n    public init(alfrescoApi?: AlfrescoApi) {\n        this.sitesApi = new NewSitesApi(alfrescoApi);\n    }\n\n    /**\n     * Add a person\n     * Adds person **personId** as a member of site **siteId**.\\n\\nYou can set the **role** to one of four types:\\n\\n* SiteConsumer\\n* SiteCollaborator\\n* SiteContributor\\n* SiteManager\\n\n     * @param {String} siteId The identifier of a site.\n     * @param {module:model/SiteMemberBody} siteMemberBody The person to add and their role\n     * data is of type: {module:model/SiteMemberEntry}\n     */\n    addSiteMember(siteId: string, siteMemberBody: SiteMembershipBodyCreate): Promise<SiteMemberEntry> {\n        return this.sitesApi.createSiteMembership(siteId, siteMemberBody);\n    }\n\n    /**\n     * Create a site\n     * Creates a default site with the given details.  Unless explicitly specified, the site id will be generated from the site title. The site id must be unique and only contain alphanumeric and/or dash\\ncharacters.\\n\\nFor example, to create a public site called \\&quot;Marketing\\&quot; the following body could be used:\\n&#x60;&#x60;&#x60;JSON\\n{\\n  \\&quot;title\\&quot;: \\&quot;Marketing\\&quot;,\\n  \\&quot;visibility\\&quot;: \\&quot;PUBLIC\\&quot;\\n}\\n&#x60;&#x60;&#x60;\\n\\nThe creation of the (surf) configuration files required by Share can be skipped via the **skipConfiguration** query parameter.\\n\\n**Please note: if skipped then such a site will *not* work within Share.**\\n\\nThe addition of the site to the user&#39;s site favorites can be skipped via the **skipAddToFavorites** query parameter.\\n\\nThe creator will be added as a member with Site Manager role.\\n\n     * @param {module:model/SiteBody} siteBody The site details\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.skipConfiguration Flag to indicate whether the Share-specific (surf) configuration files for the site should not be created. (default to false)\n     * @param {Boolean} opts.skipAddToFavorites Flag to indicate whether the site should not be added to the user&#39;s site favorites. (default to false)\n     * data is of type: {module:model/SiteEntry}\n     */\n    createSite(siteBody: SiteBodyCreate, opts?: any): Promise<SiteEntry> {\n        return this.sitesApi.createSite(siteBody, opts);\n    }\n\n    /**\n     * Update a site\n     * Update existing site\n     * @param {String} siteId The identifier of a site.\n     * @param {module:model/SiteBody} siteBody The site details\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/SiteEntry}\n     */\n    updateSite(siteId: string, siteBody: SiteBodyUpdate, opts?: any): Promise<SiteEntry> {\n        return this.sitesApi.updateSite(siteId, siteBody, opts);\n    }\n\n    /**\n     * Delete a site\n     * Deletes the site with **siteId**.\n     * @param {String} siteId The identifier of a site.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.permanent Flag to indicate whether the site should be permanently deleted i.e. bypass the trashcan. (default to false)\n     */\n    deleteSite(siteId: string, opts?: any): Promise<any> {\n        return this.sitesApi.deleteSite(siteId, opts);\n    }\n\n    /**\n     * Get a site\n     * Returns information for site **siteId**.\\n\\nYou can use the **relations** parameter to include one or more related\\nentities in a single response and so reduce network traffic.\\n\\nThe entity types in Alfresco are organized in a tree structure.\\nThe **sites** entity has two children, **containers** and **members**.\\nThe following relations parameter returns all the container and member\\nobjects related to the site **siteId**:\\n\\n&#x60;&#x60;&#x60;\\ncontainers,members\\n&#x60;&#x60;&#x60;\\n\n     * @param {String} siteId The identifier of a site.\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.relations Use the relations parameter to include one or more related entities in a single response.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/SiteEntry}\n     */\n    getSite(siteId: string, opts?: any): Promise<SiteEntry> {\n        return this.sitesApi.getSite(siteId, opts);\n    }\n\n    /**\n     * Get a container\n     * Returns information on the container **containerId** in site **siteId**.\n     * @param {String} siteId The identifier of a site.\n     * @param {String} containerId The unique identifier of a site container.\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/SiteContainerEntry}\n     */\n    getSiteContainer(siteId: string, containerId: string, opts?: any): Promise<SiteContainerEntry> {\n        return this.sitesApi.getSiteContainer(siteId, containerId, opts);\n    }\n\n    /**\n     * Get containers\n     * Returns a list of containers information for site identified by **siteId**.\n     * @param {String} siteId The identifier of a site.\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/SiteContainerPaging}\n     */\n    getSiteContainers(siteId: string, opts?: any): Promise<SiteContainerPaging> {\n        return this.sitesApi.listSiteContainers(siteId, opts);\n    }\n\n    /**\n     * Get a site member\n     * Returns site membership information for person **personId** on site **siteId**.\n     * @param {String} siteId The identifier of a site.\n     * @param {String} personId The identifier of a person.\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/SiteMemberEntry}\n     */\n    getSiteMember(siteId: string, personId: string, opts?: any): Promise<SiteMemberEntry> {\n        return this.sitesApi.getSiteMembership(siteId, personId, opts);\n    }\n\n    /**\n     * Get members\n     * Returns a list of site memberships for site **siteId**.\n     * @param {String} siteId The identifier of a site.\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/SiteMemberPaging}\n     */\n    getSiteMembers(siteId: string, opts?: any): Promise<SiteMemberPaging> {\n        return this.sitesApi.listSiteMemberships(siteId, opts);\n    }\n\n    /**\n     * Get sites\n     * Returns a list of sites in this repository. You can sort the list if sites using the **orderBy** parameter.\\n**orderBy** specifies the name of one or more\\ncomma separated properties.\\nFor each property you can optionally specify the order direction.\\nBoth of the these **orderBy** examples retrieve sites ordered by ascending name:\\n\\n&#x60;&#x60;&#x60;\\nname\\nname ASC\\n&#x60;&#x60;&#x60;\\n\\nYou can use the **relations** parameter to include one or more related\\nentities in a single response and so reduce network traffic.\\n\\nThe entity types in Alfresco are organized in a tree structure.\\nThe **sites** entity has two children, **containers** and **members**.\\nThe following relations parameter returns all the container and member\\nobjects related to each site:\\n\\n&#x60;&#x60;&#x60;\\ncontainers,members\\n&#x60;&#x60;&#x60;\\n\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {String} opts.orderBy A string to control the order of the entities returned.\n     * @param {string[]} opts.relations Use the relations parameter to include one or more related entities in a single response.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/SitePaging}\n     */\n    getSites(opts?: any): Promise<SitePaging> {\n        return this.sitesApi.listSites(opts);\n    }\n\n    /**\n     * Delete a site member\n     * Removes person **personId** as a member of site **siteId**.\n     * @param {String} siteId The identifier of a site.\n     * @param {String} personId The identifier of a person.\n     */\n    removeSiteMember(siteId: string, personId: string): Promise<any> {\n        return this.sitesApi.deleteSiteMembership(siteId, personId);\n    }\n\n    /**\n     * Update a site member\n     * Update the membership of person **personId** in site **siteId**.\\n\\nYou can set the **role** to one of four types:\\n\\n* SiteConsumer\\n* SiteCollaborator\\n* SiteContributor\\n* SiteManager\\n\n     * @param {String} siteId The identifier of a site.\n     * @param {String} personId The identifier of a person.\n     * @param {module:model/SiteMemberRoleBody} siteMemberRoleBody The persons new role\n     * data is of type: {module:model/SiteMemberEntry}\n     */\n    updateSiteMember(siteId: string, personId: string, siteMemberRoleBody: SiteMembershipBodyUpdate): Promise<SiteMemberEntry> {\n        return this.sitesApi.updateSiteMembership(siteId, personId, siteMemberRoleBody);\n    }\n}\n"]}