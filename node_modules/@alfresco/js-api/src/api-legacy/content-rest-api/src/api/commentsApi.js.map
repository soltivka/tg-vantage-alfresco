{"version":3,"file":"commentsApi.js","sourceRoot":"","sources":["commentsApi.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;;AAGF,oFAAkG;AAQlG,MAAa,WAAW;IAIb,IAAI,CAAC,WAAyB;QACjC,IAAI,CAAC,WAAW,GAAG,IAAI,0BAAc,CAAC,WAAW,CAAC,CAAC;IACvD,CAAC;IAYD,UAAU,CAAC,MAAc,EAAE,WAAwB,EAAE,IAAU;QAC3D,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IACrE,CAAC;IAYD,WAAW,CAAC,MAAc,EAAE,IAAU;QAClC,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC;IAQD,aAAa,CAAC,MAAc,EAAE,SAAiB;QAC3C,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IAC7D,CAAC;IAYD,aAAa,CAAC,MAAc,EAAE,SAAiB,EAAE,WAAwB,EAAE,IAAU;QACjF,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IAChF,CAAC;CACJ;AA3DD,kCA2DC","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { AlfrescoApi } from '../../../../alfrescoApi';\nimport { CommentsApi as NewCommentsApi } from '../../../../api/content-rest-api/api/comments.api';\nimport { CommentEntry } from '../../../../api/content-rest-api/model/commentEntry';\nimport { CommentPaging } from '../../../../api/content-rest-api/model/commentPaging';\nimport { CommentBody } from '../../../../api/content-rest-api/model/commentBody';\n\n/**\n * @deprecated 3.0.0\n */\nexport class CommentsApi {\n\n    private commentsApi: NewCommentsApi;\n\n    public init(alfrescoApi?: AlfrescoApi) {\n        this.commentsApi = new NewCommentsApi(alfrescoApi);\n    }\n\n    /**\n     * Add a comment\n     * Creates one or more comments on node **nodeId**. You can create more than one comment by \\nspecifying a list of comments in the JSON body like this:      \\n\\n&#x60;&#x60;&#x60;JSON\\n[\\n  {\\n    \\&quot;content\\&quot;: \\&quot;This is a comment\\&quot;\\n  },\\n  {\\n    \\&quot;content\\&quot;: \\&quot;This is another comment\\&quot;\\n  }\\n]\\n&#x60;&#x60;&#x60;\\n\n     * @param {String} nodeId The identifier of a node.\n     * @param {module:model/CommentBody} commentBody The comment text. Note that you can provide an array of comments.\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CommentEntry}\n     * data is of type: {module:model/CommentEntry}\n     */\n    addComment(nodeId: string, commentBody: CommentBody, opts?: any): Promise<CommentEntry> {\n        return this.commentsApi.createComment(nodeId, commentBody, opts);\n    }\n\n    /**\n     * Get comments\n     * Returns a list of comments for the node identified by **nodeId**, sorted chronologically with the newest comment first.\n     * @param {String} nodeId The identifier of a node.\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param {Integer} opts.maxItems The maximum number of items to return in the list.\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/CommentPaging}\n     */\n    getComments(nodeId: string, opts?: any): Promise<CommentPaging> {\n        return this.commentsApi.listComments(nodeId, opts);\n    }\n\n    /**\n     * Delete a comment\n     * Removes the comment **commentId** from node **nodeId**.\n     * @param {String} nodeId The identifier of a node.\n     * @param {String} commentId The identifier of a comment.\n     */\n    removeComment(nodeId: string, commentId: string): Promise<any> {\n        return this.commentsApi.deleteComment(nodeId, commentId);\n    }\n\n    /**\n     * Update a comment\n     * Updates an existing comment **commentId** on node **nodeId**.\n     * @param {String} nodeId The identifier of a node.\n     * @param {String} commentId The identifier of a comment.\n     * @param {module:model/CommentBody1} commentBody The JSON representing the comment to be updated.\n     * @param {Object} opts Optional parameters\n     * @param {string[]} opts.fields A list of field names.\\n\\nYou can use this parameter to restrict the fields\\nreturned within a response if, for example, you want to save on overall bandwidth.\\n\\nThe list applies to a returned individual\\nentity or entries within a collection.\\n\\nIf the API method also supports the **include**\\nparameter, then the fields specified in the **include**\\nparameter are returned in addition to those specified in the **fields** parameter.\\n\n     * data is of type: {module:model/CommentEntry}\n     */\n    updateComment(nodeId: string, commentId: string, commentBody: CommentBody, opts?: any): Promise<any> {\n        return this.commentsApi.updateComment(nodeId, commentId, commentBody, opts);\n    }\n}\n"]}