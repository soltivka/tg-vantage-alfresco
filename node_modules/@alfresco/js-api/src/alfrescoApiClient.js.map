{"version":3,"file":"alfrescoApiClient.js","sourceRoot":"","sources":["alfrescoApiClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n* @license\n* Copyright 2018 Alfresco Software, Ltd.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport ee from 'event-emitter';\nimport { AlfrescoApiConfig } from './alfrescoApiConfig';\nimport superagent, { Response, ProgressEvent } from 'superagent';\nimport { Authentication } from './authentication/authentication';\nimport { BasicAuth } from './authentication/basicAuth';\nimport { Oauth2 } from './authentication/oauth2';\n\ndeclare const Buffer: any;\ndeclare const Blob: any;\n\nexport interface RequestOptions {\n    path: string;\n    httpMethod?: string;\n    pathParams?: any;\n    queryParams?: any;\n    headerParams?: any;\n    formParams?: any;\n    bodyParam?: any;\n    contentTypes?: string[];\n    accepts?: string[];\n    returnType?: any;\n    contextRoot?: string;\n    responseType?: string;\n    url?: string;\n}\n\n/**\n * Returns a string representation for an actual parameter.\n * @param param The actual parameter.\n * @returns The string representation of <code>param</code>.\n */\nexport function paramToString(param: any): string {\n    if (param === undefined || param === null) {\n        return '';\n    }\n    if (param instanceof Date) {\n        return param.toJSON();\n    }\n    return param.toString();\n}\n\n/**\n * Builds a string representation of an array-type actual parameter, according to the given collection format.\n * @param {Array} param An array parameter.\n * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n */\nexport function buildCollectionParam(param: string[], collectionFormat: string): string | any[] {\n    if (!param) {\n        return null;\n    }\n\n    switch (collectionFormat) {\n        case 'csv':\n            return param.map(paramToString).join(',');\n        case 'ssv':\n            return param.map(paramToString).join(' ');\n        case 'tsv':\n            return param.map(paramToString).join('\\t');\n        case 'pipes':\n            return param.map(paramToString).join('|');\n        case 'multi':\n            // return the array directly as SuperAgent will handle it as expected\n            return param.map(paramToString);\n        default:\n            throw new Error('Unknown collection format: ' + collectionFormat);\n    }\n}\n\nexport class AlfrescoApiClient implements ee.Emitter {\n\n    on: ee.EmitterMethod;\n    off: ee.EmitterMethod;\n    once: ee.EmitterMethod;\n    emit: (type: string, ...args: any[]) => void;\n\n    host: string;\n    className: string;\n    config: AlfrescoApiConfig;\n    url: string;\n    /**\n     * The base URL against which to resolve every API call's (relative) path.\n     */\n    basePath: string = '';\n\n    /**\n     * The authentication methods to be included for all API calls.\n     */\n    authentications: Authentication = {\n        basicAuth: {\n            ticket: ''\n        },\n        type: 'basic'\n    };\n    /**\n     * The default HTTP headers to be included for all API calls.\n     */\n    defaultHeaders = {};\n\n    /**\n     * The default HTTP timeout for all API calls.\n     */\n    timeout: number | { deadline?: number, response?: number } = undefined;\n\n    contentTypes = {\n        JSON: ['application/json']\n    };\n\n    constructor(host?: string) {\n        this.host = host;\n\n        ee(this);\n    }\n\n    /**\n     * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n     * NOTE: query parameters are not handled here.\n     * @param  path The path to append to the base URL.\n     * @param  pathParams The parameter values to append.\n     * @returns  The encoded path with parameter values substituted.\n     */\n    buildUrl(path: string, pathParams: any): string {\n        if (!path.match(/^\\//)) {\n            path = '/' + path;\n        }\n        let url = this.basePath + path;\n\n        url = url.replace(/\\{([\\w-]+)\\}/g, function (fullMatch, key) {\n            let value;\n            if (pathParams.hasOwnProperty(key)) {\n                value = paramToString(pathParams[key]);\n            } else {\n                value = fullMatch;\n            }\n            return encodeURIComponent(value);\n        });\n        return url;\n    }\n\n    /**\n     * Checks whether the given content type represents JSON.<br>\n     * JSON content type examples:<br>\n     * <ul>\n     * <li>application/json</li>\n     * <li>application/json; charset=UTF8</li>\n     * <li>APPLICATION/JSON</li>\n     * </ul>\n     * @param contentType The MIME content type to check.\n     * @returns <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n     */\n    isJsonMime(contentType: string): boolean {\n        return Boolean(contentType !== null && contentType.match(/^application\\/json(;.*)?$/i));\n    }\n\n    /**\n     * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n     * @param contentTypes\n     * @returns  The chosen content type, preferring JSON.\n     */\n    jsonPreferredMime(contentTypes: string[]): string {\n        for (let i = 0; i < contentTypes.length; i++) {\n            if (this.isJsonMime(contentTypes[i])) {\n                return contentTypes[i];\n            }\n        }\n        return contentTypes[0];\n    }\n\n    /**\n     * Checks whether the given parameter value represents file-like content.\n     * @param param The parameter to check.\n     * @returns <code>true</code> if <code>param</code> represents a file.\n     */\n    isFileParam(param: any): boolean {\n        // Buffer in Node.js\n        if (typeof Buffer === 'function' && (param instanceof Buffer || param.path)) {\n            return true;\n        }\n        // Blob in browser\n        if (typeof Blob === 'function' && param instanceof Blob) {\n            return true;\n        }\n        // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n        if (typeof File === 'function' && param instanceof File) {\n            return true;\n        }\n        // Safari fix\n        if (typeof File === 'object' && param instanceof File) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Normalizes parameter values:\n     * <ul>\n     * <li>remove nils</li>\n     * <li>keep files and arrays</li>\n     * <li>format to string with `paramToString` for other cases</li>\n     * </ul>\n     * @param {Object.<String, Object>} params The parameters as object properties.\n     * @returns {Object.<String, Object>} normalized parameters.\n     */\n    normalizeParams(params: { [key: string]: any; }): { [key: string]: any; } {\n        const newParams: { [key: string]: any; } = {};\n\n        for (const key in params) {\n            if (params.hasOwnProperty(key) && params[key] !== undefined && params[key] !== null) {\n                const value = params[key];\n                if (this.isFileParam(value) || Array.isArray(value)) {\n                    newParams[key] = value;\n                } else {\n                    newParams[key] = paramToString(value);\n                }\n            }\n        }\n        return newParams;\n    }\n\n    isWithCredentials(): boolean {\n        if (this.config) {\n            return this.config.withCredentials;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Applies authentication headers to the request.\n     * @param {Object} request The request object created by a <code>superagent()</code> call.\n     */\n    applyAuthToRequest(request: any) {\n        if (this.authentications) {\n            switch (this.authentications.type) {\n                case 'basic': {\n                    const basicAuth: BasicAuth = this.authentications.basicAuth;\n                    if (basicAuth.username || basicAuth.password) {\n                        request.auth(\n                            basicAuth.username ? encodeURI(basicAuth.username) : '',\n                            basicAuth.password ? encodeURI(basicAuth.password) : ''\n                        );\n                    }\n                    break;\n                }\n                case 'activiti': {\n                    if (this.authentications.basicAuth.ticket) {\n                        request.set({ 'Authorization': this.authentications.basicAuth.ticket });\n                    }\n                    break;\n                }\n                case 'oauth2': {\n                    const oauth2: Oauth2 = this.authentications.oauth2;\n                    if (oauth2.accessToken) {\n                        request.set({ 'Authorization': 'Bearer ' + oauth2.accessToken });\n                    }\n                    break;\n                }\n                default:\n                    throw new Error('Unknown authentication type: ' + this.authentications.type);\n            }\n        }\n    }\n\n    /**\n     * Deserializes an HTTP response body into a value of the specified type.\n     * @param {Object} response A SuperAgent response object.\n     * @param {(String|string[]|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n     * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n     * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n     * all properties on <code>data<code> will be converted to this type.\n     * @returns A value of the specified type.\n     */\n    deserialize(response: any, returnType?: any): any {\n        if (response === null) {\n            return null;\n        }\n\n        let data = response.body;\n\n        if (data === null) {\n            data = response.text;\n        }\n\n        if (returnType) {\n            if (returnType === 'blob' && this.isBrowser()) {\n                data = new Blob([data], { type: response.header['content-type'] });\n            } else if (returnType === 'blob' && !this.isBrowser()) {\n                data = new Buffer.from(data, 'binary');\n            } else if (Array.isArray(data)) {\n                data = data.map((element) => {\n                    return new returnType(element);\n                });\n            } else {\n                data = new returnType(data);\n            }\n        }\n\n        return data;\n    }\n\n    basicAuth(username: string, password: string): string {\n        const str: any = username + ':' + password;\n\n        let base64;\n\n        if (typeof Buffer === 'function') {\n            base64 = Buffer.from(str.toString(), 'binary').toString('base64');\n        } else {\n            base64 = btoa(str);\n        }\n\n        return 'Basic ' + base64;\n    }\n\n    /**\n     * Invokes the REST service using the supplied settings and parameters.\n     *\n     * @param {String} path The base URL to invoke.\n     * @param {String} httpMethod The HTTP method to use.\n     * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n     * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n     * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n     * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n     * @param {Object} bodyParam The value to pass as the request body.\n     * @param {String[]} contentTypes An array of request MIME types.\n     * @param {String[]} accepts An array of acceptable response MIME types.\n     * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n     * @param {(String)} contextRoot alternative contextRoot\n     * @param {(String)} responseType  is an enumerated value that returns the type of the response.\n     *                                  It also lets the author change the response type to one \"arraybuffer\", \"blob\", \"document\",\n     *                                  \"json\", or \"text\".\n     *                                   If an empty string is set as the value of responseType, it is assumed as type \"text\".\n     * constructor for a complex type.   * @returns {Promise} A Promise object.\n     */\n    callApi(path: string, httpMethod: string, pathParams?: any, queryParams?: any, headerParams?: any, formParams?: any, bodyParam?: any,\n            contentTypes?: string[], accepts?: string[], returnType?: any, contextRoot?: string, responseType?: string, url?: string): Promise<any> {\n\n        if (!url) {\n            if (contextRoot) {\n                const basePath = `${this.host}/${contextRoot}`;\n                url = this.buildUrlCustomBasePath(basePath, path, pathParams);\n            } else {\n                url = this.buildUrl(path, pathParams);\n            }\n        }\n        return this.callHostApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam,\n            contentTypes, accepts, returnType, contextRoot, responseType, url);\n    }\n\n    request<T = any>(options: RequestOptions): Promise<T> {\n        return this.callApi(\n            options.path,\n            options.httpMethod,\n            options.pathParams,\n            options.queryParams,\n            options.headerParams,\n            options.formParams,\n            options.bodyParam,\n            options.contentTypes,\n            options.accepts,\n            options.returnType,\n            options.contextRoot,\n            options.responseType,\n            options.url\n        );\n    }\n\n    post<T = any>(options: RequestOptions): Promise<T> {\n        return this.request<T>({\n            ...options,\n            httpMethod: 'POST',\n            contentTypes: options.contentTypes || this.contentTypes.JSON,\n            accepts: options.accepts || this.contentTypes.JSON\n        });\n    }\n\n    put<T = any>(options: RequestOptions): Promise<T> {\n        return this.request<T>({\n            ...options,\n            httpMethod: 'PUT',\n            contentTypes: options.contentTypes || this.contentTypes.JSON,\n            accepts: options.accepts || this.contentTypes.JSON\n        });\n    }\n\n    get<T = any>(options: RequestOptions): Promise<T> {\n        return this.request<T>({\n            ...options,\n            httpMethod: 'GET',\n            contentTypes: options.contentTypes || this.contentTypes.JSON,\n            accepts: options.accepts || this.contentTypes.JSON\n        });\n    }\n\n    delete<T = void>(options: RequestOptions): Promise<T> {\n        return this.request<T>({\n            ...options,\n            httpMethod: 'DELETE',\n            contentTypes: options.contentTypes || this.contentTypes.JSON,\n            accepts: options.accepts || this.contentTypes.JSON\n        });\n    }\n\n    /**\n     * Invokes the REST service using the supplied settings and parameters but not the basepath.\n     *\n     * @param {String} path The base URL to invoke.\n     * @param {String} httpMethod The HTTP method to use.\n     * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n     * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n     * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n     * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n     * @param {Object} bodyParam The value to pass as the request body.\n     * @param {String[]} contentTypes An array of request MIME types.\n     * @param {String[]} accepts An array of acceptable response MIME types.\n     * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n     * @param {(String)} contextRoot alternative contextRoot\n     * @param {(String)} responseType  is an enumerated value that returns the type of the response.\n     *                                  It also lets the author change the response type to one \"arraybuffer\", \"blob\", \"document\",\n     *                                  \"json\", or \"text\".\n     *                                   If an empty string is set as the value of responseType, it is assumed as type \"text\".\n     * constructor for a complex type.   * @returns {Promise} A Promise object.\n     */\n    callCustomApi(path: string, httpMethod: string, pathParams?: any, queryParams?: any, headerParams?: any, formParams?: any, bodyParam?: any,\n                  contentTypes?: string[], accepts?: string[], returnType?: any, contextRoot?: string, responseType?: string): Promise<any> {\n        const url = this.buildUrlCustomBasePath(path, '', pathParams);\n\n        return this.callHostApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam,\n            contentTypes, accepts, returnType, contextRoot, responseType, url);\n    }\n\n    /**\n     * Invokes the REST service using the supplied settings and parameters.\n     *\n     * @param {String} path The base URL to invoke.\n     * @param {String} httpMethod The HTTP method to use.\n     * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n     * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n     * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n     * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n     * @param {Object} bodyParam The value to pass as the request body.\n     * @param {String[]} contentTypes An array of request MIME types.\n     * @param {String[]} accepts An array of acceptable response MIME types.\n     * @param {(String|Array|any)} returnType The required type to return; can be a string for simple types or the\n     * @param {(String)} contextRoot alternative contextRoot\n     * @param {(String)} responseType  is an enumerated value that returns the type of the response.\n     *                                  It also lets the author change the response type to one \"arraybuffer\", \"blob\", \"document\",\n     *                                  \"json\", or \"text\".\n     *                                   If an empty string is set as the value of responseType, it is assumed as type \"text\".\n     * constructor for a complex type.   * @returns {Promise} A Promise object.\n     */\n    callHostApi(\n        // @ts-ignore\n        path: string,\n        httpMethod: string,\n        // @ts-ignore\n        pathParams?: any,\n        queryParams?: any, headerParams?: any, formParams?: any, bodyParam?: any,\n        contentTypes?: string[], accepts?: string[], returnType?: any,\n        // @ts-ignore\n        contextRoot?: string,\n        responseType?: string, url?: string): Promise<any> {\n\n        const eventEmitter: any = ee({});\n\n        let request = this.buildRequest(httpMethod, url, queryParams, headerParams, formParams, bodyParam,\n            contentTypes, accepts, responseType, eventEmitter, returnType);\n\n        if (returnType === 'Binary') {\n            request = request.buffer(true).parse(superagent.parse['application/octet-stream']);\n        }\n\n        const promise: any = new Promise((resolve, reject) => {\n            request.on('abort', () => {\n                eventEmitter.emit('abort');\n            });\n            request.end((error: any, response: Response) => {\n                if (error) {\n\n                    this.emit('error', error);\n                    eventEmitter.emit('error', error);\n\n                    if (error.status === 401) {\n                        this.emit('unauthorized');\n                        eventEmitter.emit('unauthorized');\n                    }\n\n                    if (response && response.text) {\n                        error = error || {};\n                        reject(Object.assign(error, { message: response.text }));\n                    } else {\n                        reject({ error: error });\n                    }\n\n                } else {\n                    if (this.isBpmRequest()) {\n                        if (response.header && response.header.hasOwnProperty('set-cookie')) {\n                            this.authentications.cookie = response.header['set-cookie'][0];\n                        }\n                    }\n                    let data = {};\n                    if (response.type === 'text/html') {\n                        data = this.deserialize(response);\n                    } else {\n                        data = this.deserialize(response, returnType);\n                    }\n\n                    eventEmitter.emit('success', data);\n                    resolve(data);\n                }\n            });\n        });\n\n        promise.on = function () {\n            eventEmitter.on.apply(eventEmitter, arguments);\n            return this;\n        };\n\n        promise.once = function () {\n            eventEmitter.once.apply(eventEmitter, arguments);\n            return this;\n        };\n\n        promise.emit = function () {\n            eventEmitter.emit.apply(eventEmitter, arguments);\n            return this;\n        };\n\n        promise.off = function () {\n            eventEmitter.off.apply(eventEmitter, arguments);\n            return this;\n        };\n\n        promise.abort = function () {\n            request.abort();\n            return this;\n        };\n\n        return promise;\n    }\n\n    isBpmRequest(): boolean {\n        return this.className === 'ProcessAuth' || this.className === 'ProcessClient';\n    }\n\n    isCsrfEnabled(): boolean {\n        if (this.config) {\n            return !this.config.disableCsrf;\n        } else {\n            return true;\n        }\n    }\n\n    setCsrfToken(request: any) {\n        const token = this.createCSRFToken();\n        request.set('X-CSRF-TOKEN', token);\n\n        if (!this.isBrowser()) {\n            request.set('Cookie', 'CSRF-TOKEN=' + token + ';path=/');\n        }\n\n        try {\n            document.cookie = 'CSRF-TOKEN=' + token + ';path=/';\n        } catch (err) {\n            /* continue regardless of error */\n        }\n    }\n\n    isBrowser(): boolean {\n        return (typeof window !== 'undefined' && typeof window.document !== 'undefined');\n    }\n\n    createCSRFToken(a?: any): string {\n        return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e16] + (1e16).toString()).replace(/[01]/g, this.createCSRFToken);\n    }\n\n    progress(event: any, eventEmitter: ee.Emitter) {\n        if (event.lengthComputable) {\n            const percent = Math.round(event.loaded / event.total * 100);\n\n            eventEmitter.emit('progress', {\n                total: event.total,\n                loaded: event.loaded,\n                percent: percent\n            });\n        }\n    }\n\n    /**\n     * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders\n     * with parameter values\n     */\n    buildUrlCustomBasePath(basePath: string, path: string, pathParams: any): string {\n        if (path && path !== '' && !path.match(/^\\//)) {\n            path = '/' + path;\n        }\n        let url = basePath + path;\n\n        url = url.replace(/\\{([\\w-]+)\\}/g, function (fullMatch, key) {\n            let value;\n            if (pathParams.hasOwnProperty(key)) {\n                value = paramToString(pathParams[key]);\n            } else {\n                value = fullMatch;\n            }\n            return encodeURIComponent(value);\n        });\n        return url;\n    }\n\n    buildRequest(\n        httpMethod: string,\n        url: string,\n        queryParams: { [key: string]: any },\n        headerParams: { [key: string]: any },\n        formParams: { [key: string]: any },\n        bodyParam: string | Object,\n        contentTypes: string[],\n        accepts: string[],\n        responseType: string,\n        eventEmitter: ee.Emitter,\n        returnType: string) {\n        const request: any = superagent(httpMethod, url);\n\n        // apply authentications\n        this.applyAuthToRequest(request);\n\n        // set query parameters\n        request.query(this.normalizeParams(queryParams));\n\n        // set header parameters\n        request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n        if (this.isBpmRequest() && this.isCsrfEnabled()) {\n            this.setCsrfToken(request);\n        }\n\n        if (this.isWithCredentials()) {\n            request.withCredentials();\n        }\n\n        // add cookie for activiti\n        if (this.isBpmRequest()) {\n            request.withCredentials();\n            if (this.authentications.cookie) {\n                if (!this.isBrowser()) {\n                    request.set('Cookie', this.authentications.cookie);\n                }\n            }\n        }\n\n        // set request timeout\n        request.timeout(this.timeout);\n\n        const contentType = this.jsonPreferredMime(contentTypes);\n\n        if (contentType && contentType !== 'multipart/form-data') {\n            request.type(contentType);\n        } else if (!request.header['Content-Type'] && contentType !== 'multipart/form-data') {\n            request.type('application/json');\n        }\n\n        if (contentType === 'application/x-www-form-urlencoded') {\n            request.send(this.normalizeParams(formParams)).on('progress', (event: any) => {\n                this.progress(event, eventEmitter);\n            });\n        } else if (contentType === 'multipart/form-data') {\n            const _formParams = this.normalizeParams(formParams);\n            for (const key in _formParams) {\n                if (_formParams.hasOwnProperty(key)) {\n                    if (this.isFileParam(_formParams[key])) {\n                        // file field\n                        request.attach(key, _formParams[key]).on('progress', (event: ProgressEvent) => {// jshint ignore:line\n                            this.progress(event, eventEmitter);\n                        });\n                    } else {\n                        request.field(key, _formParams[key]).on('progress', (event: ProgressEvent) => {// jshint ignore:line\n                            this.progress(event, eventEmitter);\n                        });\n                    }\n                }\n            }\n        } else if (bodyParam) {\n            request.send(bodyParam).on('progress', (event: any) => {\n                this.progress(event, eventEmitter);\n            });\n        }\n\n        const accept = this.jsonPreferredMime(accepts);\n        if (accept) {\n            request.accept(accept);\n        }\n\n        if (returnType === 'blob' || returnType === 'Blob' || responseType === 'blob' || responseType === 'Blob') {\n            request.responseType('blob');\n        } else if (returnType === 'String') {\n            request.responseType('string');\n        }\n\n        return request;\n    }\n\n    getAlfTicket(ticket: string): string {\n        let alfTicketFragment = '';\n        if (ticket) {\n            alfTicketFragment = '&alf_ticket=' + ticket;\n        } else if (this.config.ticketEcm) {\n            alfTicketFragment = '&alf_ticket=' + this.config.ticketEcm;\n        }\n\n        return alfTicketFragment;\n    }\n}\n"]}