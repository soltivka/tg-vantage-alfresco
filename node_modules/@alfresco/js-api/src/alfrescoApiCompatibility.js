"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlfrescoApiCompatibility = void 0;
const alfrescoApi_1 = require("./alfrescoApi");
const src_1 = require("./api-legacy/content-rest-api/src");
const src_2 = require("./api-legacy/activiti-rest-api/src");
const api_1 = require("./api/discovery-rest-api/api");
const api_2 = require("./api/gs-classification-rest-api/api");
const api_3 = require("./api/gs-core-rest-api/api");
const api_4 = require("./api/search-rest-api/api");
const api_5 = require("./api/auth-rest-api/api");
const content_api_1 = require("./api/content-custom-api/api/content.api");
const alfrescoUpload_1 = require("./api-legacy/alfrescoUpload");
class AlfrescoApiCompatibility extends alfrescoApi_1.AlfrescoApi {
    constructor(config) {
        super(config);
        this.core = {};
        this.activiti = {};
        this.auth = {};
        this.search = {};
        this.gsCore = {};
        this.gsClassification = {};
        this.discovery = {};
        this.initObjects();
    }
    configureJsApi(config) {
        this.setConfig(config);
    }
    initObjects() {
        this._instantiateOldObjects(src_1.CONTENT_LEGACY_APIS, this.core);
        this._instantiateOldObjects(src_2.APS_LEGACY_APIS, this.activiti);
        this._instantiateNewObjects(api_5.AUTH_APIS, this.auth);
        this._instantiateNewObjects(api_4.SEARCH_APIS, this.search);
        this._instantiateNewObjects(api_1.DISCOVERY_APIS, this.discovery);
        this._instantiateNewObjects(api_3.GS_CORE_APIS, this.gsCore);
        this._instantiateNewObjects(api_2.GS_CLASSIFICATION_APIS, this.gsClassification);
        this.nodes = this.node = this.core.nodesApi;
        this.content = new content_api_1.ContentApi(this);
        this.upload = new alfrescoUpload_1.AlfrescoUpload(this);
        this.webScript = this.core.webscriptApi;
        this.bpmClient = this.processClient;
        this.ecmClient = this.contentClient;
    }
    _instantiateOldObjects(module, moduleCopy) {
        let classArray = Object.keys(module);
        classArray.forEach((currentClass) => {
            moduleCopy[currentClass] = module[currentClass];
            let obj = this._stringToObject(currentClass, module);
            let nameObj = this._lowerFirst(currentClass);
            obj === null || obj === void 0 ? void 0 : obj.init(this);
            moduleCopy[nameObj] = obj;
        });
    }
    _stringToObject(nameClass, module) {
        try {
            if (typeof module[nameClass] === 'function') {
                return new module[nameClass]();
            }
        }
        catch (error) {
            console.log(nameClass + '  ' + error);
        }
    }
    _instantiateNewObjects(module, moduleCopy) {
        let classArray = Object.keys(module);
        classArray.forEach((currentClass) => {
            moduleCopy[currentClass] = module[currentClass];
            let nameObj = this._lowerFirst(currentClass);
            moduleCopy[nameObj] = new module[currentClass](this);
        });
    }
    _lowerFirst(text) {
        return text.charAt(0).toLowerCase() + text.slice(1);
    }
}
exports.AlfrescoApiCompatibility = AlfrescoApiCompatibility;
//# sourceMappingURL=../../src/alfrescoApiCompatibility.js.map